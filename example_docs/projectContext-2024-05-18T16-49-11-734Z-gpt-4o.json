{
    "projectName": "fofo-docs",
    "projectDescription": {
        "goal": "The codebase aims to interact with vector databases, provide utility functions for file handling, generate prompts for code analysis, define TypeScript types, interact with language models, generate documentation, and parse codebases.",
        "features_functions": "1. src/vectorDB.ts: Interacts with a vector database using ChromaClient, embedding functions from Google and OpenAI, and manages collections for storing and retrieving project-related data.\n2. src/shared.ts: Provides utility functions for reading file content, breaking code into chunks, and counting tokens in a string.\n3. src/prompt.ts: Generates prompts for identifying and describing different types of code objects within a given code snippet.\n4. src/objectSchemas.ts: Defines TypeScript types and interfaces for summarizing and analyzing code projects.\n5. src/llmInterface.ts: Interacts with various language models (LLMs) to generate responses based on provided prompts, supporting multiple backends including OLLAMA, VERTEX, and OPENAI.\n6. src/index.ts: A CLI tool for generating documentation for a codebase using FoFo Docs.\n7. src/documentationGenerator.ts: Generates Markdown documentation from a given project summary, including details about code files and various code objects within them.\n8. src/codeParser.ts: Parses a codebase, generates summaries for code files, and stores relevant data in a vector database."
    },
    "projectLocation": "./",
    "codeFiles": [
        {
            "fileName": "src/vectorDB.ts",
            "fileLocation": ".//src/vectorDB.ts",
            "codeSummary": {
                "goal": "The code aims to interact with a vector database using ChromaClient, embedding functions from Google and OpenAI, and manage collections for storing and retrieving project-related data.",
                "features_functions": "The code includes environment variable checks, selection of embedding functions based on configuration, and functions to load or create collections, save data to the vector database, and search the database using embeddings."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "load_create_collection",
                        "type": "function",
                        "description": "Loads an existing collection or creates a new one if it doesn't exist.",
                        "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                        "codeLine": 42,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which the collection is to be loaded or created.",
                                "example": "exampleProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "collection",
                            "type": "Collection | void",
                            "description": "The loaded or newly created collection, or void if an error occurs.",
                            "example": "collectionInstance"
                        }
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "function",
                        "description": "Saves data to the vector database. Currently, this function is not fully implemented.",
                        "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                        "codeLine": 74,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which the data is to be saved.",
                                "example": "exampleProject"
                            },
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be saved in the vector database.",
                                "example": "exampleCode"
                            },
                            {
                                "name": "ragData",
                                "type": "RagData",
                                "description": "The RAG data associated with the code.",
                                "example": "exampleRagData"
                            }
                        ],
                        "functionReturns": {
                            "name": "bOK",
                            "type": "boolean",
                            "description": "Returns true if the data is saved successfully, otherwise false.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "searchRAG",
                        "type": "function",
                        "description": "Searches the RAG data in the vector database using a search string.",
                        "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                        "codeLine": 97,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which the RAG data is to be searched.",
                                "example": "exampleProject"
                            },
                            {
                                "name": "searchString",
                                "type": "string",
                                "description": "The search string used to query the RAG data.",
                                "example": "exampleSearchString"
                            }
                        ],
                        "functionReturns": {
                            "name": "ragData",
                            "type": "RagData",
                            "description": "The RAG data retrieved from the search.",
                            "example": "exampleRagData"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "apiPass",
                        "type": "variable",
                        "description": "API password retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const apiPass = process.env.API_PASS || \"\";",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "apiUser",
                        "type": "variable",
                        "description": "API user retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const apiUser = process.env.API_USER || \"\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "geminiKey",
                        "type": "variable",
                        "description": "Gemini key retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const geminiKey = process.env.GEMINI_KEY || \"\";",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "apiURL",
                        "type": "variable",
                        "description": "API URL retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const apiURL = process.env.API_URL || \"\";",
                        "codeLine": 12,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "embedderMode",
                        "type": "variable",
                        "description": "Embedder mode retrieved from environment variables or defaults to 'GCP'.",
                        "codeSnippet": "const embedderMode = process.env.EMBEDDER_MODE || \"GCP\";",
                        "codeLine": 19,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "embedder",
                        "type": "variable",
                        "description": "Embedder function instance, initialized based on the embedder mode.",
                        "codeSnippet": "let embedder: any | undefined = undefined;",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chromaSettings",
                        "type": "variable",
                        "description": "Settings for ChromaClient, currently set to undefined.",
                        "codeSnippet": "const chromaSettings = undefined;",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "client",
                        "type": "variable",
                        "description": "Instance of ChromaClient initialized with chromaSettings.",
                        "codeSnippet": "const client = new ChromaClient(chromaSettings);",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "name",
                        "type": "variable",
                        "description": "Name of the collection, derived from the projectName parameter.",
                        "codeSnippet": "const name = projectName;",
                        "codeLine": 45,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "bOK",
                        "type": "variable",
                        "description": "Boolean flag indicating the success status, currently always true.",
                        "codeSnippet": "let bOK = true;",
                        "codeLine": 80,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "searchEmbeddings",
                        "type": "variable",
                        "description": "Embeddings generated for the search string.",
                        "codeSnippet": "const searchEmbeddings = await embedder.generate([searchString]);",
                        "codeLine": 98,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "searchResults",
                        "type": "variable",
                        "description": "Results of the query performed on the collection using the search embeddings.",
                        "codeSnippet": "const searchResults = await collection.query({ queryEmbeddings: searchEmbeddings });",
                        "codeLine": 99,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "ragData",
                        "type": "variable",
                        "description": "RAG data constructed from the search results.",
                        "codeSnippet": "const ragData = { metadata: (searchResults.metadatas[0] as any) || {}, embeddings: searchResults.embeddings ? ([0] as any) : {}, documentData: (searchResults.documents[0] as any) || [], };",
                        "codeLine": 104,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "ProjectSummary, RagData",
                        "type": "import",
                        "description": "Imports the ProjectSummary and RagData types from the objectSchemas module.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures the dotenv module to load environment variables from a .env file.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection",
                        "type": "import",
                        "description": "Imports the ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, and Collection classes from the chromadb module.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from \"chromadb\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "load_create_collection",
                        "type": "export",
                        "description": "Asynchronously loads or creates a collection in the vector database based on the provided project name.",
                        "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "export",
                        "description": "Asynchronously saves data to the vector database for a given project name, code, and RAG data.",
                        "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                        "codeLine": 82,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "export",
                        "description": "Asynchronously searches the vector database for RAG data based on the provided project name and search string.",
                        "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                        "codeLine": 103,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/shared.ts",
            "fileLocation": ".//src/shared.ts",
            "codeSummary": {
                "goal": "The code provides utility functions for reading file content, breaking code into chunks, and counting tokens in a string.",
                "features_functions": "1. getFileContentLen: Asynchronously reads a file and returns the length of its content. 2. breakCodeIntoChunks: Splits code into chunks based on a specified token size. 3. getTokens: Counts the number of tokens in a given string by splitting it on spaces."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "getFileContentLen",
                        "type": "function",
                        "description": "Asynchronously reads a file and returns the length of its content.",
                        "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file to be read.",
                                "example": "/path/to/file.txt"
                            }
                        ],
                        "functionReturns": {
                            "name": "length",
                            "type": "number",
                            "description": "Length of the file content.",
                            "example": 123
                        }
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "function",
                        "description": "Breaks a given code string into chunks of specified token size.",
                        "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be broken into chunks.",
                                "example": "const a = 1;\\nconst b = 2;"
                            },
                            {
                                "name": "chunkSize",
                                "type": "number",
                                "description": "The maximum token size for each chunk.",
                                "example": 10
                            }
                        ],
                        "functionReturns": {
                            "name": "chunks",
                            "type": "string[]",
                            "description": "Array of code chunks.",
                            "example": [
                                "const a = 1;\\n",
                                "const b = 2;\\n"
                            ]
                        }
                    },
                    {
                        "name": "getTokens",
                        "type": "function",
                        "description": "Returns the number of tokens in a given code string.",
                        "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                        "codeLine": 26,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be tokenized.",
                                "example": "const a = 1;"
                            }
                        ],
                        "functionReturns": {
                            "name": "tokenCount",
                            "type": "number",
                            "description": "Number of tokens in the code.",
                            "example": 4
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "codeByLine",
                        "type": "variable",
                        "description": "An array of strings, each representing a line of the input code.",
                        "codeSnippet": "const codeByLine = code.split('\\n');",
                        "codeLine": 8,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chunks",
                        "type": "variable",
                        "description": "An array to store chunks of code.",
                        "codeSnippet": "const chunks = [];",
                        "codeLine": 9,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentChunk",
                        "type": "variable",
                        "description": "A string to accumulate the current chunk of code.",
                        "codeSnippet": "let currentChunk = '';",
                        "codeLine": 10,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentChunkTokenCount",
                        "type": "variable",
                        "description": "A counter to keep track of the number of tokens in the current chunk.",
                        "codeSnippet": "let currentChunkTokenCount = 0;",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "line",
                        "type": "variable",
                        "description": "A string representing the current line of code being processed.",
                        "codeSnippet": "for (const line of codeByLine) {",
                        "codeLine": 13,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "lineTokenCount",
                        "type": "variable",
                        "description": "The number of tokens in the current line of code.",
                        "codeSnippet": "const lineTokenCount = line.split(/\\s+/).length;",
                        "codeLine": 14,
                        "codeIndent": 2,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "readFile",
                        "type": "import",
                        "description": "Imports the readFile function from the fs/promises module, which is used to read files asynchronously.",
                        "codeSnippet": "import { readFile } from 'fs/promises';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "getFileContentLen",
                        "type": "export",
                        "description": "Asynchronously reads a file and returns the length of its content.",
                        "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "export",
                        "description": "Splits code into chunks of a specified size based on token count.",
                        "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "export",
                        "description": "Returns the number of tokens in a given code string.",
                        "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                        "codeLine": 24,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/prompt.ts",
            "fileLocation": ".//src/prompt.ts",
            "codeSummary": {
                "goal": "The code provides a set of functions to generate prompts for identifying and describing different types of code objects (e.g., classes, functions, variables, types, interfaces, imports, exports) within a given code snippet.",
                "features_functions": "The main function, 'generalPrompt', generates a detailed prompt based on the provided context, relevant code, file path, code snippet, and type of code object. Specific functions like 'classesPrompt', 'functionsPrompt', 'variablesPrompt', 'typesPrompt', 'interfacesPrompt', 'importsPrompt', and 'exportsPrompt' are wrappers around 'generalPrompt' to handle different types of code objects. Additionally, 'getLanguageTypeFromFile' guesses the programming language based on the file path."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "generalPrompt",
                        "type": "function",
                        "description": "Generates a prompt for identifying and describing code objects in a given code snippet.",
                        "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified ..."
                        }
                    },
                    {
                        "name": "classesPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing class objects in a given code snippet.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 95,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "classes"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified classes ..."
                        }
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing function objects in a given code snippet.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 97,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified functions ..."
                        }
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing variable objects in a given code snippet.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 99,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "variables"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified variables ..."
                        }
                    },
                    {
                        "name": "typesPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing type objects in a given code snippet.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 101,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "types"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified types ..."
                        }
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing interface objects in a given code snippet.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 103,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "interfaces"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified interfaces ..."
                        }
                    },
                    {
                        "name": "importsPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing import objects in a given code snippet.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 105,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "imports"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified imports ..."
                        }
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "function",
                        "description": "Generates a prompt specifically for identifying and describing export objects in a given code snippet.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 107,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context: ..."
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code: ..."
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "const example = () => { ... }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify.",
                                "example": "exports"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "You will be asked to provide a JSON object that contains the identified exports ..."
                        }
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "function",
                        "description": "Generates a prompt to guess the programming language based on the file name and path.",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { ... }",
                        "codeLine": 109,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file.",
                                "example": ".//src/prompt.ts"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): ..."
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "codeSummary",
                        "type": "variable",
                        "description": "A constant string that contains a template for creating a summary of the code in markdown format.",
                        "codeSnippet": "export const codeSummary = `\\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\\n    \\n    ##Execution Flow\\n\\n1. The app... etc\\n`",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "generalPrompt",
                        "type": "variable",
                        "description": "A constant function that generates a prompt for identifying and describing code objects in a given code snippet.",
                        "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "CodeObjects",
                        "type": "import",
                        "description": "Imports the CodeObjects type from the objectSchemas module.",
                        "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "codeSummary",
                        "type": "export",
                        "description": "A constant string template for creating a summary of the code in markdown format.",
                        "codeSnippet": "export const codeSummary = `...`;",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "classesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying class objects in a code snippet.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 97,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying function objects in a code snippet.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 99,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying variable objects in a code snippet.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 101,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "typesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying type objects in a code snippet.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 103,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying interface objects in a code snippet.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 105,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "importsPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying import objects in a code snippet.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 110,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for identifying export objects in a code snippet.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 112,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "export",
                        "description": "A function that guesses the programming language based on the file name and path.",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { ... };",
                        "codeLine": 114,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/objectSchemas.ts",
            "fileLocation": ".//src/objectSchemas.ts",
            "codeSummary": {
                "goal": "The code defines TypeScript types and interfaces for summarizing and analyzing code projects.",
                "features_functions": "The code includes type definitions for various code object types (e.g., class, function, variable), interfaces for project summaries, model configurations, RAG data, code file summaries, execution flows, function parameters, and code objects. It also defines types for code object properties and project metadata."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [],
                "variables": [],
                "types": [
                    {
                        "name": "CodeObjectType",
                        "type": "type",
                        "description": "Represents the type of a code object, such as class, function, variable, etc.",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "type",
                        "description": "Represents the different categories of code objects, such as classes, functions, variables, etc.",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjectTypes",
                        "type": "type",
                        "description": "Represents the properties of a code object, such as name, type, description, etc.",
                        "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "ProjectSummary",
                        "type": "interface",
                        "description": "Represents a summary of a project including its name, description, location, code files, RAG data, and team context.",
                        "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "models",
                        "type": "interface",
                        "description": "Represents a model with a name and the model object itself.",
                        "codeSnippet": "export interface models { name: string, model: any, }",
                        "codeLine": 13,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "interface",
                        "description": "Configuration for model services including an array of models and an optional endpoint.",
                        "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                        "codeLine": 16,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "interface",
                        "description": "Represents RAG (Retrieval-Augmented Generation) data including metadata, optional embeddings, and document data.",
                        "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                        "codeLine": 20,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "interface",
                        "description": "Represents a summary of code including its goal and features/functions.",
                        "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "interface",
                        "description": "Represents a summary of a code file including its name, location, code summary, language, execution flow, and code objects.",
                        "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ExecutionFlow",
                        "type": "interface",
                        "description": "Represents the execution flow of a code file including step number, description, importance, code snippet, line number, indentation, file name, and location.",
                        "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionParameter",
                        "type": "interface",
                        "description": "Represents a parameter of a function including its name, type, description, and example.",
                        "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                        "codeLine": 49,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionReturn",
                        "type": "interface",
                        "description": "Represents the return value of a function including its type, description, and example.",
                        "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                        "codeLine": 54,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "interface",
                        "description": "Represents a code object including its name, type, description, code snippet, line number, indentation, file name, location, and various properties related to its structure and usage.",
                        "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                        "codeLine": 59,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ],
                "imports": [],
                "exports": [
                    {
                        "name": "CodeObjectType",
                        "type": "export",
                        "description": "Type alias for different kinds of code objects.",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "export",
                        "description": "Type alias for different categories of code objects.",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "export",
                        "description": "Interface representing a summary of a project.",
                        "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "models",
                        "type": "export",
                        "description": "Interface representing a model with a name and the model itself.",
                        "codeSnippet": "export interface models { name: string, model: any, }",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "export",
                        "description": "Interface representing the configuration for a model service.",
                        "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                        "codeLine": 14,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "export",
                        "description": "Interface representing RAG (Retrieval-Augmented Generation) data.",
                        "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                        "codeLine": 18,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "export",
                        "description": "Interface representing a summary of code.",
                        "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                        "codeLine": 26,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "export",
                        "description": "Interface representing a summary of a code file.",
                        "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ExecutionFlow",
                        "type": "export",
                        "description": "Interface representing the execution flow of code.",
                        "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionParameter",
                        "type": "export",
                        "description": "Interface representing a function parameter.",
                        "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionReturn",
                        "type": "export",
                        "description": "Interface representing a function return value.",
                        "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                        "codeLine": 48,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "export",
                        "description": "Interface representing a code object.",
                        "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                        "codeLine": 53,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjectTypes",
                        "type": "export",
                        "description": "Type alias for different properties of a code object.",
                        "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                        "codeLine": 66,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/llmInterface.ts",
            "fileLocation": ".//src/llmInterface.ts",
            "codeSummary": {
                "goal": "The code is designed to interact with various language models (LLMs) to generate responses based on provided prompts. It supports multiple backends including OLLAMA, VERTEX, and OPENAI, and includes functions for validating and fixing JSON, parsing YAML, and generating responses from LLMs.",
                "features_functions": "The code includes features such as model configuration, safety settings, and response generation. It defines multiple model modes, sets up configurations for different LLM backends, and includes functions like `validateJSON`, `fixJSON`, `parseYaml`, `parseText`, `wait`, `infer`, `getCodeSummaryFromLLM`, and `callLLM` to handle various tasks related to interacting with LLMs."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "getModelBackend",
                        "type": "function",
                        "description": "Retrieves the backend type for a given model.",
                        "codeSnippet": "const getModelBackend = (selectedModel: string) => { ... }",
                        "codeLine": 79,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "selectedModel",
                                "type": "string",
                                "description": "The model for which the backend type is to be retrieved.",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "backend",
                            "type": "llm_modes",
                            "description": "The backend type for the given model.",
                            "example": "OLLAMA"
                        }
                    },
                    {
                        "name": "validateJSON",
                        "type": "function",
                        "description": "Validates if a given string is a valid JSON.",
                        "codeSnippet": "function validateJSON(jsonString: string): boolean { ... }",
                        "codeLine": 160,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "jsonString",
                                "type": "string",
                                "description": "The JSON string to be validated.",
                                "example": "{\"key\": \"value\"}"
                            }
                        ],
                        "functionReturns": {
                            "name": "isValid",
                            "type": "boolean",
                            "description": "True if the string is a valid JSON, otherwise false.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "fixJSON",
                        "type": "function",
                        "description": "Attempts to repair a malformed JSON string.",
                        "codeSnippet": "function fixJSON(jsonString: string): string { ... }",
                        "codeLine": 168,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "jsonString",
                                "type": "string",
                                "description": "The malformed JSON string to be repaired.",
                                "example": "{\"key\": \"value\""
                            }
                        ],
                        "functionReturns": {
                            "name": "repairedJSON",
                            "type": "string",
                            "description": "The repaired JSON string.",
                            "example": "{\"key\": \"value\"}"
                        }
                    },
                    {
                        "name": "parseYaml",
                        "type": "function",
                        "description": "Converts a YAML string into a JSON object.",
                        "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                        "codeLine": 176,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "yamlString",
                                "type": "string",
                                "description": "The YAML string to be converted.",
                                "example": "key: value"
                            }
                        ],
                        "functionReturns": {
                            "name": "jsonObject",
                            "type": "any",
                            "description": "The resulting JSON object.",
                            "example": "{\"key\": \"value\"}"
                        }
                    },
                    {
                        "name": "parseText",
                        "type": "function",
                        "description": "Converts a text string into a JSON object with a specified key.",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                        "codeLine": 185,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "text",
                                "type": "string",
                                "description": "The text string to be converted.",
                                "example": "This is a response."
                            },
                            {
                                "name": "resKey",
                                "type": "string",
                                "description": "The key for the resulting JSON object.",
                                "example": "response"
                            }
                        ],
                        "functionReturns": {
                            "name": "jsonObject",
                            "type": "any",
                            "description": "The resulting JSON object.",
                            "example": "{\"response\": \"This is a response.\"}"
                        }
                    },
                    {
                        "name": "wait",
                        "type": "function",
                        "description": "Pauses execution for a specified number of milliseconds.",
                        "codeSnippet": "async function wait(ms: number) { ... }",
                        "codeLine": 192,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "ms",
                                "type": "number",
                                "description": "The number of milliseconds to wait.",
                                "example": 1000
                            }
                        ],
                        "functionReturns": {
                            "name": "promise",
                            "type": "Promise<void>",
                            "description": "A promise that resolves after the specified time.",
                            "example": "Promise<void>"
                        }
                    },
                    {
                        "name": "infer",
                        "type": "function",
                        "description": "Infers a response from a given prompt using a specified model.",
                        "codeSnippet": "export async function infer( ... ) { ... }",
                        "codeLine": 194,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "prompt",
                                "type": "string",
                                "description": "The prompt to be sent to the model.",
                                "example": "What is the capital of France?"
                            },
                            {
                                "name": "responseMode",
                                "type": "\"JSON object\" | \"YAML object\" | \"TEXT STRING\"",
                                "description": "The format of the response.",
                                "example": "\"JSON object\""
                            },
                            {
                                "name": "responseKey",
                                "type": "string",
                                "description": "The key for the response (only applicable for TEXT STRING responseMode).",
                                "example": "response"
                            },
                            {
                                "name": "bPro",
                                "type": "boolean",
                                "description": "Flag to use advanced model.",
                                "example": false
                            },
                            {
                                "name": "bRetry",
                                "type": "boolean",
                                "description": "Flag to retry on failure.",
                                "example": true
                            },
                            {
                                "name": "supplementalData",
                                "type": "any",
                                "description": "Additional data to be used in the inference.",
                                "example": "{}"
                            },
                            {
                                "name": "model",
                                "type": "string",
                                "description": "The model to be used for inference.",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "response",
                            "type": "Promise<any>",
                            "description": "The response from the model.",
                            "example": "{\"response\": \"Paris\"}"
                        }
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "function",
                        "description": "Gets a summary of the given code from the LLM.",
                        "codeSnippet": "export async function getCodeSummaryFromLLM( ... ) { ... }",
                        "codeLine": 431,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "codeToSummarize",
                                "type": "string",
                                "description": "The code to be summarized.",
                                "example": "function example() { ... }"
                            },
                            {
                                "name": "model",
                                "type": "string",
                                "description": "The model to be used for summarization.",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "codeSummary",
                            "type": "Promise<codeSummary>",
                            "description": "The summary of the code.",
                            "example": "{\"goal\": \"Summarize code\", \"features_functions\": \"Summarizes code features\"}"
                        }
                    },
                    {
                        "name": "callLLM",
                        "type": "function",
                        "description": "Calls the LLM with a given prompt template and project context.",
                        "codeSnippet": "export async function callLLM( ... ) { ... }",
                        "codeLine": 451,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "promptTemplate",
                                "type": "string",
                                "description": "The template for the prompt.",
                                "example": "Summarize the following code: <code snippet>"
                            },
                            {
                                "name": "projectContext",
                                "type": "ProjectSummary",
                                "description": "The context of the project.",
                                "example": "{\"teamContext\": \"Team info\"}"
                            },
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be analyzed.",
                                "example": "function example() { ... }"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path to the file containing the code.",
                                "example": ".//src/llmInterface.ts"
                            },
                            {
                                "name": "bRAG",
                                "type": "boolean",
                                "description": "Flag to use RAG (Retrieval-Augmented Generation).",
                                "example": false
                            },
                            {
                                "name": "model",
                                "type": "string",
                                "description": "The model to be used for the call.",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "response",
                            "type": "Promise<any>",
                            "description": "The response from the LLM.",
                            "example": "{\"response\": \"Summary of code\"}"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "retries",
                        "type": "variable",
                        "description": "A counter to keep track of the number of retries for certain operations.",
                        "codeSnippet": "let retries = 0;",
                        "codeLine": 30,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endpoints",
                        "type": "variable",
                        "description": "An object containing the endpoint URLs for different model services.",
                        "codeSnippet": "const endpoints = { OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\" };",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "systemPrompt",
                        "type": "variable",
                        "description": "A system prompt string used for initializing the AI model.",
                        "codeSnippet": "const systemPrompt = \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "MODEL_MODES",
                        "type": "variable",
                        "description": "An array of objects representing different model modes and their configurations.",
                        "codeSnippet": "const MODEL_MODES = [ { name: \"qwen:32b-chat-v1.5-q4_0\", model: \"qwen:32b-chat-v1.5-q4_0\", backend: \"OLLAMA\" }, ... ];",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "secretSauce",
                        "type": "variable",
                        "description": "An object containing configuration settings for the AI model.",
                        "codeSnippet": "const secretSauce = { temperature: 0.3, top_p: 0.2 };",
                        "codeLine": 79,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "openai",
                        "type": "variable",
                        "description": "An instance of the OpenAI class initialized with organization and API key.",
                        "codeSnippet": "const openai = new OpenAI({ organization: process.env.OPENAI_ORG_ID, apiKey: process.env.OPENAI_API_KEY });",
                        "codeLine": 84,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "ollama",
                        "type": "variable",
                        "description": "An instance of the Ollama class initialized with the host endpoint.",
                        "codeSnippet": "const ollama = new Ollama({ host: endpoints.OLLAMA });",
                        "codeLine": 89,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "contextLength",
                        "type": "variable",
                        "description": "A constant representing the context length for the AI model.",
                        "codeSnippet": "const contextLength = 16000;",
                        "codeLine": 90,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "project",
                        "type": "variable",
                        "description": "A constant representing the project name for Vertex AI.",
                        "codeSnippet": "const project = \"sweet-papa-technologies\";",
                        "codeLine": 93,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "location",
                        "type": "variable",
                        "description": "A constant representing the location for Vertex AI.",
                        "codeSnippet": "const location = \"us-central1\";",
                        "codeLine": 94,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "textModel",
                        "type": "variable",
                        "description": "A constant representing the text model for Vertex AI.",
                        "codeSnippet": "const textModel = \"gemini-1.5-flash-preview-0514\";",
                        "codeLine": 95,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "textModelAdvanced",
                        "type": "variable",
                        "description": "A constant representing the advanced text model for Vertex AI.",
                        "codeSnippet": "const textModelAdvanced = \"gemini-1.5-pro-preview-0514\";",
                        "codeLine": 96,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "vertexWAIT",
                        "type": "variable",
                        "description": "A constant representing the wait time for Vertex AI operations.",
                        "codeSnippet": "const vertexWAIT = 5000;",
                        "codeLine": 97,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "vertexAI",
                        "type": "variable",
                        "description": "An instance of the VertexAI class initialized with project and location.",
                        "codeSnippet": "const vertexAI = new VertexAI({ project: project, location: location });",
                        "codeLine": 99,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "safetySettings",
                        "type": "variable",
                        "description": "An array of objects representing safety settings for the AI model.",
                        "codeSnippet": "const safetySettings = [ { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE }, ... ];",
                        "codeLine": 101,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "generativeModel",
                        "type": "variable",
                        "description": "An instance of a generative model from Vertex AI with specific settings.",
                        "codeSnippet": "const generativeModel = vertexAI.getGenerativeModel({ model: textModel, safetySettings: safetySettings, \"generationConfig\": { temperature: secretSauce.temperature, topP: secretSauce.top_p } });",
                        "codeLine": 112,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "generateModelAdv",
                        "type": "variable",
                        "description": "An instance of an advanced generative model from Vertex AI with specific settings.",
                        "codeSnippet": "const generateModelAdv = vertexAI.getGenerativeModel({ model: textModelAdvanced, safetySettings: safetySettings, \"generationConfig\": { temperature: secretSauce.temperature, topP: secretSauce.top_p } });",
                        "codeLine": 118,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "llm_modes",
                        "type": "type",
                        "description": "Defines the possible modes for the language model backend.",
                        "codeSnippet": "type llm_modes = \"OLLAMA\" | \"VERTEX\" | \"OPENAI\";",
                        "codeLine": 86,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "interfaces": [],
                "imports": [
                    {
                        "name": "CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig",
                        "type": "import",
                        "description": "Imports various types and configurations from the objectSchemas module.",
                        "codeSnippet": "import { CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "import",
                        "description": "Imports the searchRAG function from the vectorDB module.",
                        "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "yaml",
                        "type": "import",
                        "description": "Imports the yaml module from js-yaml.",
                        "codeSnippet": "import yaml from \"js-yaml\";",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "jsonrepair",
                        "type": "import",
                        "description": "Imports the jsonrepair function from the jsonrepair module.",
                        "codeSnippet": "import { jsonrepair } from \"jsonrepair\";",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "Ollama",
                        "type": "import",
                        "description": "Imports the Ollama class from the ollama module.",
                        "codeSnippet": "import { Ollama } from \"ollama\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "OpenAI",
                        "type": "import",
                        "description": "Imports the OpenAI class from the openai module.",
                        "codeSnippet": "import OpenAI from \"openai\";",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures environment variables from a .env file.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 13,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI",
                        "type": "import",
                        "description": "Imports various types and classes from the @google-cloud/vertexai module.",
                        "codeSnippet": "import { FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI } from \"@google-cloud/vertexai\";",
                        "codeLine": 15,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "import",
                        "description": "Imports the getTokens function from the shared module.",
                        "codeSnippet": "import { getTokens } from \"./shared\";",
                        "codeLine": 20,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "parseYaml",
                        "type": "export",
                        "description": "Function to convert a YAML string into a JSON object.",
                        "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                        "codeLine": 133,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "parseText",
                        "type": "export",
                        "description": "Function to convert text into a JSON object with a specified key.",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                        "codeLine": 144,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "infer",
                        "type": "export",
                        "description": "Function to infer a response from a given prompt using different model backends.",
                        "codeSnippet": "export async function infer(prompt: string, responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\", responseKey?: string, bPro = false, bRetry = true, supplementalData?: any, model: string = textModel): Promise<any> { ... }",
                        "codeLine": 153,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "export",
                        "description": "Function to get a summary of a code block from a language model.",
                        "codeSnippet": "export async function getCodeSummaryFromLLM(codeToSummarize: string, model: string = textModel): Promise<codeSummary> { ... }",
                        "codeLine": 383,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "callLLM",
                        "type": "export",
                        "description": "Function to call a language model with a given prompt template and project context.",
                        "codeSnippet": "export async function callLLM(promptTemplate: string, projectContext: ProjectSummary, code: string, filePath: string, bRAG = false, model: string = textModel): Promise<any> { ... }",
                        "codeLine": 398,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/index.ts",
            "fileLocation": ".//src/index.ts",
            "codeSummary": {
                "goal": "The code is a CLI tool for generating documentation for a codebase using FoFo Docs.",
                "features_functions": "The tool allows specifying the project name, input path, output path, test mode, and an option to generate documentation from a JSON file. It includes features for parsing the codebase, generating documentation, and handling file system operations such as checking for file existence and creating directories."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "program.action",
                        "type": "function",
                        "description": "Defines the action to be taken when the command is executed. It generates documentation for the specified project.",
                        "codeSnippet": ".action(async (projectName, options) => { ... })",
                        "codeLine": 17,
                        "codeIndent": 2,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "Name of the project for which documentation is to be generated",
                                "example": "myProject"
                            },
                            {
                                "name": "options",
                                "type": "object",
                                "description": "Options for generating documentation, including input path, output path, test mode, and JSON file path",
                                "example": {
                                    "input": ".",
                                    "output": "./output",
                                    "test": "false",
                                    "generateFromFile": "path/to/json"
                                }
                            }
                        ],
                        "functionReturns": {
                            "name": "void",
                            "type": "void",
                            "description": "This function does not return a value",
                            "example": null
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "program",
                        "type": "variable",
                        "description": "An instance of the Command class from the commander library, used to define and manage the command-line interface.",
                        "codeSnippet": "const program = new Command();",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "bTestMode",
                        "type": "variable",
                        "description": "A boolean indicating whether the program is running in test mode, derived from the command-line options.",
                        "codeSnippet": "const bTestMode = options.test;",
                        "codeLine": 22,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectPath",
                        "type": "variable",
                        "description": "The path to the codebase, derived from the command-line options.",
                        "codeSnippet": "const projectPath = options.input;",
                        "codeLine": 23,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "outputDir",
                        "type": "variable",
                        "description": "The path to the output directory for the generated documentation, derived from the command-line options.",
                        "codeSnippet": "const outputDir = options.output;",
                        "codeLine": 24,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "jsonFile",
                        "type": "variable",
                        "description": "The path to the JSON file used for generating documentation, derived from the command-line options.",
                        "codeSnippet": "const jsonFile = options.generateFromFile;",
                        "codeLine": 25,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "startTime",
                        "type": "variable",
                        "description": "The timestamp marking the start of the codebase parsing process.",
                        "codeSnippet": "const startTime = Date.now();",
                        "codeLine": 52,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "parsedCodebase",
                        "type": "variable",
                        "description": "The result of parsing the codebase, containing the parsed data.",
                        "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                        "codeLine": 54,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endTime",
                        "type": "variable",
                        "description": "The timestamp marking the end of the documentation generation process.",
                        "codeSnippet": "const endTime = Date.now();",
                        "codeLine": 70,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "totalTime",
                        "type": "variable",
                        "description": "The total time taken for the documentation generation process, calculated as the difference between endTime and startTime.",
                        "codeSnippet": "const totalTime = endTime - startTime;",
                        "codeLine": 71,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "Command",
                        "type": "import",
                        "description": "Importing the Command class from the 'commander' module.",
                        "codeSnippet": "import { Command } from \"commander\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "parseCodebase",
                        "type": "import",
                        "description": "Importing the parseCodebase function from the local module './codeParser'.",
                        "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "import",
                        "description": "Importing the generateDocumentation function from the local module './documentationGenerator'.",
                        "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "fs",
                        "type": "import",
                        "description": "Importing the 'fs' module for file system operations.",
                        "codeSnippet": "import fs from \"fs\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    }
                ],
                "exports": []
            }
        },
        {
            "fileName": "src/documentationGenerator.ts",
            "fileLocation": ".//src/documentationGenerator.ts",
            "codeSummary": {
                "goal": "The code aims to generate Markdown documentation from a given project summary, including details about code files, their summaries, and various code objects within them.",
                "features_functions": "The code includes functions to create directories, check for duplicates, generate content for different code objects (classes, functions, variables, etc.), and write the generated content to Markdown files. It also handles backup directories and ensures the output folder is writable."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "jsonToMarkdown",
                        "type": "function",
                        "description": "Converts a project summary to markdown format and writes it to the specified output folder.",
                        "codeSnippet": "function jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) { ... }",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "The summary of the project to be converted to markdown.",
                                "example": "{ projectName: 'Example', projectDescription: { goal: 'Example goal', features_functions: 'Example features' }, teamContext: 'Example team context', codeFiles: [] }"
                            },
                            {
                                "name": "outputFolder",
                                "type": "string",
                                "description": "The folder where the markdown files will be written.",
                                "example": "/path/to/output/folder"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "void",
                            "description": "This function does not return a value.",
                            "example": "N/A"
                        }
                    },
                    {
                        "name": "generateCodeObjectContent",
                        "type": "function",
                        "description": "Generates the content for a code object in markdown format.",
                        "codeSnippet": "function generateCodeObjectContent(codeObject: CodeObject, indent: number): string { ... }",
                        "codeLine": 156,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "codeObject",
                                "type": "CodeObject",
                                "description": "The code object to generate content for.",
                                "example": "{ name: 'Example', type: 'function', description: 'Example description', codeSnippet: 'function example() {}', codeLine: 1, codeIndent: 0, fileName: 'example.ts', fileLocation: '/path/to/example.ts', isExported: false, isPrivate: false, isAsync: false }"
                            },
                            {
                                "name": "indent",
                                "type": "number",
                                "description": "The indentation level for the generated content.",
                                "example": 0
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated markdown content for the code object.",
                            "example": "### Example - [FUNCTION] ... "
                        }
                    },
                    {
                        "name": "getEmoji",
                        "type": "function",
                        "description": "Returns an emoji based on the type of code object.",
                        "codeSnippet": "function getEmoji(type: string): string { ... }",
                        "codeLine": 202,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "type",
                                "type": "string",
                                "description": "The type of code object.",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The emoji corresponding to the code object type.",
                            "example": "🔧"
                        }
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "function",
                        "description": "Generates documentation for a project and writes it to the specified folder.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                        "codeLine": 222,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "folderPath",
                                "type": "string",
                                "description": "The path to the folder where the documentation will be written.",
                                "example": "/path/to/folder"
                            },
                            {
                                "name": "projectContext",
                                "type": "ProjectSummary | null",
                                "description": "The context of the project to generate documentation for. If null, it will be read from the jsonFile.",
                                "example": "{ projectName: 'Example', projectDescription: { goal: 'Example goal', features_functions: 'Example features' }, teamContext: 'Example team context', codeFiles: [] }"
                            },
                            {
                                "name": "jsonFile",
                                "type": "string",
                                "description": "The path to the JSON file containing the project context. If not provided, a new file will be created.",
                                "example": "/path/to/jsonFile.json"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "boolean",
                            "description": "Returns true if the documentation was successfully generated, otherwise false.",
                            "example": true
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "backupDirectory",
                        "type": "variable",
                        "description": "Path to the backup directory where files will be stored if the main directory is not accessible.",
                        "codeSnippet": "const backupDirectory = path.join(__dirname, 'backup');",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "toc",
                        "type": "variable",
                        "description": "Array to store the table of contents for the markdown documentation.",
                        "codeSnippet": "const toc: string[] = [];",
                        "codeLine": 14,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "sectionContent",
                        "type": "variable",
                        "description": "Object to store different sections of the documentation content.",
                        "codeSnippet": "const sectionContent = { classes: '', functions: '', variables: '', types: '', comments: '', imports: '', exports: '', interfaces: '' };",
                        "codeLine": 35,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "duplicateTracking",
                        "type": "variable",
                        "description": "Object to track duplicate code objects to avoid redundancy in the documentation.",
                        "codeSnippet": "const duplicateTracking: dupTrack = { classes: [], functions: [], variables: [], types: [], comments: [], imports: [], exports: [], interfaces: [] };",
                        "codeLine": 48,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileContent",
                        "type": "variable",
                        "description": "String to store the content of the markdown file for each code file.",
                        "codeSnippet": "let fileContent = `# ${file.fileName} - ${projectSummary.projectName}\n`;",
                        "codeLine": 23,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "sectionLinks",
                        "type": "variable",
                        "description": "Array to store links to different sections in the table of contents.",
                        "codeSnippet": "const sectionLinks: string[] = [];",
                        "codeLine": 34,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "dupObj",
                        "type": "type",
                        "description": "Defines the structure for tracking duplicate objects with optional name and content properties, and a mandatory type property.",
                        "codeSnippet": "interface dupObj {\n    name?: string;\n    content?: string;\n    type: CodeObjectType;\n}",
                        "codeLine": 48,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "dupTrack",
                        "type": "type",
                        "description": "Defines the structure for tracking duplicates of various code object types including classes, functions, variables, types, comments, imports, exports, and interfaces.",
                        "codeSnippet": "interface dupTrack {\n    classes: dupObj[];\n    functions: dupObj[];\n    variables: dupObj[];\n    types: dupObj[];\n    comments: dupObj[];\n    imports: dupObj[];\n    exports: dupObj[];\n    interfaces: dupObj[];\n}",
                        "codeLine": 54,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "dupObj",
                        "type": "interface",
                        "description": "Interface for tracking duplicate objects with optional name and content properties, and a required type property.",
                        "codeSnippet": "interface dupObj {\n    name?: string;\n    content?: string;\n    type: CodeObjectType;\n}",
                        "codeLine": 47,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "dupTrack",
                        "type": "interface",
                        "description": "Interface for tracking duplicates of various code object types, including classes, functions, variables, types, comments, imports, exports, and interfaces.",
                        "codeSnippet": "interface dupTrack {\n    classes: dupObj[];\n    functions: dupObj[];\n    variables: dupObj[];\n    types: dupObj[];\n    comments: dupObj[];\n    imports: dupObj[];\n    exports: dupObj[];\n    interfaces: dupObj[];\n}",
                        "codeLine": 53,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "CodeObject, ProjectSummary, CodeObjectType",
                        "type": "import",
                        "description": "Imports CodeObject, ProjectSummary, and CodeObjectType from the local module './objectSchemas'. These are likely types or interfaces used in the code.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "fs",
                        "type": "import",
                        "description": "Imports the 'fs' module from Node.js, which provides an API for interacting with the file system.",
                        "codeSnippet": "import fs from 'fs';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "path",
                        "type": "import",
                        "description": "Imports the 'path' module from Node.js, which provides utilities for working with file and directory paths.",
                        "codeSnippet": "import path from 'path';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures the 'dotenv' module, which loads environment variables from a .env file into process.env.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "generateDocumentation",
                        "type": "export",
                        "description": "Asynchronously generates documentation for a given project context and saves it to the specified folder path. If the folder path is not writable, it attempts to use a backup directory.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                        "codeLine": 268,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/codeParser.ts",
            "fileLocation": ".//src/codeParser.ts",
            "codeSummary": {
                "goal": "The code aims to parse a codebase, generate summaries for code files, and store relevant data in a vector database.",
                "features_functions": "The code includes functions for breaking code into chunks, generating code object summaries using LLMs, merging code objects, and handling large files. It also supports reading ignore patterns from .gitignore and .fofoignore files, and integrates with a vector database for storing processed data."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "genCodeChunkObj",
                        "type": "function",
                        "description": "Generates a CodeObject for a given code chunk in a project.",
                        "codeSnippet": "async function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{ ... }",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "Summary of the project.",
                                "example": "{ projectName: 'example', projectDescription: {}, projectLocation: 'path', codeFiles: [], ragData: [], teamContext: '' }"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file being processed.",
                                "example": "src/example.ts"
                            },
                            {
                                "name": "chunk",
                                "type": "string",
                                "description": "Code chunk to be processed.",
                                "example": "const example = 'code chunk';"
                            }
                        ],
                        "functionReturns": {
                            "name": "chunkCodeObjects",
                            "type": "CodeObject",
                            "description": "Generated CodeObject for the given code chunk.",
                            "example": "{ classes: [], functions: [], variables: [], types: [], interfaces: [], imports: [], exports: [] }"
                        }
                    },
                    {
                        "name": "mergeObjectArrays",
                        "type": "function",
                        "description": "Merges incoming code objects with existing code objects, removing duplicates.",
                        "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                        "codeLine": 75,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "codeObjArray",
                                "type": "CodeObject",
                                "description": "Existing code objects.",
                                "example": "{ classes: [], functions: [], variables: [], types: [], interfaces: [], imports: [], exports: [] }"
                            },
                            {
                                "name": "newCodeObj",
                                "type": "any",
                                "description": "New code objects to be merged.",
                                "example": "{ functions: [{ name: 'newFunction', type: 'function', description: 'A new function', codeSnippet: 'function newFunction() { ... }', codeLine: 10, codeIndent: 2, fileName: 'example.ts', fileLocation: 'src/example.ts', isExported: false, isPrivate: false, isAsync: false, functionParameters: [], functionReturns: {} }] }"
                            }
                        ],
                        "functionReturns": {
                            "name": "mergedCodeObj",
                            "type": "CodeObject",
                            "description": "Merged code objects without duplicates.",
                            "example": "{ classes: [], functions: [], variables: [], types: [], interfaces: [], imports: [], exports: [] }"
                        }
                    },
                    {
                        "name": "parseCodebase",
                        "type": "function",
                        "description": "Parses the codebase and generates a project summary.",
                        "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                        "codeLine": 145,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "Path to the project directory or file.",
                                "example": "src/project"
                            },
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "Name of the project.",
                                "example": "exampleProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "projectSummary",
                            "type": "ProjectSummary",
                            "description": "Summary of the parsed project.",
                            "example": "{ projectName: 'exampleProject', projectDescription: {}, projectLocation: 'src/project', codeFiles: [], ragData: [], teamContext: '' }"
                        }
                    },
                    {
                        "name": "getIgnoredFiles",
                        "type": "function",
                        "description": "Retrieves the list of files to be ignored based on .gitignore and .fofoignore files.",
                        "codeSnippet": "async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }",
                        "codeLine": 335,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "Path to the project directory.",
                                "example": "src/project"
                            }
                        ],
                        "functionReturns": {
                            "name": "ignorePatterns",
                            "type": "string[]",
                            "description": "List of file patterns to be ignored.",
                            "example": "[ 'node_modules/**', 'dist/**' ]"
                        }
                    },
                    {
                        "name": "getFileSizeInKB",
                        "type": "function",
                        "description": "Gets the size of a file in kilobytes.",
                        "codeSnippet": "async function getFileSizeInKB(filePath: string): Promise<number> { ... }",
                        "codeLine": 379,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file.",
                                "example": "src/example.ts"
                            }
                        ],
                        "functionReturns": {
                            "name": "size",
                            "type": "number",
                            "description": "Size of the file in kilobytes.",
                            "example": 1024
                        }
                    },
                    {
                        "name": "isFileTooLarge",
                        "type": "function",
                        "description": "Checks if a file is too large based on its size and character count.",
                        "codeSnippet": "async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars: number = 300): Promise<boolean> { ... }",
                        "codeLine": 384,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file.",
                                "example": "src/example.ts"
                            },
                            {
                                "name": "maxFileSizeKB",
                                "type": "number",
                                "description": "Maximum allowed file size in kilobytes.",
                                "example": 3000
                            },
                            {
                                "name": "maxChars",
                                "type": "number",
                                "description": "Maximum allowed number of characters in the file.",
                                "example": 300
                            }
                        ],
                        "functionReturns": {
                            "name": "tooLarge",
                            "type": "boolean",
                            "description": "Indicates if the file is too large.",
                            "example": true
                        }
                    },
                    {
                        "name": "getContextFromFile",
                        "type": "function",
                        "description": "Retrieves the team context from a specified file.",
                        "codeSnippet": "function getContextFromFile() { ... }",
                        "codeLine": 398,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true,
                        "isAsync": false,
                        "functionParameters": [],
                        "functionReturns": {
                            "name": "context",
                            "type": "string",
                            "description": "Team context retrieved from the file.",
                            "example": "Team context content"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "llmToUse",
                        "type": "variable",
                        "description": "Specifies the LLM to use, fetched from environment variables.",
                        "codeSnippet": "const llmToUse = process.env.LLM_TO_USE || undefined;",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "breakNum",
                        "type": "variable",
                        "description": "Specifies the maximum token split, fetched from environment variables or defaults to 400.",
                        "codeSnippet": "const breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;",
                        "codeLine": 30,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "objectKeys",
                        "type": "variable",
                        "description": "An array of code object types to process.",
                        "codeSnippet": "const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'imports', 'exports']",
                        "codeLine": 35,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "chunkCodeObjectsAny",
                        "type": "variable",
                        "description": "An object to store code objects for each chunk.",
                        "codeSnippet": "const chunkCodeObjectsAny = {} as any;",
                        "codeLine": 36,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "mergedCodeObj",
                        "type": "variable",
                        "description": "An object to store merged code objects.",
                        "codeSnippet": "const mergedCodeObj: any = codeObjArray;",
                        "codeLine": 80,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "projectSummary",
                        "type": "variable",
                        "description": "An object to store the summary of the project being parsed.",
                        "codeSnippet": "const projectSummary: ProjectSummary = { projectName: projectName, projectDescription: {} as codeSummary, projectLocation: projectPath, codeFiles: [], ragData: [], teamContext: \"\", // Placeholder, TODO==> Add support for team context };",
                        "codeLine": 127,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "filePaths",
                        "type": "variable",
                        "description": "An array to store file paths to be parsed.",
                        "codeSnippet": "let filePaths: string[] = [];",
                        "codeLine": 141,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "codeDescription",
                        "type": "variable",
                        "description": "A string to store the description of the code files.",
                        "codeSnippet": "let codeDescription = '';",
                        "codeLine": 276,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "contextFile",
                        "type": "variable",
                        "description": "Specifies the path to the context file, fetched from environment variables or defaults to './prompts/teamContext.md'.",
                        "codeSnippet": "const contextFile = process.env.CONTEXT_FILE === '' ? \"./prompts/teamContext.md\" : (process.env.CONTEXT_FILE || \"./prompts/teamContext.md\");",
                        "codeLine": 359,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "glob",
                        "type": "import",
                        "description": "Imports the 'glob' function from the 'glob' module, which is used for file pattern matching.",
                        "codeSnippet": "import { glob } from \"glob\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "readFile",
                        "type": "import",
                        "description": "Imports the 'readFile' function from the 'fs/promises' module, which is used to read files asynchronously.",
                        "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "stat",
                        "type": "import",
                        "description": "Imports the 'stat' function from the 'fs/promises' module, which is used to get file statistics asynchronously.",
                        "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "import",
                        "description": "Imports the 'CodeFileSummary' type from the './objectSchemas' module.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "import",
                        "description": "Imports the 'CodeObject' type from the './objectSchemas' module.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "import",
                        "description": "Imports the 'CodeObjects' type from the './objectSchemas' module.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "import",
                        "description": "Imports the 'ProjectSummary' type from the './objectSchemas' module.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "import",
                        "description": "Imports the 'RagData' type from the './objectSchemas' module.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "import",
                        "description": "Imports the 'codeSummary' type from the './objectSchemas' module.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "infer",
                        "type": "import",
                        "description": "Imports the 'infer' function from the './llmInterface' module.",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "callLLM",
                        "type": "import",
                        "description": "Imports the 'callLLM' function from the './llmInterface' module.",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "import",
                        "description": "Imports the 'getCodeSummaryFromLLM' function from the './llmInterface' module.",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "import",
                        "description": "Imports the 'getLanguageTypeFromFile' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "classesPrompt",
                        "type": "import",
                        "description": "Imports the 'classesPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "import",
                        "description": "Imports the 'functionsPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "import",
                        "description": "Imports the 'variablesPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "typesPrompt",
                        "type": "import",
                        "description": "Imports the 'typesPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "import",
                        "description": "Imports the 'interfacesPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "importsPrompt",
                        "type": "import",
                        "description": "Imports the 'importsPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "import",
                        "description": "Imports the 'exportsPrompt' function from the './prompt' module.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "import",
                        "description": "Imports the 'saveToVectorDatabase' function from the './vectorDB' module.",
                        "codeSnippet": "import { saveToVectorDatabase } from \"./vectorDB\";",
                        "codeLine": 6,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "import",
                        "description": "Imports the 'breakCodeIntoChunks' function from the './shared' module.",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getFileContentLen",
                        "type": "import",
                        "description": "Imports the 'getFileContentLen' function from the './shared' module.",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "import",
                        "description": "Imports the 'getTokens' function from the './shared' module.",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "fs",
                        "type": "import",
                        "description": "Imports the 'fs' module, which provides an API for interacting with the file system.",
                        "codeSnippet": "import fs from \"fs\";",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports the 'dotenv/config' module, which loads environment variables from a .env file into process.env.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "mergeObjectArrays",
                        "type": "export",
                        "description": "Function to merge incoming code objects with existing code objects, handling duplicates and ensuring proper merging.",
                        "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                        "codeLine": 75,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "parseCodebase",
                        "type": "export",
                        "description": "Function to parse the entire codebase, generating a project summary with code objects and descriptions.",
                        "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                        "codeLine": 139,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ]
            }
        }
    ],
    "ragData": [
        {
            "metadata": {
                "filename": ".//src/vectorDB.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "load_create_collection",
                            "type": "function",
                            "description": "Loads an existing collection or creates a new one if it doesn't exist.",
                            "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                            "codeLine": 42,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project for which the collection is to be loaded or created.",
                                    "example": "exampleProject"
                                }
                            ],
                            "functionReturns": {
                                "name": "collection",
                                "type": "Collection | void",
                                "description": "The loaded or newly created collection, or void if an error occurs.",
                                "example": "collectionInstance"
                            }
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "type": "function",
                            "description": "Saves data to the vector database. Currently, this function is not fully implemented.",
                            "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                            "codeLine": 74,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project for which the data is to be saved.",
                                    "example": "exampleProject"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be saved in the vector database.",
                                    "example": "exampleCode"
                                },
                                {
                                    "name": "ragData",
                                    "type": "RagData",
                                    "description": "The RAG data associated with the code.",
                                    "example": "exampleRagData"
                                }
                            ],
                            "functionReturns": {
                                "name": "bOK",
                                "type": "boolean",
                                "description": "Returns true if the data is saved successfully, otherwise false.",
                                "example": "true"
                            }
                        },
                        {
                            "name": "searchRAG",
                            "type": "function",
                            "description": "Searches the RAG data in the vector database using a search string.",
                            "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                            "codeLine": 97,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project for which the RAG data is to be searched.",
                                    "example": "exampleProject"
                                },
                                {
                                    "name": "searchString",
                                    "type": "string",
                                    "description": "The search string used to query the RAG data.",
                                    "example": "exampleSearchString"
                                }
                            ],
                            "functionReturns": {
                                "name": "ragData",
                                "type": "RagData",
                                "description": "The RAG data retrieved from the search.",
                                "example": "exampleRagData"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "apiPass",
                            "type": "variable",
                            "description": "API password retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const apiPass = process.env.API_PASS || \"\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "apiUser",
                            "type": "variable",
                            "description": "API user retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const apiUser = process.env.API_USER || \"\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "geminiKey",
                            "type": "variable",
                            "description": "Gemini key retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const geminiKey = process.env.GEMINI_KEY || \"\";",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "apiURL",
                            "type": "variable",
                            "description": "API URL retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const apiURL = process.env.API_URL || \"\";",
                            "codeLine": 12,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "embedderMode",
                            "type": "variable",
                            "description": "Embedder mode retrieved from environment variables or defaults to 'GCP'.",
                            "codeSnippet": "const embedderMode = process.env.EMBEDDER_MODE || \"GCP\";",
                            "codeLine": 19,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "embedder",
                            "type": "variable",
                            "description": "Embedder function instance, initialized based on the embedder mode.",
                            "codeSnippet": "let embedder: any | undefined = undefined;",
                            "codeLine": 21,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "chromaSettings",
                            "type": "variable",
                            "description": "Settings for ChromaClient, currently set to undefined.",
                            "codeSnippet": "const chromaSettings = undefined;",
                            "codeLine": 39,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "client",
                            "type": "variable",
                            "description": "Instance of ChromaClient initialized with chromaSettings.",
                            "codeSnippet": "const client = new ChromaClient(chromaSettings);",
                            "codeLine": 41,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "name",
                            "type": "variable",
                            "description": "Name of the collection, derived from the projectName parameter.",
                            "codeSnippet": "const name = projectName;",
                            "codeLine": 45,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "collection",
                            "type": "variable",
                            "description": "Collection instance or void, used to store the collection retrieved or created.",
                            "codeSnippet": "let collection: Collection | void;",
                            "codeLine": 46,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "bOK",
                            "type": "variable",
                            "description": "Boolean flag indicating the success status, currently always true.",
                            "codeSnippet": "let bOK = true;",
                            "codeLine": 80,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "collection",
                            "type": "variable",
                            "description": "Collection instance retrieved or created for the given projectName.",
                            "codeSnippet": "const collection = await load_create_collection(projectName);",
                            "codeLine": 94,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "searchEmbeddings",
                            "type": "variable",
                            "description": "Embeddings generated for the search string.",
                            "codeSnippet": "const searchEmbeddings = await embedder.generate([searchString]);",
                            "codeLine": 98,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "searchResults",
                            "type": "variable",
                            "description": "Results of the query performed on the collection using the search embeddings.",
                            "codeSnippet": "const searchResults = await collection.query({ queryEmbeddings: searchEmbeddings });",
                            "codeLine": 99,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ragData",
                            "type": "variable",
                            "description": "RAG data constructed from the search results.",
                            "codeSnippet": "const ragData = { metadata: (searchResults.metadatas[0] as any) || {}, embeddings: searchResults.embeddings ? ([0] as any) : {}, documentData: (searchResults.documents[0] as any) || [], };",
                            "codeLine": 104,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "ProjectSummary, RagData",
                            "type": "import",
                            "description": "Imports the ProjectSummary and RagData types from the objectSchemas module.",
                            "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports and configures the dotenv module to load environment variables from a .env file.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection",
                            "type": "import",
                            "description": "Imports the ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, and Collection classes from the chromadb module.",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from \"chromadb\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "load_create_collection",
                            "type": "export",
                            "description": "Asynchronously loads or creates a collection in the vector database based on the provided project name.",
                            "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                            "codeLine": 47,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "type": "export",
                            "description": "Asynchronously saves data to the vector database for a given project name, code, and RAG data.",
                            "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                            "codeLine": 82,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "searchRAG",
                            "type": "export",
                            "description": "Asynchronously searches the vector database for RAG data based on the provided project name and search string.",
                            "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                            "codeLine": 103,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        }
                    ]
                }
            },
            "documentData": "import { ProjectSummary, RagData } from \"./objectSchemas\";\nimport \"dotenv/config\";\nimport {\n  ChromaClient,\n  GoogleGenerativeAiEmbeddingFunction,\n  OpenAIEmbeddingFunction,\n  Collection,\n} from \"chromadb\";\n\nconst apiPass = process.env.API_PASS || \"\";\nconst apiUser = process.env.API_USER || \"\";\nconst geminiKey = process.env.GEMINI_KEY || \"\";\nconst apiURL = process.env.API_URL || \"\";\n\n// Check to see if any of the environment variables are missing\nif (!apiPass || !apiUser || !geminiKey || !apiURL) {\n  console.error(\"Missing environment variables - Please check your .env file\");\n  process.exit(1);\n}\n\nconst embedderMode = process.env.EMBEDDER_MODE || \"GCP\";\n\nlet embedder: any | undefined = undefined;\n\nswitch (embedderMode) {\n  case \"GCP\":\n    embedder = new GoogleGenerativeAiEmbeddingFunction({\n      googleApiKey: geminiKey,\n    });\n    break;\n  case \"OpenAI\":\n    embedder = new OpenAIEmbeddingFunction({\n      openai_api_key: process.env.OPENAI_API_KEY || \"\",\n      openai_organization_id: process.env.OPENAI_ORG_ID || \"\",\n      openai_model: \"text-embedding-3-small\",\n    });\n    break;\n  default:\n    embedder = new GoogleGenerativeAiEmbeddingFunction({\n      googleApiKey: geminiKey,\n    });\n}\n\n// const chromaSettings = {\n//     path: apiURL,\n//       \"auth\": {\n//           provider: \"basic\", credentials: `${apiUser}:${apiPass}`\n//           }\n//     }\n\nconst chromaSettings = undefined;\n\nconst client = new ChromaClient(chromaSettings);\n\nexport async function load_create_collection(\n  projectName: string\n): Promise<Collection | void> {\n  const name = projectName;\n  let collection: Collection | void;\n\n  const hb = await client.heartbeat().catch((err: any) => {\n    console.log(\"Error connecting to database\");\n    console.error(err);\n  });\n\n  console.log(\"Heartbeat for Database:\");\n  console.log(hb);\n\n  try {\n    collection = await client.getCollection({\n      name: name,\n      embeddingFunction: embedder,\n    });\n    if (collection instanceof Collection && \"name\" in collection) {\n      return collection;\n    }\n  } catch (err) {\n    console.log(\"Collection not found, creating collection\");\n  }\n\n  collection = await client\n    .createCollection({ name: name, embeddingFunction: embedder })\n    .catch((err: any) => {\n      console.log(\"Error creating collection\");\n      console.error(err);\n    });\n\n  return collection;\n}\n\nexport async function saveToVectorDatabase(\n  projectName: string,\n  code: string,\n  ragData: RagData\n): Promise<boolean> {\n  let bOK = true;\n\n  return bOK; // TODO: Implement this function fully\n\n//   const meta = ragData.metadata as any;\n\n//   const filename = meta.filename;\n\n//   delete meta.codeObjects;\n\n//   const collection = await load_create_collection(`${projectName}`);\n\n//   const embeddings = await embedder.generate([code]);\n//   console.log(embeddings);\n\n//   if (!collection) {\n//     console.error(\"Error creating collection\");\n//     return false;\n//   }\n\n//   const res = await collection.add({\n//     ids: [`${projectName}-${filename}-${ragData.metadata.codeChunkId}`],\n//     documents: [code],\n//     embeddings: embeddings,\n//     metadatas: [meta],\n//   });\n\n//   console.log(\"Saved to Vector Database:\");\n//   console.log(res);\n\n//   return true;\n}\nexport async function searchRAG(\n  projectName: string,\n  searchString: string\n): Promise<RagData> {\n  const collection = await load_create_collection(projectName);\n  if (!collection) {\n    console.error(\"Error creating collection\");\n    return {} as RagData;\n  }\n  const searchEmbeddings = await embedder.generate([searchString]);\n  const searchResults = await collection.query({\n    queryEmbeddings: searchEmbeddings,\n  });\n\n  console.log(\"Search Results for RAG:\");\n  console.log(searchResults);\n\n  const ragData = {\n    metadata: (searchResults.metadatas[0] as any) || {},\n    embeddings: searchResults.embeddings ? ([0] as any) : {},\n    documentData: (searchResults.documents[0] as any) || [],\n  };\n\n  console.log(\"RAG Data:\");\n  console.log(ragData);\n\n  return ragData;\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/shared.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getFileContentLen",
                            "type": "function",
                            "description": "Asynchronously reads a file and returns the length of its content.",
                            "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file to be read.",
                                    "example": "/path/to/file.txt"
                                }
                            ],
                            "functionReturns": {
                                "name": "length",
                                "type": "number",
                                "description": "Length of the file content.",
                                "example": 123
                            }
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "type": "function",
                            "description": "Breaks a given code string into chunks of specified token size.",
                            "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be broken into chunks.",
                                    "example": "const a = 1;\\nconst b = 2;"
                                },
                                {
                                    "name": "chunkSize",
                                    "type": "number",
                                    "description": "The maximum token size for each chunk.",
                                    "example": 10
                                }
                            ],
                            "functionReturns": {
                                "name": "chunks",
                                "type": "string[]",
                                "description": "Array of code chunks.",
                                "example": [
                                    "const a = 1;\\n",
                                    "const b = 2;\\n"
                                ]
                            }
                        },
                        {
                            "name": "getTokens",
                            "type": "function",
                            "description": "Returns the number of tokens in a given code string.",
                            "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                            "codeLine": 26,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be tokenized.",
                                    "example": "const a = 1;"
                                }
                            ],
                            "functionReturns": {
                                "name": "tokenCount",
                                "type": "number",
                                "description": "Number of tokens in the code.",
                                "example": 4
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "codeByLine",
                            "type": "variable",
                            "description": "An array of strings, each representing a line of the input code.",
                            "codeSnippet": "const codeByLine = code.split('\\n');",
                            "codeLine": 8,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "chunks",
                            "type": "variable",
                            "description": "An array to store chunks of code.",
                            "codeSnippet": "const chunks = [];",
                            "codeLine": 9,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "currentChunk",
                            "type": "variable",
                            "description": "A string to accumulate the current chunk of code.",
                            "codeSnippet": "let currentChunk = '';",
                            "codeLine": 10,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "currentChunkTokenCount",
                            "type": "variable",
                            "description": "A counter to keep track of the number of tokens in the current chunk.",
                            "codeSnippet": "let currentChunkTokenCount = 0;",
                            "codeLine": 11,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "line",
                            "type": "variable",
                            "description": "A string representing the current line of code being processed.",
                            "codeSnippet": "for (const line of codeByLine) {",
                            "codeLine": 13,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "lineTokenCount",
                            "type": "variable",
                            "description": "The number of tokens in the current line of code.",
                            "codeSnippet": "const lineTokenCount = line.split(/\\s+/).length;",
                            "codeLine": 14,
                            "codeIndent": 2,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "readFile",
                            "type": "import",
                            "description": "Imports the readFile function from the fs/promises module, which is used to read files asynchronously.",
                            "codeSnippet": "import { readFile } from 'fs/promises';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "getFileContentLen",
                            "type": "export",
                            "description": "Asynchronously reads a file and returns the length of its content.",
                            "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "type": "export",
                            "description": "Splits code into chunks of a specified size based on token count.",
                            "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "export",
                            "description": "Returns the number of tokens in a given code string.",
                            "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                            "codeLine": 24,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        }
                    ]
                }
            },
            "documentData": "import { readFile } from 'fs/promises';\n\n\nexport async function getFileContentLen(filePath: string): Promise<number> {\n    return await readFile(filePath, 'utf-8').then(content => content.length);\n}\n\nexport function breakCodeIntoChunks(code: string, chunkSize: number): string[] {\n    const codeByLine = code.split('\\n');\n    const chunks = [];\n    let currentChunk = '';\n    let currentChunkTokenCount = 0;\n\n    for (const line of codeByLine) {\n        const lineTokenCount = line.split(/\\s+/).length; // Approximate token count by splitting on whitespace\n\n        if (currentChunkTokenCount + lineTokenCount <= chunkSize) {\n            currentChunk += line + '\\n';\n            currentChunkTokenCount += lineTokenCount;\n        } else {\n            chunks.push(currentChunk);\n            currentChunk = line + '\\n';\n            currentChunkTokenCount = lineTokenCount;\n        }\n    }\n\n    if (currentChunk) {\n        chunks.push(currentChunk);\n    }\n\n    return chunks;\n}\n\nexport function getTokens(code: string): number {\n    return code.split(' ').length\n}"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "generalPrompt",
                            "type": "function",
                            "description": "Generates a prompt for identifying and describing code objects in a given code snippet.",
                            "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "functions"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified ..."
                            }
                        },
                        {
                            "name": "classesPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing class objects in a given code snippet.",
                            "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                            "codeLine": 95,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "classes"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified classes ..."
                            }
                        },
                        {
                            "name": "functionsPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing function objects in a given code snippet.",
                            "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                            "codeLine": 97,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "functions"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified functions ..."
                            }
                        },
                        {
                            "name": "variablesPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing variable objects in a given code snippet.",
                            "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                            "codeLine": 99,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "variables"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified variables ..."
                            }
                        },
                        {
                            "name": "typesPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing type objects in a given code snippet.",
                            "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                            "codeLine": 101,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "types"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified types ..."
                            }
                        },
                        {
                            "name": "interfacesPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing interface objects in a given code snippet.",
                            "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                            "codeLine": 103,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "interfaces"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified interfaces ..."
                            }
                        },
                        {
                            "name": "importsPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing import objects in a given code snippet.",
                            "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                            "codeLine": 105,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "imports"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified imports ..."
                            }
                        },
                        {
                            "name": "exportsPrompt",
                            "type": "function",
                            "description": "Generates a prompt specifically for identifying and describing export objects in a given code snippet.",
                            "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                            "codeLine": 107,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context: ..."
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code: ..."
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "const example = () => { ... }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify.",
                                    "example": "exports"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "You will be asked to provide a JSON object that contains the identified exports ..."
                            }
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "type": "function",
                            "description": "Generates a prompt to guess the programming language based on the file name and path.",
                            "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { ... }",
                            "codeLine": 109,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file.",
                                    "example": ".//src/prompt.ts"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): ..."
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "codeSummary",
                            "type": "variable",
                            "description": "A constant string that contains a template for creating a summary of the code in markdown format.",
                            "codeSnippet": "export const codeSummary = `\\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\\n    \\n    ##Execution Flow\\n\\n1. The app... etc\\n`",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false
                        },
                        {
                            "name": "generalPrompt",
                            "type": "variable",
                            "description": "A constant function that generates a prompt for identifying and describing code objects in a given code snippet.",
                            "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "CodeObjects",
                            "type": "import",
                            "description": "Imports the CodeObjects type from the objectSchemas module.",
                            "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "codeSummary",
                            "type": "export",
                            "description": "A constant string template for creating a summary of the code in markdown format.",
                            "codeSnippet": "export const codeSummary = `...`;",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "classesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying class objects in a code snippet.",
                            "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                            "codeLine": 97,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "functionsPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying function objects in a code snippet.",
                            "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                            "codeLine": 99,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "variablesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying variable objects in a code snippet.",
                            "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                            "codeLine": 101,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "typesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying type objects in a code snippet.",
                            "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                            "codeLine": 103,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "interfacesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying interface objects in a code snippet.",
                            "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                            "codeLine": 105,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "importsPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying import objects in a code snippet.",
                            "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                            "codeLine": 110,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "exportsPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for identifying export objects in a code snippet.",
                            "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                            "codeLine": 112,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "type": "export",
                            "description": "A function that guesses the programming language based on the file name and path.",
                            "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { ... };",
                            "codeLine": 114,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        }
                    ]
                }
            },
            "documentData": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\\n\\n1. The app... etc\n`\nimport { CodeObjects } from \"./objectSchemas\";\nconst generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => {\n    const fileName = filePath.split('/').pop();\n    return`\nYou will be asked to provide a JSON object that contains the identified ${type} objects in the code snippet attached at the bottom of this request.\n\n## Context\n- Project and Team Context: \n${context}\n\n## Previously Parsed Code\n- Relevant Code:\n${relevantCode}\n\n## Task\nIn the following code snippet, please identify and described all of the ${type} objects. ONLY focus on the ${type} objects and their descriptions. DO NOT add or implement new code.\n\nIF no ${type} objects are found, please respond with an empty JSON object:\n\n{\n    \"${type}\": []\n}\n\nThe only values that can be set for the \"type\" key are: \n\"class\", \"function\", \"variable\", \"type\", \"interface\", \"comment\", \"import\", \"export\"\n\n## Response Format\nRespond ONLY with a JSON object containing the identified ${type} and their descriptions. Here is an example of the required format:\n\n${type === 'classes' ? `\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"type\": \"class\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"subObjects\": []\n        }\n    ]\n}` : type === 'functions' ? `\n{\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"type\": \"function\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"isExported\": false,\n            \"isPrivate\": false,\n            \"isAsync\": false\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"name\": \"returnVal1\",\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ]\n}\n\n# Rules for Gathering Function Information\n\n- If the function is exported, set \"isExported\" to true\n- If the function is private, set \"isPrivate\" to true\n- If the function is async, set \"isAsync\" to true\n- If the function has parameters, add them to the \"functionParameters\" array\n- If the function returns a value, add it to the \"functionReturns\" object\n\nInclude ALL function declarations in the code snippet, even if they are not explicitly called in the code.\n\n` : type === 'variables' ? `\n{\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"type\": \"variable\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"isExported\": false,\n            \"isPrivate\": false\n        }\n    ]\n}` : type === 'types' ? `\n{\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"type\": \"type\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'interfaces' ? `\n{\n    \"interfaces\": [\n        {\n            \"name\": \"InterfaceName\",\n            \"type\": \"interface\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the interface\",\n            \"codeSnippet\": \"interface InterfaceName { ... }\",\n            \"codeLine\": 65,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` \n// : type === 'comments' ? `\n// {\n//     \"comments\": [\n//         {\n//             \"content\": \"This is a comment\",\n//             type: \"comment\",\n//             \"codeLine\": 50,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\"\n//         }\n//     ]\n// }` \n: type === 'imports' ? `\n{\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"type\": \"import\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\",\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'exports' ? `\n{\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"type\": \"export\", // DO NOT CHANGE THIS\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : ''\n}\n\n## Code Snippet for file: ${fileName}\n- File Path: ${filePath}\n${codeSnippet}\n`}\n\nexport const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');\n\nexport const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');\n\nexport const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');\n\nexport const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');\n\nexport const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');\n\n// export const commentsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'comments');\n\nexport const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');\n\nexport const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');\n\nexport const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}\n    \n    Please respond with JUST the language name. For example: JavaScript\n    `\n\n}"
        },
        {
            "metadata": {
                "filename": ".//src/objectSchemas.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [],
                    "variables": [],
                    "types": [
                        {
                            "name": "CodeObjectType",
                            "type": "type",
                            "description": "Represents the type of a code object, such as class, function, variable, etc.",
                            "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "type": "type",
                            "description": "Represents the different categories of code objects, such as classes, functions, variables, etc.",
                            "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjectTypes",
                            "type": "type",
                            "description": "Represents the properties of a code object, such as name, type, description, etc.",
                            "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                            "codeLine": 47,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        }
                    ],
                    "interfaces": [
                        {
                            "name": "ProjectSummary",
                            "type": "interface",
                            "description": "Represents a summary of a project including its name, description, location, code files, RAG data, and team context.",
                            "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "models",
                            "type": "interface",
                            "description": "Represents a model with a name and the model object itself.",
                            "codeSnippet": "export interface models { name: string, model: any, }",
                            "codeLine": 13,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "modelServiceConfig",
                            "type": "interface",
                            "description": "Configuration for model services including an array of models and an optional endpoint.",
                            "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                            "codeLine": 16,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "RagData",
                            "type": "interface",
                            "description": "Represents RAG (Retrieval-Augmented Generation) data including metadata, optional embeddings, and document data.",
                            "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                            "codeLine": 20,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "codeSummary",
                            "type": "interface",
                            "description": "Represents a summary of code including its goal and features/functions.",
                            "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                            "codeLine": 29,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeFileSummary",
                            "type": "interface",
                            "description": "Represents a summary of a code file including its name, location, code summary, language, execution flow, and code objects.",
                            "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                            "codeLine": 33,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "ExecutionFlow",
                            "type": "interface",
                            "description": "Represents the execution flow of a code file including step number, description, importance, code snippet, line number, indentation, file name, and location.",
                            "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                            "codeLine": 41,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "FunctionParameter",
                            "type": "interface",
                            "description": "Represents a parameter of a function including its name, type, description, and example.",
                            "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                            "codeLine": 49,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "FunctionReturn",
                            "type": "interface",
                            "description": "Represents the return value of a function including its type, description, and example.",
                            "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                            "codeLine": 54,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObject",
                            "type": "interface",
                            "description": "Represents a code object including its name, type, description, code snippet, line number, indentation, file name, location, and various properties related to its structure and usage.",
                            "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                            "codeLine": 59,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        }
                    ],
                    "imports": [],
                    "exports": [
                        {
                            "name": "CodeObjectType",
                            "type": "export",
                            "description": "Type alias for different kinds of code objects.",
                            "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "type": "export",
                            "description": "Type alias for different categories of code objects.",
                            "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "ProjectSummary",
                            "type": "export",
                            "description": "Interface representing a summary of a project.",
                            "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "models",
                            "type": "export",
                            "description": "Interface representing a model with a name and the model itself.",
                            "codeSnippet": "export interface models { name: string, model: any, }",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "modelServiceConfig",
                            "type": "export",
                            "description": "Interface representing the configuration for a model service.",
                            "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                            "codeLine": 14,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "RagData",
                            "type": "export",
                            "description": "Interface representing RAG (Retrieval-Augmented Generation) data.",
                            "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                            "codeLine": 18,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "codeSummary",
                            "type": "export",
                            "description": "Interface representing a summary of code.",
                            "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                            "codeLine": 26,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeFileSummary",
                            "type": "export",
                            "description": "Interface representing a summary of a code file.",
                            "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                            "codeLine": 29,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "ExecutionFlow",
                            "type": "export",
                            "description": "Interface representing the execution flow of code.",
                            "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                            "codeLine": 36,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "FunctionParameter",
                            "type": "export",
                            "description": "Interface representing a function parameter.",
                            "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                            "codeLine": 43,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "FunctionReturn",
                            "type": "export",
                            "description": "Interface representing a function return value.",
                            "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                            "codeLine": 48,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObject",
                            "type": "export",
                            "description": "Interface representing a code object.",
                            "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                            "codeLine": 53,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjectTypes",
                            "type": "export",
                            "description": "Type alias for different properties of a code object.",
                            "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                            "codeLine": 66,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        }
                    ]
                }
            },
            "documentData": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';\nexport type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation'\n\nexport interface ProjectSummary {\n    projectName: string;\n    projectDescription: codeSummary\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}\n\nexport interface models {\n    name: string,\n    model: any,\n}\nexport interface modelServiceConfig {\n    models: models[],\n    endpoint?:string \n}\n\nexport interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}\n\nexport interface codeSummary {\n    goal: string,\n    features_functions: string,\n  }\nexport interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: codeSummary;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject;\n}\n\nexport interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}\n\nexport interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    description: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    content?:string;\n    fileName: string;\n    fileLocation: string;\n    subObjects?: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}\n\nexport type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync'"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getModelBackend",
                            "type": "function",
                            "description": "Retrieves the backend type for a given model.",
                            "codeSnippet": "const getModelBackend = (selectedModel: string) => { ... }",
                            "codeLine": 79,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "selectedModel",
                                    "type": "string",
                                    "description": "The model for which the backend type is to be retrieved.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "backend",
                                "type": "llm_modes",
                                "description": "The backend type for the given model.",
                                "example": "OLLAMA"
                            }
                        },
                        {
                            "name": "validateJSON",
                            "type": "function",
                            "description": "Validates if a given string is a valid JSON.",
                            "codeSnippet": "function validateJSON(jsonString: string): boolean { ... }",
                            "codeLine": 160,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The JSON string to be validated.",
                                    "example": "{\"key\": \"value\"}"
                                }
                            ],
                            "functionReturns": {
                                "name": "isValid",
                                "type": "boolean",
                                "description": "True if the string is a valid JSON, otherwise false.",
                                "example": "true"
                            }
                        },
                        {
                            "name": "fixJSON",
                            "type": "function",
                            "description": "Attempts to repair a malformed JSON string.",
                            "codeSnippet": "function fixJSON(jsonString: string): string { ... }",
                            "codeLine": 168,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The malformed JSON string to be repaired.",
                                    "example": "{\"key\": \"value\""
                                }
                            ],
                            "functionReturns": {
                                "name": "repairedJSON",
                                "type": "string",
                                "description": "The repaired JSON string.",
                                "example": "{\"key\": \"value\"}"
                            }
                        },
                        {
                            "name": "parseYaml",
                            "type": "function",
                            "description": "Converts a YAML string into a JSON object.",
                            "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                            "codeLine": 176,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "yamlString",
                                    "type": "string",
                                    "description": "The YAML string to be converted.",
                                    "example": "key: value"
                                }
                            ],
                            "functionReturns": {
                                "name": "jsonObject",
                                "type": "any",
                                "description": "The resulting JSON object.",
                                "example": "{\"key\": \"value\"}"
                            }
                        },
                        {
                            "name": "parseText",
                            "type": "function",
                            "description": "Converts a text string into a JSON object with a specified key.",
                            "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                            "codeLine": 185,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "text",
                                    "type": "string",
                                    "description": "The text string to be converted.",
                                    "example": "This is a response."
                                },
                                {
                                    "name": "resKey",
                                    "type": "string",
                                    "description": "The key for the resulting JSON object.",
                                    "example": "response"
                                }
                            ],
                            "functionReturns": {
                                "name": "jsonObject",
                                "type": "any",
                                "description": "The resulting JSON object.",
                                "example": "{\"response\": \"This is a response.\"}"
                            }
                        },
                        {
                            "name": "wait",
                            "type": "function",
                            "description": "Pauses execution for a specified number of milliseconds.",
                            "codeSnippet": "async function wait(ms: number) { ... }",
                            "codeLine": 192,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "ms",
                                    "type": "number",
                                    "description": "The number of milliseconds to wait.",
                                    "example": 1000
                                }
                            ],
                            "functionReturns": {
                                "name": "promise",
                                "type": "Promise<void>",
                                "description": "A promise that resolves after the specified time.",
                                "example": "Promise<void>"
                            }
                        },
                        {
                            "name": "infer",
                            "type": "function",
                            "description": "Infers a response from a given prompt using a specified model.",
                            "codeSnippet": "export async function infer( ... ) { ... }",
                            "codeLine": 194,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "prompt",
                                    "type": "string",
                                    "description": "The prompt to be sent to the model.",
                                    "example": "What is the capital of France?"
                                },
                                {
                                    "name": "responseMode",
                                    "type": "\"JSON object\" | \"YAML object\" | \"TEXT STRING\"",
                                    "description": "The format of the response.",
                                    "example": "\"JSON object\""
                                },
                                {
                                    "name": "responseKey",
                                    "type": "string",
                                    "description": "The key for the response (only applicable for TEXT STRING responseMode).",
                                    "example": "response"
                                },
                                {
                                    "name": "bPro",
                                    "type": "boolean",
                                    "description": "Flag to use advanced model.",
                                    "example": false
                                },
                                {
                                    "name": "bRetry",
                                    "type": "boolean",
                                    "description": "Flag to retry on failure.",
                                    "example": true
                                },
                                {
                                    "name": "supplementalData",
                                    "type": "any",
                                    "description": "Additional data to be used in the inference.",
                                    "example": "{}"
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to be used for inference.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "response",
                                "type": "Promise<any>",
                                "description": "The response from the model.",
                                "example": "{\"response\": \"Paris\"}"
                            }
                        },
                        {
                            "name": "getCodeSummaryFromLLM",
                            "type": "function",
                            "description": "Gets a summary of the given code from the LLM.",
                            "codeSnippet": "export async function getCodeSummaryFromLLM( ... ) { ... }",
                            "codeLine": 431,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "codeToSummarize",
                                    "type": "string",
                                    "description": "The code to be summarized.",
                                    "example": "function example() { ... }"
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to be used for summarization.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "codeSummary",
                                "type": "Promise<codeSummary>",
                                "description": "The summary of the code.",
                                "example": "{\"goal\": \"Summarize code\", \"features_functions\": \"Summarizes code features\"}"
                            }
                        },
                        {
                            "name": "callLLM",
                            "type": "function",
                            "description": "Calls the LLM with a given prompt template and project context.",
                            "codeSnippet": "export async function callLLM( ... ) { ... }",
                            "codeLine": 451,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "promptTemplate",
                                    "type": "string",
                                    "description": "The template for the prompt.",
                                    "example": "Summarize the following code: <code snippet>"
                                },
                                {
                                    "name": "projectContext",
                                    "type": "ProjectSummary",
                                    "description": "The context of the project.",
                                    "example": "{\"teamContext\": \"Team info\"}"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be analyzed.",
                                    "example": "function example() { ... }"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path to the file containing the code.",
                                    "example": ".//src/llmInterface.ts"
                                },
                                {
                                    "name": "bRAG",
                                    "type": "boolean",
                                    "description": "Flag to use RAG (Retrieval-Augmented Generation).",
                                    "example": false
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to be used for the call.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "response",
                                "type": "Promise<any>",
                                "description": "The response from the LLM.",
                                "example": "{\"response\": \"Summary of code\"}"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "retries",
                            "type": "variable",
                            "description": "A counter to keep track of the number of retries for certain operations.",
                            "codeSnippet": "let retries = 0;",
                            "codeLine": 30,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "endpoints",
                            "type": "variable",
                            "description": "An object containing the endpoint URLs for different model services.",
                            "codeSnippet": "const endpoints = { OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\" };",
                            "codeLine": 33,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "systemPrompt",
                            "type": "variable",
                            "description": "A system prompt string used for initializing the AI model.",
                            "codeSnippet": "const systemPrompt = \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";",
                            "codeLine": 36,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "MODEL_MODES",
                            "type": "variable",
                            "description": "An array of objects representing different model modes and their configurations.",
                            "codeSnippet": "const MODEL_MODES = [ { name: \"qwen:32b-chat-v1.5-q4_0\", model: \"qwen:32b-chat-v1.5-q4_0\", backend: \"OLLAMA\" }, ... ];",
                            "codeLine": 39,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "secretSauce",
                            "type": "variable",
                            "description": "An object containing configuration settings for the AI model.",
                            "codeSnippet": "const secretSauce = { temperature: 0.3, top_p: 0.2 };",
                            "codeLine": 79,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "openai",
                            "type": "variable",
                            "description": "An instance of the OpenAI class initialized with organization and API key.",
                            "codeSnippet": "const openai = new OpenAI({ organization: process.env.OPENAI_ORG_ID, apiKey: process.env.OPENAI_API_KEY });",
                            "codeLine": 84,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ollama",
                            "type": "variable",
                            "description": "An instance of the Ollama class initialized with the host endpoint.",
                            "codeSnippet": "const ollama = new Ollama({ host: endpoints.OLLAMA });",
                            "codeLine": 89,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "contextLength",
                            "type": "variable",
                            "description": "A constant representing the context length for the AI model.",
                            "codeSnippet": "const contextLength = 16000;",
                            "codeLine": 90,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "project",
                            "type": "variable",
                            "description": "A constant representing the project name for Vertex AI.",
                            "codeSnippet": "const project = \"sweet-papa-technologies\";",
                            "codeLine": 93,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "location",
                            "type": "variable",
                            "description": "A constant representing the location for Vertex AI.",
                            "codeSnippet": "const location = \"us-central1\";",
                            "codeLine": 94,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "textModel",
                            "type": "variable",
                            "description": "A constant representing the text model for Vertex AI.",
                            "codeSnippet": "const textModel = \"gemini-1.5-flash-preview-0514\";",
                            "codeLine": 95,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "textModelAdvanced",
                            "type": "variable",
                            "description": "A constant representing the advanced text model for Vertex AI.",
                            "codeSnippet": "const textModelAdvanced = \"gemini-1.5-pro-preview-0514\";",
                            "codeLine": 96,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "vertexWAIT",
                            "type": "variable",
                            "description": "A constant representing the wait time for Vertex AI operations.",
                            "codeSnippet": "const vertexWAIT = 5000;",
                            "codeLine": 97,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "vertexAI",
                            "type": "variable",
                            "description": "An instance of the VertexAI class initialized with project and location.",
                            "codeSnippet": "const vertexAI = new VertexAI({ project: project, location: location });",
                            "codeLine": 99,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "safetySettings",
                            "type": "variable",
                            "description": "An array of objects representing safety settings for the AI model.",
                            "codeSnippet": "const safetySettings = [ { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE }, ... ];",
                            "codeLine": 101,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "generativeModel",
                            "type": "variable",
                            "description": "An instance of a generative model from Vertex AI with specific settings.",
                            "codeSnippet": "const generativeModel = vertexAI.getGenerativeModel({ model: textModel, safetySettings: safetySettings, \"generationConfig\": { temperature: secretSauce.temperature, topP: secretSauce.top_p } });",
                            "codeLine": 112,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "generateModelAdv",
                            "type": "variable",
                            "description": "An instance of an advanced generative model from Vertex AI with specific settings.",
                            "codeSnippet": "const generateModelAdv = vertexAI.getGenerativeModel({ model: textModelAdvanced, safetySettings: safetySettings, \"generationConfig\": { temperature: secretSauce.temperature, topP: secretSauce.top_p } });",
                            "codeLine": 118,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "llm_modes",
                            "type": "type",
                            "description": "Defines the possible modes for the language model backend.",
                            "codeSnippet": "type llm_modes = \"OLLAMA\" | \"VERTEX\" | \"OPENAI\";",
                            "codeLine": 86,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig",
                            "type": "import",
                            "description": "Imports various types and configurations from the objectSchemas module.",
                            "codeSnippet": "import { CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "searchRAG",
                            "type": "import",
                            "description": "Imports the searchRAG function from the vectorDB module.",
                            "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "yaml",
                            "type": "import",
                            "description": "Imports the yaml module from js-yaml.",
                            "codeSnippet": "import yaml from \"js-yaml\";",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "jsonrepair",
                            "type": "import",
                            "description": "Imports the jsonrepair function from the jsonrepair module.",
                            "codeSnippet": "import { jsonrepair } from \"jsonrepair\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "Ollama",
                            "type": "import",
                            "description": "Imports the Ollama class from the ollama module.",
                            "codeSnippet": "import { Ollama } from \"ollama\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "OpenAI",
                            "type": "import",
                            "description": "Imports the OpenAI class from the openai module.",
                            "codeSnippet": "import OpenAI from \"openai\";",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports and configures environment variables from a .env file.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 13,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI",
                            "type": "import",
                            "description": "Imports various types and classes from the @google-cloud/vertexai module.",
                            "codeSnippet": "import { FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI } from \"@google-cloud/vertexai\";",
                            "codeLine": 15,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "import",
                            "description": "Imports the getTokens function from the shared module.",
                            "codeSnippet": "import { getTokens } from \"./shared\";",
                            "codeLine": 20,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "parseYaml",
                            "type": "export",
                            "description": "Function to convert a YAML string into a JSON object.",
                            "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                            "codeLine": 133,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "parseText",
                            "type": "export",
                            "description": "Function to convert text into a JSON object with a specified key.",
                            "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                            "codeLine": 144,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "infer",
                            "type": "export",
                            "description": "Function to infer a response from a given prompt using different model backends.",
                            "codeSnippet": "export async function infer(prompt: string, responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\", responseKey?: string, bPro = false, bRetry = true, supplementalData?: any, model: string = textModel): Promise<any> { ... }",
                            "codeLine": 153,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "getCodeSummaryFromLLM",
                            "type": "export",
                            "description": "Function to get a summary of a code block from a language model.",
                            "codeSnippet": "export async function getCodeSummaryFromLLM(codeToSummarize: string, model: string = textModel): Promise<codeSummary> { ... }",
                            "codeLine": 383,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "callLLM",
                            "type": "export",
                            "description": "Function to call a language model with a given prompt template and project context.",
                            "codeSnippet": "export async function callLLM(promptTemplate: string, projectContext: ProjectSummary, code: string, filePath: string, bRAG = false, model: string = textModel): Promise<any> { ... }",
                            "codeLine": 398,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ]
                }
            },
            "documentData": "import {\n  CodeObject,\n  CodeObjectType,\n  CodeObjects,\n  ProjectSummary,\n  codeSummary,\n  modelServiceConfig,\n} from \"./objectSchemas\"; // Adjust path as needed\nimport { searchRAG } from \"./vectorDB\";\nimport yaml from \"js-yaml\";\nimport { jsonrepair } from \"jsonrepair\";\nimport { Ollama } from \"ollama\";\nimport OpenAI from \"openai\";\n\n\nimport \"dotenv/config\";\n\nimport {\n  FunctionDeclarationSchemaType,\n  HarmBlockThreshold,\n  HarmCategory,\n  VertexAI,\n} from \"@google-cloud/vertexai\";\nimport { getTokens } from \"./shared\";\n\nlet retries = 0;\n\n// Model Service Modes:\nconst endpoints = {\n  OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\",\n};\nconst systemPrompt =\n  \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";\n\nconst MODEL_MODES = [\n  {\n    name: \"qwen:32b-chat-v1.5-q4_0\",\n    model: \"qwen:32b-chat-v1.5-q4_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"codeqwen:7b-code-v1.5-q8_0\",\n    model: \"codeqwen:7b-code-v1.5-q8_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"llama3-chatqa:8b-v1.5-fp16\",\n    model: \"llama3-chatqa:8b-v1.5-fp16\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"qwen:32b-text-v1.5-q4_0\",\n    model: \"qwen:32b-text-v1.5-q4_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"gpt-4o\",\n    model: \"gpt-4o\",\n    backend: \"OPENAI\"\n  },\n  {\n    name: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    model: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    model: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"phi3\",\n    model: \"phi3\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"dolphin-llama3:8b-v2.9-fp16\",\n    model: \"dolphin-llama3:8b-v2.9-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"codechat-bison\",\n    model: \"codechat-bison\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"codechat-bison-32k\",\n    model: \"codechat-bison-32k\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-flash-preview-0514\",\n    model: \"gemini-1.5-flash-preview-0514\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-pro-preview-0514\",\n    model: \"gemini-1.5-pro-preview-0514\",\n    backend: \"VERTEX\",\n  },\n];\n\nconst getModelBackend = (selectedModel: string) => {\n  const model = MODEL_MODES.find((m) => m.model === selectedModel);\n  if (model) {\n    return model.backend as llm_modes;\n  }\n  throw new Error(\"Model not found\");\n};\n\ntype llm_modes = \"OLLAMA\" | \"VERTEX\" | \"OPENAI\";\n\n// Set the values to undefined if you want to use the default values\nconst secretSauce = {\n  temperature: 0.3, // 0.2 works well for big LLM\n  top_p: 0.2, // 0.9 works well for big LLM\n}\n// OpenAI Settings\nconst openai = new OpenAI({\n  organization: process.env.OPENAI_ORG_ID,\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// OLLAMA Settings\nconst ollama = new Ollama({ host: endpoints.OLLAMA })\nconst contextLength = 16000; // 8000 Works Really Well with 24GB GPU - RTX 4090\n\n// Vertex Settings:\nconst project = \"sweet-papa-technologies\";\nconst location = \"us-central1\";\nconst textModel = \"gemini-1.5-flash-preview-0514\";\nconst textModelAdvanced = \"gemini-1.5-pro-preview-0514\t\";\nconst vertexWAIT = 5000;\n\nconst vertexAI = new VertexAI({ project: project, location: location });\n\nconst safetySettings = [\n  {\n    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_UNSPECIFIED,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n];\n\nconst generativeModel = vertexAI.getGenerativeModel({\n  model: textModel,\n  safetySettings: safetySettings,\n  \"generationConfig\": {\n    temperature: secretSauce.temperature,\n    topP: secretSauce.top_p\n  }\n});\n\nconst generateModelAdv = vertexAI.getGenerativeModel({\n  model: textModelAdvanced,\n  safetySettings: safetySettings,\n  \"generationConfig\": {\n    temperature: secretSauce.temperature,\n    topP: secretSauce.top_p\n  }\n});\n\n// General Functions\nfunction validateJSON(jsonString: string): boolean {\n  try {\n    JSON.parse(jsonString);\n    return true;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nfunction fixJSON(jsonString: string): string {\n  try {\n    return jsonrepair(jsonString);\n  } catch (e) {\n    throw new Error(\"Unable to fix JSON\");\n  }\n}\n\nexport function parseYaml(yamlString: string): any {\n  // Convert YAML file into a proper JSON object\n  try {\n    const obj = yaml.load(yamlString) as any;\n    return obj as any;\n  } catch (e: any) {\n    console.log(e);\n    throw new Error(\"Invalid YAML object\");\n  }\n}\n\nexport function parseText(text: string, resKey = \"response\"): any {\n  // Convert text into a proper JSON object\n  const obj = {} as any;\n  obj[resKey] = text;\n  return obj;\n}\n\nasync function wait(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function infer(\n  prompt: string,\n  responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",\n  responseKey?: string,\n  bPro = false,\n  bRetry = true,\n  supplementalData?: any,\n  model: string = textModel\n): Promise<any> {\n  const modelBackend:llm_modes = getModelBackend(model);\n\n  console.log(\"====> Model Backend:\", modelBackend);\n\n  if (modelBackend === \"VERTEX\") {\n    if (model !== textModel && model !== textModelAdvanced) {\n      console.log(\"Waiting 1 second...\");\n      await wait(1000);\n    } else {\n      console.log(\"Waiting 5 seconds...\");\n      await wait(vertexWAIT);\n    }\n  }\n\n  const promptResponseInstructions = `Please respond with a ${responseMode} containing your answer. ${\n    responseMode !== \"TEXT STRING\"\n      ? `Please properly format and escape your output, as I will need to parse your response.`\n      : \"\"\n  }${\n    responseKey ? `The key for the response should be ${responseKey}.` : \"\"\n  }\\n\\n`;\n\n  if (responseMode !== \"TEXT STRING\" && responseKey) {\n    console.warn(\n      \"responseKey is only applicable for TEXT STRING responseMode. Ignoring responseKey.\"\n    );\n  }\n\n  prompt = prompt.trim();\n  prompt = promptResponseInstructions + prompt;\n\n  const promptCharLen = prompt.length;\n  const promptLen = getTokens(prompt);\n\n  console.log(`Prompt: ${promptCharLen} Characters`);\n  console.log(`Prompt: ${promptLen} Tokens`);\n\n  let promptNew = prompt;\n\n  if (responseMode === \"JSON object\") {\n    promptNew = `\n    In your response, PLEASE BE SURE TO FORMAT YOUR RESPONSE AS A PARSE-ABLE JSON OBJECT.\n    This means that your response keys and values should be properly formatted and escaped.\n\n    ${prompt}\n    `;\n  }\n\n  let response = \"\";\n\n  const startTime = Date.now();\n\n  // BASED on the model passed, we will call the appropriate endpoints, etc:\n\n  if (modelBackend === \"OLLAMA\") {\n    //\n\n    // const contextLength = promptLen > 1000 ? 32000 : 4096;\n\n    const ollamaResponse = await ollama.generate({\n      model: model,\n      prompt: promptNew,\n      stream: false,\n      system: systemPrompt,\n      keep_alive: 9000,\n      options: {\n        ...secretSauce,\n        num_ctx: contextLength,\n      },\n    });\n    console.log(ollamaResponse.response.length);\n    response = ollamaResponse.response;\n  } else if (modelBackend === \"VERTEX\") {\n    //\n    const request = {\n      contents: [{ role: \"user\", parts: [{ text: promptNew }] }],\n    };\n\n    let genFunction = generativeModel;\n    if (bPro === true) {\n      genFunction = generateModelAdv;\n    }\n\n    const result = await genFunction.generateContent(request);\n\n    try {\n      response = result.response.candidates?.[0].content?.parts[0].text || \"\";\n    } catch (error: any) {\n      console.error(\"Error parsing response from Gemini:\", error);\n      console.debug(\"Prompt to Gemini:\", promptNew);\n\n      if (typeof result === \"string\") {\n        console.log(\n          \"Response from Gemini:\",\n          \"Response is a string, but not a valid JSON object\"\n        );\n        console.log(result);\n      } else {\n        console.log(\n          \"Response from Gemini - String-y-fied:\",\n          JSON.stringify(result)\n        );\n      }\n\n      if (bRetry == true || retries < 3) {\n        retries += 1;\n        console.log(\"Retrying since there was an error\");\n        return await infer(\n          promptNew,\n          responseMode,\n          responseKey,\n          bPro,\n          false,\n          supplementalData,\n          model\n        );\n      }\n    }\n  } else if (modelBackend === \"OPENAI\") {\n    const completion = await openai.chat.completions.create({\n      ...secretSauce,\n      messages: [{ role: \"system\", content: systemPrompt },\n      { role: \"user\", content: promptNew}\n      ],\n      model: model,\n    });\n  \n    console.log(completion.choices[0]);\n    response = completion.choices[0].message.content || \"\";\n\n    if (response === \"\") {\n      console.error(\"Empty response from OpenAI\");\n      console.error(completion);\n    }\n  }\n  else {\n    console.error(\"Unknown Model Backend\");\n  }\n\n  const endTime = Date.now();\n  const totalTime = endTime - startTime;\n\n  // PRint the total time in seconds, truncated to 2 decimal places\n  console.log(`Total Time: ${totalTime / 1000}s`);\n\n  if (typeof response !== \"string\") {\n    throw new Error(\"Invalid response from LLM\");\n  }\n\n  if (responseMode === \"JSON object\") {\n    response = response.replace(\"```json\", \"\").replace(\"```\", \"\").trim();\n\n    let bFixed = false;\n    if (validateJSON(response) === true) {\n      console.log(\"Valid JSON:\");\n    } else {\n      console.error(\"Invalid JSON, attempting to fix:\");\n      try {\n        const fixedJson = fixJSON(response);\n        console.log(\"Fixed JSON:\", fixedJson);\n        response = fixedJson;\n        bFixed = true;\n      } catch (error: any) {\n        console.error(\"Error fixing JSON:\", error.message);\n\n        if (bRetry == true || retries < 3) {\n          retries += 1;\n          console.log(\n            \"Retrying since JSON output was not correct, here is what we got:\"\n          );\n\n          console.log(`\\n\\nBAD JSON\\n${response}\\n\\n`);\n\n          return await infer(\n            promptNew,\n            responseMode,\n            responseKey,\n            bPro,\n            false,\n            supplementalData,\n            model\n          );\n        }\n\n        console.warn(\"Returning error message as JSON -- Please Try Again\");\n        return { error: error, original: response } as any;\n      }\n    }\n\n    try {\n      const res = JSON.parse(response);\n\n      if (bFixed == true) {\n        console.debug(\"JSON was fixed! Checking that everything else is OK now.\");\n\n        // Check if Object malformed into an Array some how...\n        if (Array.isArray(res) === true && res.length >= 1) {\n          console.log(\"This looks like a fixed JSON object!\");\n          // if (\"classes\" in res[0] === false) {\n          //   console.warn(\"This object does not look correct!\");\n          //   console.warn(res);\n          // }\n\n          const newData = res[0];\n\n          // We should check that the fixed JSON object has the same amount of keys as our interface for the object:\n          const keys = Object.keys(newData);\n\n          const expectedKeys: CodeObjects[] = [\n            \"classes\",\n            \"functions\",\n            \"variables\",\n            \"types\",\n            \"interfaces\",\n            // \"comments\",\n            \"imports\",\n            \"exports\"\n          ];\n\n          if (keys.length < expectedKeys.length) {\n            console.warn(\n              \"This object does not look correct! Attempting to fix:\"\n            );\n\n            const fixedData = {} as any;\n            for (const key of expectedKeys) {\n              if (key in newData) {\n                fixedData[key] = newData[key];\n              } else {\n                if (key === \"fileName\") {\n                  fixedData[key] = supplementalData.fileName || \"unknown\";\n                }\n                if (key === \"fileLocation\") {\n                  fixedData[key] = supplementalData.fileLocation || \"unknown\";\n                }\n                if (key !== \"fileName\" && key !== \"fileLocation\") {\n                  fixedData[key] = [];\n                }\n              }\n            }\n          }\n\n          console.log(\"JSON should be fixed now...\");\n\n          return res[0];\n        } else if (Array.isArray(res) === true) {\n          console.log(\"This looks like a fixed JSON object, but it is empty!\");\n          console.warn(res);\n        }\n      }\n\n      return res;\n    } catch (e: any) {\n      console.error(\"Error parsing JSON:\", e);\n      console.warn(\"Returning error message as JSON -- Please Try Again\");\n      return { error: e, original: response } as any;\n    }\n\n  } else if (responseMode === \"YAML object\") {\n    response = response.replace(\"```yaml\", \"\").replace(\"```\", \"\").trim();\n    const res = parseYaml(response);\n    return res;\n  } else {\n    return parseText(response, responseKey);\n  }\n}\n\nexport async function getCodeSummaryFromLLM(\n  codeToSummarize: string,\n  model: string = textModel\n): Promise<codeSummary> {\n  const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \n  Please respond with a JSON object as follows:\n  {\n    \"goal\": \"String summarizing what the code is about, and the goal\",\n    \"features_functions\": \"String describing any relevant features\",\n  }\n\n  ### Code To Sumnarize:\n  ${codeToSummarize}\n  `\n  const codeSummary = await infer(\n    question,\n    \"JSON object\",\n    undefined,\n    false,\n    undefined,\n    undefined,\n    model\n  );\n  return codeSummary;\n}\n\nexport async function callLLM(\n  promptTemplate: string,\n  projectContext: ProjectSummary,\n  code: string,\n  filePath: string,\n  bRAG = false,\n  model: string = textModel\n): Promise<any> {\n  if (bRAG === true) {\n    // Take 400 characters of relevant code\n    // const relevantCode = await searchRAG(projectContext.projectName, code); // Placeholder, implement searchRAG function\n    // const r =\n    //   relevantCode.documentData.length > 400\n    //     ? relevantCode.documentData.substring(0, 400)\n    //     : relevantCode.documentData;\n    // promptTemplate = promptTemplate.replace(\"<relevant code>\", r); // Not implemented yet, placeholder for RAG\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");\n  } else {\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");\n  }\n\n  // 1. Prepare Prompt\n  const prompt = promptTemplate\n    .replace(\"<supplemental context>\", projectContext.teamContext) // Add team context\n    .replace(\"<code snippet>\", code)\n    .replace(\"<file path>\", filePath);\n\n  const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";\n  const fileName = getFileNameFromPath(filePath);\n\n  // 2. Call AI API\n  const response = await infer(\n    prompt,\n    \"JSON object\",\n    undefined,\n    true,\n    true,\n    {\n      fileLocation: filePath,\n      fileName: fileName,\n    },\n    model\n  ).catch((error) => {\n    console.error(\"Error calling API:\", error);\n    return { error: error };\n  });\n\n  // IF too many request or rate limit has been hit, we wait 30 seconds and try again\n  if (response.error && response.error.code === 429) {\n    console.log(\"Rate Limit Hit, waiting 30 seconds...\");\n    await wait(30000);\n    return await callLLM(\n      promptTemplate,\n      projectContext,\n      code,\n      filePath,\n      bRAG,\n      model\n    );\n  }\n\n  // 3. Parse and Validate Response\n  let codeObjects: any = response;\n\n  // 4. Enhance with filePath\n  if (!codeObjects.fileName) codeObjects.fileName = fileName;\n\n  if (!codeObjects.fileLocation) codeObjects.fileLocation = filePath;\n\n  return codeObjects;\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/index.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "program.action",
                            "type": "function",
                            "description": "Defines the action to be taken when the command is executed. It generates documentation for the specified project.",
                            "codeSnippet": ".action(async (projectName, options) => { ... })",
                            "codeLine": 17,
                            "codeIndent": 2,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project for which documentation is to be generated",
                                    "example": "myProject"
                                },
                                {
                                    "name": "options",
                                    "type": "object",
                                    "description": "Options for generating documentation, including input path, output path, test mode, and JSON file path",
                                    "example": {
                                        "input": ".",
                                        "output": "./output",
                                        "test": "false",
                                        "generateFromFile": "path/to/json"
                                    }
                                }
                            ],
                            "functionReturns": {
                                "name": "void",
                                "type": "void",
                                "description": "This function does not return a value",
                                "example": null
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "program",
                            "type": "variable",
                            "description": "An instance of the Command class from the commander library, used to define and manage the command-line interface.",
                            "codeSnippet": "const program = new Command();",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "bTestMode",
                            "type": "variable",
                            "description": "A boolean indicating whether the program is running in test mode, derived from the command-line options.",
                            "codeSnippet": "const bTestMode = options.test;",
                            "codeLine": 22,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "projectPath",
                            "type": "variable",
                            "description": "The path to the codebase, derived from the command-line options.",
                            "codeSnippet": "const projectPath = options.input;",
                            "codeLine": 23,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "outputDir",
                            "type": "variable",
                            "description": "The path to the output directory for the generated documentation, derived from the command-line options.",
                            "codeSnippet": "const outputDir = options.output;",
                            "codeLine": 24,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "jsonFile",
                            "type": "variable",
                            "description": "The path to the JSON file used for generating documentation, derived from the command-line options.",
                            "codeSnippet": "const jsonFile = options.generateFromFile;",
                            "codeLine": 25,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "startTime",
                            "type": "variable",
                            "description": "The timestamp marking the start of the codebase parsing process.",
                            "codeSnippet": "const startTime = Date.now();",
                            "codeLine": 52,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "parsedCodebase",
                            "type": "variable",
                            "description": "The result of parsing the codebase, containing the parsed data.",
                            "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                            "codeLine": 54,
                            "codeIndent": 6,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "endTime",
                            "type": "variable",
                            "description": "The timestamp marking the end of the documentation generation process.",
                            "codeSnippet": "const endTime = Date.now();",
                            "codeLine": 70,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "totalTime",
                            "type": "variable",
                            "description": "The total time taken for the documentation generation process, calculated as the difference between endTime and startTime.",
                            "codeSnippet": "const totalTime = endTime - startTime;",
                            "codeLine": 71,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "Command",
                            "type": "import",
                            "description": "Importing the Command class from the 'commander' module.",
                            "codeSnippet": "import { Command } from \"commander\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        },
                        {
                            "name": "parseCodebase",
                            "type": "import",
                            "description": "Importing the parseCodebase function from the local module './codeParser'.",
                            "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        },
                        {
                            "name": "generateDocumentation",
                            "type": "import",
                            "description": "Importing the generateDocumentation function from the local module './documentationGenerator'.",
                            "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Importing the 'fs' module for file system operations.",
                            "codeSnippet": "import fs from \"fs\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        }
                    ],
                    "exports": []
                }
            },
            "documentData": "import { Command } from \"commander\";\nimport { parseCodebase } from \"./codeParser\";\nimport { generateDocumentation } from \"./documentationGenerator\";\nimport fs from \"fs\";\n\nconst program = new Command();\n\nprogram\n  .name(\"fofodocs\")\n  .description(\"Generate documentation for your codebase using FoFo Docs\")\n  .version(\"1.0.0\")\n  .argument(\"<project_name>\", \"Name of your project\")\n  .option(\n    \"-i, --input <path>\",\n    \"Path to your codebase (default: current directory)\",\n    \".\"\n  )\n  .option(\n    \"-o, --output <path>\",\n    \"Path to output documentation (default: ./output)\",\n    \"./output\"\n  )\n  .option(\"-t, --test <bool>\", \"Run in Test Mode\", \"false\")\n  .option(\"-g, --generateFromFile <path>\", \"Generate MD documentation from JSON file\")\n  .action(async (projectName, options) => {\n    console.log(\n      `FoFo Docs is generating documentation for project: ${projectName}`\n    );\n\n    const bTestMode = options.test;\n    const projectPath = options.input;\n    const outputDir = options.output;\n    const jsonFile = options.generateFromFile;\n\n    // Generate documentation from JSON file ONLY if flag is set\n    if (jsonFile) {\n      console.log(\"Generating documentation from JSON file:\", jsonFile);\n\n      // Check if JSON file exists\n      if (!fs.existsSync(jsonFile)) {\n        console.error(\"JSON file does not exist!\");\n        return;\n      }\n\n      // Check if output directory exists, if not create it\n      if (!fs.existsSync(outputDir)) {\n        try {\n          fs.mkdirSync(outputDir, {\n            recursive: true,\n          });\n        } catch (err) {\n          console.error(err);\n          throw new Error(\"Error creating output directory\");\n        }\n      }\n\n      // Generate documentation\n      \n      try {\n        const bGenerated = await generateDocumentation(outputDir, null, jsonFile);\n        if (!bGenerated) {\n          console.error(\"Documentation generation failed!\");\n          return;\n        }\n      } catch (error) {\n        console.error(\"Error during documentation generation:\", error);\n        if (!bTestMode) {\n          process.exit(1);\n        }\n        return;\n      }\n      console.log(\"Documentation generation complete!\");\n      return;\n    }\n\n    // 1. Parse Codebase\n    const startTime = Date.now();\n    try {\n      const parsedCodebase = await parseCodebase(projectPath, projectName);\n      parsedCodebase.projectName = projectName;\n\n      // 2. Generate Documentation\n      const bGenerated = await generateDocumentation(\n        outputDir,\n        parsedCodebase        \n      );\n\n      if (!bGenerated) {\n        console.error(\"Documentation generation failed!\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error during documentation generation:\", error);\n      if (!bTestMode) {\n        process.exit(1);\n      }\n      return;\n    }\n\n    console.log(\"Documentation generation complete!\");\n    const endTime = Date.now();\n    const totalTime = endTime - startTime;\n    console.log(`Total Time: ${totalTime / 1000}s`);\n    \n  });\n\nprogram.parse();\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "jsonToMarkdown",
                            "type": "function",
                            "description": "Converts a project summary to markdown format and writes it to the specified output folder.",
                            "codeSnippet": "function jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) { ... }",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "projectSummary",
                                    "type": "ProjectSummary",
                                    "description": "The summary of the project to be converted to markdown.",
                                    "example": "{ projectName: 'Example', projectDescription: { goal: 'Example goal', features_functions: 'Example features' }, teamContext: 'Example team context', codeFiles: [] }"
                                },
                                {
                                    "name": "outputFolder",
                                    "type": "string",
                                    "description": "The folder where the markdown files will be written.",
                                    "example": "/path/to/output/folder"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "void",
                                "description": "This function does not return a value.",
                                "example": "N/A"
                            }
                        },
                        {
                            "name": "generateCodeObjectContent",
                            "type": "function",
                            "description": "Generates the content for a code object in markdown format.",
                            "codeSnippet": "function generateCodeObjectContent(codeObject: CodeObject, indent: number): string { ... }",
                            "codeLine": 156,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "codeObject",
                                    "type": "CodeObject",
                                    "description": "The code object to generate content for.",
                                    "example": "{ name: 'Example', type: 'function', description: 'Example description', codeSnippet: 'function example() {}', codeLine: 1, codeIndent: 0, fileName: 'example.ts', fileLocation: '/path/to/example.ts', isExported: false, isPrivate: false, isAsync: false }"
                                },
                                {
                                    "name": "indent",
                                    "type": "number",
                                    "description": "The indentation level for the generated content.",
                                    "example": 0
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated markdown content for the code object.",
                                "example": "### Example - [FUNCTION] ... "
                            }
                        },
                        {
                            "name": "getEmoji",
                            "type": "function",
                            "description": "Returns an emoji based on the type of code object.",
                            "codeSnippet": "function getEmoji(type: string): string { ... }",
                            "codeLine": 202,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "type",
                                    "type": "string",
                                    "description": "The type of code object.",
                                    "example": "functions"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The emoji corresponding to the code object type.",
                                "example": "🔧"
                            }
                        },
                        {
                            "name": "generateDocumentation",
                            "type": "function",
                            "description": "Generates documentation for a project and writes it to the specified folder.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                            "codeLine": 222,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "folderPath",
                                    "type": "string",
                                    "description": "The path to the folder where the documentation will be written.",
                                    "example": "/path/to/folder"
                                },
                                {
                                    "name": "projectContext",
                                    "type": "ProjectSummary | null",
                                    "description": "The context of the project to generate documentation for. If null, it will be read from the jsonFile.",
                                    "example": "{ projectName: 'Example', projectDescription: { goal: 'Example goal', features_functions: 'Example features' }, teamContext: 'Example team context', codeFiles: [] }"
                                },
                                {
                                    "name": "jsonFile",
                                    "type": "string",
                                    "description": "The path to the JSON file containing the project context. If not provided, a new file will be created.",
                                    "example": "/path/to/jsonFile.json"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "boolean",
                                "description": "Returns true if the documentation was successfully generated, otherwise false.",
                                "example": true
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "backupDirectory",
                            "type": "variable",
                            "description": "Path to the backup directory where files will be stored if the main directory is not accessible.",
                            "codeSnippet": "const backupDirectory = path.join(__dirname, 'backup');",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "toc",
                            "type": "variable",
                            "description": "Array to store the table of contents for the markdown documentation.",
                            "codeSnippet": "const toc: string[] = [];",
                            "codeLine": 14,
                            "codeIndent": 1,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "sectionContent",
                            "type": "variable",
                            "description": "Object to store different sections of the documentation content.",
                            "codeSnippet": "const sectionContent = { classes: '', functions: '', variables: '', types: '', comments: '', imports: '', exports: '', interfaces: '' };",
                            "codeLine": 35,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "duplicateTracking",
                            "type": "variable",
                            "description": "Object to track duplicate code objects to avoid redundancy in the documentation.",
                            "codeSnippet": "const duplicateTracking: dupTrack = { classes: [], functions: [], variables: [], types: [], comments: [], imports: [], exports: [], interfaces: [] };",
                            "codeLine": 48,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileContent",
                            "type": "variable",
                            "description": "String to store the content of the markdown file for each code file.",
                            "codeSnippet": "let fileContent = `# ${file.fileName} - ${projectSummary.projectName}\n`;",
                            "codeLine": 23,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "sectionLinks",
                            "type": "variable",
                            "description": "Array to store links to different sections in the table of contents.",
                            "codeSnippet": "const sectionLinks: string[] = [];",
                            "codeLine": 34,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "dupObj",
                            "type": "type",
                            "description": "Defines the structure for tracking duplicate objects with optional name and content properties, and a mandatory type property.",
                            "codeSnippet": "interface dupObj {\n    name?: string;\n    content?: string;\n    type: CodeObjectType;\n}",
                            "codeLine": 48,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "dupTrack",
                            "type": "type",
                            "description": "Defines the structure for tracking duplicates of various code object types including classes, functions, variables, types, comments, imports, exports, and interfaces.",
                            "codeSnippet": "interface dupTrack {\n    classes: dupObj[];\n    functions: dupObj[];\n    variables: dupObj[];\n    types: dupObj[];\n    comments: dupObj[];\n    imports: dupObj[];\n    exports: dupObj[];\n    interfaces: dupObj[];\n}",
                            "codeLine": 54,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "interfaces": [
                        {
                            "name": "dupObj",
                            "type": "interface",
                            "description": "Interface for tracking duplicate objects with optional name and content properties, and a required type property.",
                            "codeSnippet": "interface dupObj {\n    name?: string;\n    content?: string;\n    type: CodeObjectType;\n}",
                            "codeLine": 47,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "dupTrack",
                            "type": "interface",
                            "description": "Interface for tracking duplicates of various code object types, including classes, functions, variables, types, comments, imports, exports, and interfaces.",
                            "codeSnippet": "interface dupTrack {\n    classes: dupObj[];\n    functions: dupObj[];\n    variables: dupObj[];\n    types: dupObj[];\n    comments: dupObj[];\n    imports: dupObj[];\n    exports: dupObj[];\n    interfaces: dupObj[];\n}",
                            "codeLine": 53,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "imports": [
                        {
                            "name": "CodeObject, ProjectSummary, CodeObjectType",
                            "type": "import",
                            "description": "Imports CodeObject, ProjectSummary, and CodeObjectType from the local module './objectSchemas'. These are likely types or interfaces used in the code.",
                            "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Imports the 'fs' module from Node.js, which provides an API for interacting with the file system.",
                            "codeSnippet": "import fs from 'fs';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "path",
                            "type": "import",
                            "description": "Imports the 'path' module from Node.js, which provides utilities for working with file and directory paths.",
                            "codeSnippet": "import path from 'path';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports and configures the 'dotenv' module, which loads environment variables from a .env file into process.env.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "generateDocumentation",
                            "type": "export",
                            "description": "Asynchronously generates documentation for a given project context and saves it to the specified folder path. If the folder path is not writable, it attempts to use a backup directory.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                            "codeLine": 268,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ]
                }
            },
            "documentData": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";\nimport fs from 'fs';\nimport path from 'path';\nimport \"dotenv/config\";\n\nconst backupDirectory = path.join(__dirname, 'backup');\n\nfunction jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const projectFolder = path.join(outputFolder, `${projectSummary.projectName}-${timestamp}`);\n    fs.mkdirSync(projectFolder, { recursive: true });\n\n    const toc: string[] = [];\n    \n    toc.push(`# Project | ${projectSummary.projectName}`);\n    toc.push(`\\n## Project Description\\n${projectSummary.projectDescription.goal}`);\n    toc.push(`\\n## Features and Functions\\n${projectSummary.projectDescription.features_functions}`);\n    toc.push(`\\n## Team Context\\n${projectSummary.teamContext}`);\n    toc.push(`\\n## Table of Contents\\n`);\n\n    // Process Code Files\n    projectSummary.codeFiles.forEach(file => {\n        const fileName = `${file.fileName}.md`;\n        const filePath = path.join(projectFolder, fileName);\n        toc.push(`\\n- [${file.fileName}](./${fileName})`);\n\n        let fileContent = `# ${file.fileName} - ${projectSummary.projectName}\\n`;\n        fileContent += `\\n**Summary:** ${file.codeSummary.goal}\\n`;\n        fileContent += `\\n- **File Location:** ${file.fileLocation}`;\n        fileContent += `\\n- **Language:** ${file.language}`;\n        fileContent += `\\n## Table of Contents\\n`;\n\n        const sectionLinks: string[] = [];\n\n        const sectionContent = {\n            classes: '',\n            functions: '',\n            variables: '',\n            types: '',\n            comments: '',\n            imports: '',\n            exports: '',\n            interfaces: ''\n        };\n\n        interface dupObj {\n            name?: string;\n            content?: string;\n            type: CodeObjectType;\n        }\n\n        interface dupTrack {\n            classes: dupObj[];\n            functions: dupObj[];\n            variables: dupObj[];\n            types: dupObj[];\n            comments: dupObj[];\n            imports: dupObj[];\n            exports: dupObj[];\n            interfaces: dupObj[];\n        }\n\n        const duplicateTracking: dupTrack = {\n            classes: [],\n            functions: [],\n            variables: [],\n            types: [],\n            comments: [],\n            imports: [],\n            exports: [],\n            interfaces: []\n        };\n\n        const duplicateCheck = (obj: CodeObject, type: CodeObjectType): boolean => {\n            const objName = obj.name;\n            const objContent = obj.codeSnippet;\n            const objType = obj.type;\n\n            if ((objName || objContent) && objType) {\n                const dupObj = {\n                    name: objName,\n                    content: objContent,\n                    type: objType\n                };\n\n                // Check to see if the object already exists in the duplicate tracking\n                let bFound = false;\n                for (const [section, content] of Object.entries(duplicateTracking)) {\n                    const contentObj = content as dupObj[];\n\n                    // If the same name and the same type, we will go ahead and omit it\n                    const found = contentObj.find((item) => (item.name === objName || item.content === objContent) && item.type === objType);\n\n                    if (typeof found !== 'undefined') {\n                        bFound = true;\n                        break;\n                    }\n                }\n\n                if (bFound === true) {\n                    return true;\n                }\n\n                switch (type) {\n                    case 'class':\n                        duplicateTracking.classes.push(dupObj);\n                        break;\n                    case 'function':\n                        duplicateTracking.functions.push(dupObj);\n                        break;\n                    case 'variable':\n                        duplicateTracking.variables.push(dupObj);\n                        break;\n                    case 'type':\n                        duplicateTracking.types.push(dupObj);\n                        break;\n                    // case 'comment':\n                    //     duplicateTracking.comments.push(dupObj);\n                    //     break;\n                    case 'import':\n                        duplicateTracking.imports.push(dupObj);\n                        break;\n                    case 'export':\n                        duplicateTracking.exports.push(dupObj);\n                        break;\n                    case 'interface':\n                        duplicateTracking.interfaces.push(dupObj);\n                        break;\n                    default:\n                        break;\n                }\n\n                return false;\n            }\n\n            return false;\n        };\n\n        Object.keys(file.codeObjects).forEach(key => {\n            const baseObject = file.codeObjects as any;\n            const obj = baseObject[key] as any[];\n            obj.forEach((codeObject: CodeObject) => {\n\n                if (duplicateCheck(codeObject, codeObject.type) === true) {\n                    console.warn(`Duplicate object found: ${codeObject.name}`);\n                    return;\n                }\n\n                const content = generateCodeObjectContent(codeObject, 0);\n                switch (codeObject.type) {\n                    case 'class':\n                        sectionContent.classes += content;\n                        break;\n                    case 'function':\n                        sectionContent.functions += content;\n                        break;\n                    case 'variable':\n                        sectionContent.variables += content;\n                        break;\n                    case 'type':\n                        sectionContent.types += content;\n                        break;\n                    // case 'comment':\n                    //     sectionContent.comments += content;\n                    //     break;\n                    case 'import':\n                        sectionContent.imports += content;\n                        break;\n                    case 'export':\n                        sectionContent.exports += content;\n                        break;\n                    case 'interface':\n                        sectionContent.interfaces += content;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n\n        for (const [section, content] of Object.entries(sectionContent)) {\n            if (content) {\n                const emoji = getEmoji(section);\n                const sectionString = `${section}`\n                const sectionTitle = `## ${sectionString}\\n${emoji} **${sectionString.toUpperCase()}**`;\n                fileContent += `${sectionTitle}\\n${content}\\n`;\n                sectionLinks.push(`- [${sectionString}](#${sectionString})`);\n            }\n        }\n\n        fileContent = fileContent.replace('## Table of Contents\\n', `## Table of Contents\\n${sectionLinks.join('\\n')}\\n`);\n\n        // Make sure the folder path for the file exists\n        const fileFolder = path.dirname(filePath);\n\n        try {\n            fs.mkdirSync(fileFolder, { recursive: true });\n        } catch (err) {\n            console.error(`Error creating folder for ${file.fileName}`);\n        }\n\n        fs.writeFileSync(filePath, fileContent);\n    });\n\n    // Write TOC\n    const tocPath = path.join(projectFolder, 'README.md');\n    fs.writeFileSync(tocPath, toc.join('\\n'));\n}\n\nfunction generateCodeObjectContent(codeObject: CodeObject, indent: number): string {\n    const indentation = '  '.repeat(indent);\n    const fancyBar = '---'.repeat(20);\n\n    let content = `\\n\\n${indentation}### ${codeObject.name || 'Other Details'} - [${(codeObject.type || 'Undefined').toUpperCase()}]`;\n    content += `\\n${fancyBar}`;\n    content += `\\n**Description:** ${codeObject.description || 'undefined'}`;\n    content += `\\n**Code Snippet:**\\n\\`\\`\\`\\n${codeObject.codeSnippet || codeObject.content}\\n\\`\\`\\``;\n    content += `\\n${indentation}- **Line:** ${codeObject.codeLine !== undefined ? codeObject.codeLine : 'undefined'}`;\n    content += `\\n${indentation}- **Indent:** ${codeObject.codeIndent !== undefined ? codeObject.codeIndent : 'undefined'}`;\n    content += `\\n${indentation}- **Location:** ${codeObject.fileName || 'undefined'} (${codeObject.fileLocation || 'undefined'})`;\n    content += `\\n${indentation}- **Exported:** ${codeObject.isExported !== undefined ? codeObject.isExported : 'Not Available'}`;\n    content += `\\n${indentation}- **Private:** ${codeObject.isPrivate !== undefined ? codeObject.isPrivate : 'Not Available'}`;\n    content += `\\n${indentation}- **Async:** ${codeObject.isAsync !== undefined ? codeObject.isAsync : 'Not Available'}\\n\\n`;\n\n    if (codeObject.functionParameters && codeObject.functionParameters.length > 0) {\n        content += `\\n${indentation}###### Function Parameters:`;\n        codeObject.functionParameters.forEach(param => {\n            content += `\\n${indentation}- **${param.name}** (${param.type}): ${param.description} \\n Example: ${param.example}`;\n        });\n    }\n\n    if (codeObject.functionReturns) {\n        content += `\\n${indentation}###### Function Returns:`;\n        content += `\\n${indentation}- **Type:** ${codeObject.functionReturns.type}`;\n        content += `\\n${indentation}- **Description:** ${codeObject.functionReturns.description}`;\n        content += `\\n${indentation}- **Example:** ${codeObject.functionReturns.example}`;\n    }\n\n    if (codeObject.subObjects && codeObject.subObjects.length > 0) {\n        content += `\\n${indentation}###### Sub Objects:`;\n        codeObject.subObjects.forEach(subObj => {\n            content += generateCodeObjectContent(subObj, indent + 1);\n        });\n    }\n\n    return content;\n}\n\nfunction getEmoji(type: string): string {\n    switch (type) {\n        case 'classes':\n            return '📘';\n        case 'functions':\n            return '🔧';\n        case 'variables':\n            return '🧮';\n        case 'types':\n            return '🏷️';\n        case 'comments':\n            return '💬';\n        case 'imports':\n            return '📥';\n        case 'exports':\n            return '📤';\n        case 'interfaces':\n            return '🌉';\n        default:\n            return '';\n    }\n}\n\nexport async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {\n    if (!fs.existsSync(folderPath)) {\n        try {\n            fs.mkdirSync(folderPath, {\n                recursive: true\n            });\n        } catch (err) {\n            console.error(err);\n            console.log(\"Using Backup Directory\");\n\n            if (!fs.existsSync(backupDirectory)) {\n                fs.mkdirSync(backupDirectory, {\n                    recursive: true\n                });\n            }\n\n            if (!fs.existsSync(backupDirectory)) {\n                console.error(\"Backup Directory does not exist. We could not make it!\");\n                return false;\n            }\n\n            folderPath = backupDirectory;\n        }\n    }\n\n    // Check to make sure the filepath is writeable before proceeding\n    try {\n        fs.accessSync(folderPath, fs.constants.W_OK);\n    } catch (err) {\n        console.error(`Cannot write to ${folderPath}. Please check the path and try again.`);\n        return false;\n    }\n\n    // Save projectContext to a JSON file\n    if (!jsonFile) {\n        const timeStamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const model = process.env.LLM_TO_USE || 'ml';\n        const projectContextPath = path.join(folderPath, `projectContext-${timeStamp}-${model}.json`);\n        jsonFile = projectContextPath;\n\n        try {\n            fs.writeFileSync(jsonFile, JSON.stringify(projectContext, null, 4));\n        } catch (err) {\n            console.error(`Error writing project context to ${projectContextPath}`);\n        }\n    } else {\n        const projectContextPath = jsonFile;\n\n        if (!projectContext) {\n            try {\n                projectContext = JSON.parse(fs.readFileSync(projectContextPath, 'utf-8')) as ProjectSummary;\n            } catch (err) {\n                console.error(`Error reading project context from ${projectContextPath}`);\n            }\n        }\n    }\n\n    // parse the context file, etc.\n    if (!projectContext) {\n        console.error(`Error generating MD file. Project context is empty.`);\n        return false;\n    }\n    jsonToMarkdown(projectContext, folderPath);\n\n    return true;\n}"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "genCodeChunkObj",
                            "type": "function",
                            "description": "Generates a CodeObject for a given code chunk in a project.",
                            "codeSnippet": "async function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{ ... }",
                            "codeLine": 33,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectSummary",
                                    "type": "ProjectSummary",
                                    "description": "Summary of the project.",
                                    "example": "{ projectName: 'example', projectDescription: {}, projectLocation: 'path', codeFiles: [], ragData: [], teamContext: '' }"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file being processed.",
                                    "example": "src/example.ts"
                                },
                                {
                                    "name": "chunk",
                                    "type": "string",
                                    "description": "Code chunk to be processed.",
                                    "example": "const example = 'code chunk';"
                                }
                            ],
                            "functionReturns": {
                                "name": "chunkCodeObjects",
                                "type": "CodeObject",
                                "description": "Generated CodeObject for the given code chunk.",
                                "example": "{ classes: [], functions: [], variables: [], types: [], interfaces: [], imports: [], exports: [] }"
                            }
                        },
                        {
                            "name": "mergeObjectArrays",
                            "type": "function",
                            "description": "Merges incoming code objects with existing code objects, removing duplicates.",
                            "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                            "codeLine": 75,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "codeObjArray",
                                    "type": "CodeObject",
                                    "description": "Existing code objects.",
                                    "example": "{ classes: [], functions: [], variables: [], types: [], interfaces: [], imports: [], exports: [] }"
                                },
                                {
                                    "name": "newCodeObj",
                                    "type": "any",
                                    "description": "New code objects to be merged.",
                                    "example": "{ functions: [{ name: 'newFunction', type: 'function', description: 'A new function', codeSnippet: 'function newFunction() { ... }', codeLine: 10, codeIndent: 2, fileName: 'example.ts', fileLocation: 'src/example.ts', isExported: false, isPrivate: false, isAsync: false, functionParameters: [], functionReturns: {} }] }"
                                }
                            ],
                            "functionReturns": {
                                "name": "mergedCodeObj",
                                "type": "CodeObject",
                                "description": "Merged code objects without duplicates.",
                                "example": "{ classes: [], functions: [], variables: [], types: [], interfaces: [], imports: [], exports: [] }"
                            }
                        },
                        {
                            "name": "parseCodebase",
                            "type": "function",
                            "description": "Parses the codebase and generates a project summary.",
                            "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                            "codeLine": 145,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "Path to the project directory or file.",
                                    "example": "src/project"
                                },
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project.",
                                    "example": "exampleProject"
                                }
                            ],
                            "functionReturns": {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "Summary of the parsed project.",
                                "example": "{ projectName: 'exampleProject', projectDescription: {}, projectLocation: 'src/project', codeFiles: [], ragData: [], teamContext: '' }"
                            }
                        },
                        {
                            "name": "getIgnoredFiles",
                            "type": "function",
                            "description": "Retrieves the list of files to be ignored based on .gitignore and .fofoignore files.",
                            "codeSnippet": "async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }",
                            "codeLine": 335,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "Path to the project directory.",
                                    "example": "src/project"
                                }
                            ],
                            "functionReturns": {
                                "name": "ignorePatterns",
                                "type": "string[]",
                                "description": "List of file patterns to be ignored.",
                                "example": "[ 'node_modules/**', 'dist/**' ]"
                            }
                        },
                        {
                            "name": "getFileSizeInKB",
                            "type": "function",
                            "description": "Gets the size of a file in kilobytes.",
                            "codeSnippet": "async function getFileSizeInKB(filePath: string): Promise<number> { ... }",
                            "codeLine": 379,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file.",
                                    "example": "src/example.ts"
                                }
                            ],
                            "functionReturns": {
                                "name": "size",
                                "type": "number",
                                "description": "Size of the file in kilobytes.",
                                "example": 1024
                            }
                        },
                        {
                            "name": "isFileTooLarge",
                            "type": "function",
                            "description": "Checks if a file is too large based on its size and character count.",
                            "codeSnippet": "async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars: number = 300): Promise<boolean> { ... }",
                            "codeLine": 384,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file.",
                                    "example": "src/example.ts"
                                },
                                {
                                    "name": "maxFileSizeKB",
                                    "type": "number",
                                    "description": "Maximum allowed file size in kilobytes.",
                                    "example": 3000
                                },
                                {
                                    "name": "maxChars",
                                    "type": "number",
                                    "description": "Maximum allowed number of characters in the file.",
                                    "example": 300
                                }
                            ],
                            "functionReturns": {
                                "name": "tooLarge",
                                "type": "boolean",
                                "description": "Indicates if the file is too large.",
                                "example": true
                            }
                        },
                        {
                            "name": "getContextFromFile",
                            "type": "function",
                            "description": "Retrieves the team context from a specified file.",
                            "codeSnippet": "function getContextFromFile() { ... }",
                            "codeLine": 398,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true,
                            "isAsync": false,
                            "functionParameters": [],
                            "functionReturns": {
                                "name": "context",
                                "type": "string",
                                "description": "Team context retrieved from the file.",
                                "example": "Team context content"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "llmToUse",
                            "type": "variable",
                            "description": "Specifies the LLM to use, fetched from environment variables.",
                            "codeSnippet": "const llmToUse = process.env.LLM_TO_USE || undefined;",
                            "codeLine": 29,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "breakNum",
                            "type": "variable",
                            "description": "Specifies the maximum token split, fetched from environment variables or defaults to 400.",
                            "codeSnippet": "const breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;",
                            "codeLine": 30,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "objectKeys",
                            "type": "variable",
                            "description": "An array of code object types to process.",
                            "codeSnippet": "const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'imports', 'exports']",
                            "codeLine": 35,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "chunkCodeObjectsAny",
                            "type": "variable",
                            "description": "An object to store code objects for each chunk.",
                            "codeSnippet": "const chunkCodeObjectsAny = {} as any;",
                            "codeLine": 36,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "mergedCodeObj",
                            "type": "variable",
                            "description": "An object to store merged code objects.",
                            "codeSnippet": "const mergedCodeObj: any = codeObjArray;",
                            "codeLine": 80,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "projectSummary",
                            "type": "variable",
                            "description": "An object to store the summary of the project being parsed.",
                            "codeSnippet": "const projectSummary: ProjectSummary = { projectName: projectName, projectDescription: {} as codeSummary, projectLocation: projectPath, codeFiles: [], ragData: [], teamContext: \"\", // Placeholder, TODO==> Add support for team context };",
                            "codeLine": 127,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "ignorePatterns",
                            "type": "variable",
                            "description": "An array of patterns to ignore while parsing the project.",
                            "codeSnippet": "const ignorePatterns = [ \"node_modules/**\", \"dist/**\", ...(await getIgnoredFiles(projectPath)), ];",
                            "codeLine": 136,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "filePaths",
                            "type": "variable",
                            "description": "An array to store file paths to be parsed.",
                            "codeSnippet": "let filePaths: string[] = [];",
                            "codeLine": 141,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "codeDescription",
                            "type": "variable",
                            "description": "A string to store the description of the code files.",
                            "codeSnippet": "let codeDescription = '';",
                            "codeLine": 276,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "ignorePatterns",
                            "type": "variable",
                            "description": "An array to store ignore patterns for files.",
                            "codeSnippet": "let ignorePatterns: string[] = [];",
                            "codeLine": 306,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        },
                        {
                            "name": "contextFile",
                            "type": "variable",
                            "description": "Specifies the path to the context file, fetched from environment variables or defaults to './prompts/teamContext.md'.",
                            "codeSnippet": "const contextFile = process.env.CONTEXT_FILE === '' ? \"./prompts/teamContext.md\" : (process.env.CONTEXT_FILE || \"./prompts/teamContext.md\");",
                            "codeLine": 359,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": true
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "glob",
                            "type": "import",
                            "description": "Imports the 'glob' function from the 'glob' module, which is used for file pattern matching.",
                            "codeSnippet": "import { glob } from \"glob\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "readFile",
                            "type": "import",
                            "description": "Imports the 'readFile' function from the 'fs/promises' module, which is used to read files asynchronously.",
                            "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "stat",
                            "type": "import",
                            "description": "Imports the 'stat' function from the 'fs/promises' module, which is used to get file statistics asynchronously.",
                            "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeFileSummary",
                            "type": "import",
                            "description": "Imports the 'CodeFileSummary' type from the './objectSchemas' module.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeObject",
                            "type": "import",
                            "description": "Imports the 'CodeObject' type from the './objectSchemas' module.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "type": "import",
                            "description": "Imports the 'CodeObjects' type from the './objectSchemas' module.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "ProjectSummary",
                            "type": "import",
                            "description": "Imports the 'ProjectSummary' type from the './objectSchemas' module.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "RagData",
                            "type": "import",
                            "description": "Imports the 'RagData' type from the './objectSchemas' module.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "codeSummary",
                            "type": "import",
                            "description": "Imports the 'codeSummary' type from the './objectSchemas' module.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "infer",
                            "type": "import",
                            "description": "Imports the 'infer' function from the './llmInterface' module.",
                            "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "callLLM",
                            "type": "import",
                            "description": "Imports the 'callLLM' function from the './llmInterface' module.",
                            "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getCodeSummaryFromLLM",
                            "type": "import",
                            "description": "Imports the 'getCodeSummaryFromLLM' function from the './llmInterface' module.",
                            "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "type": "import",
                            "description": "Imports the 'getLanguageTypeFromFile' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "classesPrompt",
                            "type": "import",
                            "description": "Imports the 'classesPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "functionsPrompt",
                            "type": "import",
                            "description": "Imports the 'functionsPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "variablesPrompt",
                            "type": "import",
                            "description": "Imports the 'variablesPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "typesPrompt",
                            "type": "import",
                            "description": "Imports the 'typesPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "interfacesPrompt",
                            "type": "import",
                            "description": "Imports the 'interfacesPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "importsPrompt",
                            "type": "import",
                            "description": "Imports the 'importsPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "exportsPrompt",
                            "type": "import",
                            "description": "Imports the 'exportsPrompt' function from the './prompt' module.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "type": "import",
                            "description": "Imports the 'saveToVectorDatabase' function from the './vectorDB' module.",
                            "codeSnippet": "import { saveToVectorDatabase } from \"./vectorDB\";",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "type": "import",
                            "description": "Imports the 'breakCodeIntoChunks' function from the './shared' module.",
                            "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getFileContentLen",
                            "type": "import",
                            "description": "Imports the 'getFileContentLen' function from the './shared' module.",
                            "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "import",
                            "description": "Imports the 'getTokens' function from the './shared' module.",
                            "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Imports the 'fs' module, which provides an API for interacting with the file system.",
                            "codeSnippet": "import fs from \"fs\";",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports the 'dotenv/config' module, which loads environment variables from a .env file into process.env.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "mergeObjectArrays",
                            "type": "export",
                            "description": "Function to merge incoming code objects with existing code objects, handling duplicates and ensuring proper merging.",
                            "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                            "codeLine": 75,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "parseCodebase",
                            "type": "export",
                            "description": "Function to parse the entire codebase, generating a project summary with code objects and descriptions.",
                            "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                            "codeLine": 139,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ]
                }
            },
            "documentData": "import { glob } from \"glob\";\nimport { readFile, stat } from \"fs/promises\";\nimport {\n  CodeFileSummary,\n  CodeObject,\n  CodeObjects,\n  ProjectSummary,\n  RagData,\n  codeSummary,\n} from \"./objectSchemas\";\nimport { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";\nimport { \n    getLanguageTypeFromFile, \n    classesPrompt,\n    functionsPrompt,\n    variablesPrompt,\n    typesPrompt,\n    interfacesPrompt,\n    // commentsPrompt,\n    importsPrompt,\n    exportsPrompt\n } from \"./prompt\";\nimport { saveToVectorDatabase } from \"./vectorDB\";\nimport { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";\nimport fs from \"fs\";\nimport \"dotenv/config\";\n\nconst llmToUse = process.env.LLM_TO_USE || undefined;\nconst breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;\n\n\nasync function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{\n    // Process each chunk's code objects (update projectSummary.ragData, etc.)\n    const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'imports', 'exports']\n    const chunkCodeObjectsAny = {} as any;\n    \n    for (const key of objectKeys) {\n\n    let promptTemplate = \"\"\n\n    switch (key) {\n        case 'classes':\n            promptTemplate = classesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'functions':\n            promptTemplate = functionsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'variables':\n            promptTemplate = variablesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'types':\n            promptTemplate = typesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'interfaces':\n            promptTemplate = interfacesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        // case 'comments':\n        //     promptTemplate = commentsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n        //     break;\n        case 'imports':\n            promptTemplate = importsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'exports':\n            promptTemplate = exportsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        default:\n            console.error(\"Error: Invalid object key\")\n            break;\n    }\n\n    const codeObjects = await callLLM(\n        promptTemplate,\n        projectSummary,\n        chunk,\n        filePath,\n        true,\n        llmToUse\n      );\n\n     // insert the object into the chunkCodeObjects\n     chunkCodeObjectsAny[key] = codeObjects[key];\n    }\n\n    const chunkCodeObjects = chunkCodeObjectsAny as CodeObject;\n\n    return chunkCodeObjects;\n}\n\n\nexport function mergeObjectArrays(\n  codeObjArray: CodeObject,\n  newCodeObj: any\n): CodeObject {\n  // We need to merge our incoming codeObj's key-array pairs with the existing codeObjArray\n  // If the key already exists, we need to merge the arrays\n  // If the key does not exist, we need to add it to the codeObjArray\n  const mergedCodeObj: any = codeObjArray;\n  for (const key in newCodeObj) {\n\n    // if the current key is a string, skip it\n    if (typeof newCodeObj[key] === \"string\" || newCodeObj[key] instanceof String) {\n      continue;\n    }\n    if (typeof mergedCodeObj[key] === \"string\" || mergedCodeObj[key] instanceof String) {\n      console.warn(\"Error: Code Object is not an object\");\n      console.log(newCodeObj[key]);\n      continue;\n    }\n\n    if (key in mergedCodeObj) {\n      mergedCodeObj[key] = [...mergedCodeObj[key], ...newCodeObj[key]];\n    } else {\n      mergedCodeObj[key] = newCodeObj[key];\n    }\n  }\n\n  // Delete any duplicate code objects:\n  console.log(\"Deleting Duplicate Code Objects\");\n  const mergedCodeKeys = Object.keys(mergedCodeObj);\n    for (const key of mergedCodeKeys) {\n\n    const foundKeys: string[] = [];\n\n    // Make sure the key object is iterable\n    if (!Array.isArray(mergedCodeObj[key])) {\n      console.warn(\"Error: Code Object is not an array\");\n      console.log(mergedCodeObj[key]);\n      continue;\n    }\n\n    for (const arrayObj of mergedCodeObj[key]) {\n      if (\"name\" in arrayObj) {\n        if (foundKeys.includes(arrayObj.name)) {\n          mergedCodeObj[key] = mergedCodeObj[key].filter(\n            (obj: any) => obj.name !== arrayObj.name\n          );\n        } else {\n          foundKeys.push(arrayObj.name);\n        }\n      } else if (\"content\" in arrayObj) {\n        if (foundKeys.includes(arrayObj.content)) {\n          mergedCodeObj[key] = mergedCodeObj[key].filter(\n            (obj: any) => obj.content !== arrayObj.content\n          );\n        } else {\n          foundKeys.push(arrayObj.content);\n        }\n      } else {\n        console.warn(\"Error: Code Object has no name or content property\");\n        continue;\n      }\n    }\n  }\n  return mergedCodeObj;\n}\n\nexport async function parseCodebase(\n  projectPath: string,\n  projectName: string\n): Promise<ProjectSummary> {\n  const projectSummary: ProjectSummary = {\n    projectName: projectName,\n    projectDescription: {} as codeSummary,\n    projectLocation: projectPath,\n    codeFiles: [],\n    ragData: [],\n    teamContext: \"\", // Placeholder, TODO==> Add support for team context\n  };\n\n  const ignorePatterns = [\n    \"node_modules/**\",\n    \"dist/**\",\n    ...(await getIgnoredFiles(projectPath)),\n  ];\n\n  projectSummary.teamContext = getContextFromFile(); \n  console.log(\"Team Context:\\n\", projectSummary.teamContext)\n\n  let filePaths: string[] = [];\n\n  // Determine if the projectPath is a directory or a file\n  if (fs.lstatSync(projectPath).isDirectory()) {\n    filePaths = await glob(\"**/*.{ts,js,tsx,jsx}\", {\n      cwd: projectPath,\n      ignore: ignorePatterns,\n    }); // TODO=> Add support for way more files\n  } else {\n    const file = projectPath.split(\"/\").pop();\n    projectPath = projectPath.split(\"/\").slice(0, -1).join(\"/\");\n\n    if (!file) {\n      throw new Error(\"Invalid file path\");\n    }\n    filePaths = [file];\n  }\n\n  await glob(\"**/*.{ts,js,tsx,jsx}\", {\n    cwd: projectPath,\n    ignore: ignorePatterns,\n  }); // TODO=> Add support for way more files\n\n\n\n  for (const filePath of filePaths) {\n    console.log(`Parsing file: ${filePath}`);\n    const fullFilePath = `${projectPath}/${filePath}`;\n\n    const fileLanguage = await infer(\n      getLanguageTypeFromFile(fullFilePath),\n      \"TEXT STRING\",\n      \"language\",\n      false,\n      undefined,\n      undefined,\n      llmToUse\n    );\n    console.log(\"fileLanguage\", fileLanguage.language);\n    const codeFileSummary: CodeFileSummary = {\n      fileName: filePath,\n      fileLocation: fullFilePath,\n      codeSummary: {} as codeSummary, // Placeholder, will be updated later\n      language: fileLanguage.language || \"Unknown\",\n      executionFlow: [], // Placeholder, will be updated later\n      codeObjects: {} as CodeObject, // Placeholder, will be updated later\n    };\n    let currentLine = 0;\n\n    if ((await isFileTooLarge(fullFilePath, 3000, breakNum)) == true) {\n      // 750KB is the default limit\n      // Handle large files by breaking into chunks and processing separately\n      const fileContent = await readFile(fullFilePath, \"utf-8\");\n      const codeChunks = breakCodeIntoChunks(fileContent, breakNum); // 1000 tokens per chunk\n      const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {\n        const lines = chunk.split(\"\\n\");\n        return {\n          start: currentLine,\n          end: currentLine + lines.length,\n        };\n      };\n      console.log(\"Code broken into codeChunks length =\", codeChunks.length);\n      for (const [index, chunk] of codeChunks.entries()) {\n        console.log(\n          \"Processing chunk:\",\n          index + 1,\n          \"of \",\n          codeChunks.length,\n          \" chunks for file \",\n          filePath\n        );\n        const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end;\n\n        const chunkCodeObjects = await genCodeChunkObj(projectSummary, fullFilePath, chunk);\n\n        const ragData: RagData = {\n          metadata: {\n            filename: fullFilePath,\n            codeChunkId: index,\n            codeChunkLineStart: currentLine,\n            codeChunkLineEnd: endLine,\n            codeObjects: chunkCodeObjects,\n            codeChunkSummary: chunkCodeObjects.description,\n          },\n          documentData: chunk,\n        };\n\n        projectSummary.ragData.push(ragData);\n\n        codeFileSummary.codeObjects = mergeObjectArrays(\n          codeFileSummary.codeObjects,\n          chunkCodeObjects\n        );\n        codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\n          chunk,\n          llmToUse\n        );\n\n        await saveToVectorDatabase(projectName, chunk, ragData);\n\n        currentLine = endLine;\n      }\n    } else {\n      const fileContent = await readFile(fullFilePath, \"utf-8\");\n      const codeObjects = await genCodeChunkObj(projectSummary, fullFilePath, fileContent);\n      // Process code objects and update projectSummary and codeFiles\n\n      // Process each chunk's code objects (update projectSummary.ragData, etc.)\n      const ragData: RagData = {\n        metadata: {\n          filename: fullFilePath,\n          codeChunkId: 0,\n          codeChunkLineStart: 0,\n          codeChunkLineEnd: 0,\n          codeObjects: codeObjects,\n          codeChunkSummary: codeObjects.description,\n        },\n        documentData: fileContent,\n      };\n\n      projectSummary.ragData.push(ragData); \n\n      await saveToVectorDatabase(projectName, fileContent, ragData);\n\n      codeFileSummary.codeObjects = mergeObjectArrays(\n        codeFileSummary.codeObjects,\n        codeObjects\n      );\n      codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\n        fileContent,\n        llmToUse\n      );\n    }\n\n    // WE need to define the overall execution flow here, with another LLM call?\n\n    projectSummary.codeFiles.push(codeFileSummary);\n  }\n\n  let codeDescription = '';\n    for (const codeFile of projectSummary.codeFiles) {\n\n        codeDescription += `## ${codeFile.fileName}\\n`;\n        codeDescription += codeFile.codeSummary.goal + \"\\n\" + \n        codeFile.codeSummary.features_functions + \"\\n\\n\";\n    }\n  projectSummary.projectDescription = \n    await getCodeSummaryFromLLM(\n      \"# Summaries of Code Files: \\n\" + codeDescription,\n      llmToUse\n    )\n  \n\n  return projectSummary;\n}\n\n// Helper Functions Implementation:\nasync function getIgnoredFiles(projectPath: string): Promise<string[]> {\n  let ignorePatterns: string[] = [];\n  const basePath = projectPath.split(\"/\").slice(0, -1).join(\"/\");\n  const executionPath = process.cwd();\n\n  console.log(\"basePath\", basePath);\n  console.log(\"executionPath\", executionPath);\n\n  // CHECK for these files in order:\n  const pathsToCheck = [\n    `${basePath}/.gitignore`,\n    `${basePath}/.fofoignore`,\n    `${executionPath}/.gitignore`,\n    `${executionPath}/.fofoignore`,\n  ];\n\n  for (const path of pathsToCheck) {\n    if (path.includes(\"fofoignore\")) {\n      try {\n        const fofoignoreContent = await readFile(\n          path,\n          \"utf-8\"\n        );\n        ignorePatterns.push(...fofoignoreContent.split(\"\\n\").filter(Boolean));\n      } catch (err) {\n        // .fofoignore not found, ignore the error\n        console.warn(\"No .fofoignore file found in \" + path);\n      }\n    } else {\n      try {\n        const gitignoreContent = await readFile(\n          path,\n          \"utf-8\"\n        );\n        ignorePatterns.push(...gitignoreContent.split(\"\\n\").filter(Boolean)); // Filter out empty lines\n      } catch (err) {\n        // .gitignore not found, ignore the error\n        console.warn(\"No .gitignore file found in \" + path);\n      }\n    }\n  }\n\n  return ignorePatterns;\n}\n\nasync function getFileSizeInKB(filePath: string): Promise<number> {\n  return await stat(filePath).then((stats) => stats.size / 1024);\n}\n\nasync function isFileTooLarge(\n  filePath: string,\n  maxFileSizeKB: number,\n  maxChars: number = 300\n): Promise<boolean> {\n  // Check the amount of characters in the file content\n  const file = await readFile(filePath, \"utf-8\");\n  const tooLong = getTokens(file) > maxChars;\n\n  if (tooLong === true) return true;\n\n  return await getFileSizeInKB(filePath).then((size) => size > maxFileSizeKB);\n}\n\nfunction getContextFromFile() {\n  const contextFile = process.env.CONTEXT_FILE === '' ? \"./prompts/teamContext.md\" : (process.env.CONTEXT_FILE || \"./prompts/teamContext.md\");\n  console.log(\"Looking for Context File at Path:\", contextFile)\n  try {\n    if (!fs.existsSync(contextFile)) {\n      throw new Error(\"Context File Not Found!\");\n    }\n    return fs.readFileSync(contextFile, \"utf-8\");\n  } catch (err) {\n    console.warn(\"Context File Not Loaded! Using Default Context\");\n    return \"N/A\";\n  }\n}"
        }
    ],
    "teamContext": "# Team: Sweet Papa Technologies, LLC\n\n## About Sweet Papa Technologies, LLC\n- Builds tools that utilize A.I. and Web3 technologies\n- Founded in 2023\n- Located in the United States\n\n## Technical Stack and Tools:\n- TypeScript, Quasar Framework, VueJS, Capacitor, Electron\n- OpenAI, Google Cloud, Ollama, Firebase"
}