{
    "projectName": "fofo-docs",
    "projectDescription": {
        "goal": "The code aims to process search results, extract embeddings and document data, log and return this processed data, and provide utility functions for reading file content, breaking code into chunks, and counting tokens. It also generates prompts for different code objects, determines programming language based on file path, defines TypeScript types and interfaces for summarizing and analyzing code projects, prepares prompts for AI API calls, handles rate limits, and enhances responses with file path information. Additionally, it serves as a CLI tool for generating documentation for a codebase using FoFo Docs, and checks if a file is too long based on token count or file size.",
        "features_functions": "1. Processing search results to extract embeddings and document data.\n2. Utility functions: getFileContentLen, breakCodeIntoChunks, getTokens.\n3. Generating prompts for different code objects (classes, functions, variables, etc.).\n4. Determining programming language from file path.\n5. Defining TypeScript types and interfaces for code project analysis.\n6. Preparing prompts and calling AI API, handling rate limits, enhancing responses.\n7. CLI tool for generating documentation using FoFo Docs.\n8. Checking file length based on token count or file size."
    },
    "projectLocation": "./",
    "codeFiles": [
        {
            "fileName": "src/vectorDB.ts",
            "fileLocation": ".//src/vectorDB.ts",
            "codeSummary": {
                "goal": "The code aims to process search results and extract embeddings and document data, then log and return this processed data.",
                "features_functions": "The code checks if 'searchResults.embeddings' exists and assigns it to 'embeddings' or an empty object. It also assigns the first document from 'searchResults.documents' to 'documentData' or an empty array if it doesn't exist. Finally, it logs 'ragData' and returns it."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "load_create_collection",
                        "type": "function",
                        "description": "Loads an existing collection or creates a new one if it doesn't exist.",
                        "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                        "codeLine": 40,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which the collection is being loaded or created.",
                                "example": "exampleProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "collection",
                            "type": "Collection | void",
                            "description": "The collection object if found or created, otherwise void.",
                            "example": "Collection { name: 'exampleProject', ... }"
                        }
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "function",
                        "description": "Saves data to the vector database.",
                        "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                        "codeLine": 78,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which the data is being saved.",
                                "example": "exampleProject"
                            },
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be saved in the vector database.",
                                "example": "const x = 10;"
                            },
                            {
                                "name": "ragData",
                                "type": "RagData",
                                "description": "The RAG data associated with the code.",
                                "example": "{ metadata: { filename: 'example.ts', codeChunkId: '123' }, ... }"
                            }
                        ],
                        "functionReturns": {
                            "name": "bOK",
                            "type": "boolean",
                            "description": "Returns true if the data is saved successfully, otherwise false.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "searchRAG",
                        "type": "function",
                        "description": "Searches the RAG data in the vector database.",
                        "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                        "codeLine": 101,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which the search is being performed.",
                                "example": "exampleProject"
                            },
                            {
                                "name": "searchString",
                                "type": "string",
                                "description": "The search string used to query the RAG data.",
                                "example": "example search"
                            }
                        ],
                        "functionReturns": {
                            "name": "ragData",
                            "type": "RagData",
                            "description": "The RAG data that matches the search query.",
                            "example": "{ metadata: { filename: 'example.ts', codeChunkId: '123' }, ... }"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "apiPass",
                        "type": "variable",
                        "description": "API password retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const apiPass = process.env.API_PASS || \"\";",
                        "codeLine": 9,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "apiUser",
                        "type": "variable",
                        "description": "API user retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const apiUser = process.env.API_USER || \"\";",
                        "codeLine": 10,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "geminiKey",
                        "type": "variable",
                        "description": "Gemini API key retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const geminiKey = process.env.GEMINI_KEY || \"\";",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "apiURL",
                        "type": "variable",
                        "description": "API URL retrieved from environment variables or an empty string if not set.",
                        "codeSnippet": "const apiURL = process.env.API_URL || \"\";",
                        "codeLine": 12,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "embedderMode",
                        "type": "variable",
                        "description": "Embedder mode retrieved from environment variables or defaults to 'GCP'.",
                        "codeSnippet": "const embedderMode = process.env.EMBEDDER_MODE || \"GCP\";",
                        "codeLine": 18,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "embedder",
                        "type": "variable",
                        "description": "Embedder function initialized based on the embedder mode.",
                        "codeSnippet": "let embedder: any | undefined = undefined;",
                        "codeLine": 20,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chromaSettings",
                        "type": "variable",
                        "description": "Settings for ChromaClient, currently set to undefined.",
                        "codeSnippet": "const chromaSettings = undefined;",
                        "codeLine": 42,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "client",
                        "type": "variable",
                        "description": "Instance of ChromaClient initialized with chromaSettings.",
                        "codeSnippet": "const client = new ChromaClient(chromaSettings);",
                        "codeLine": 44,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "name",
                        "type": "variable",
                        "description": "Name of the project collection.",
                        "codeSnippet": "const name = projectName;",
                        "codeLine": 49,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "collection",
                        "type": "variable",
                        "description": "Collection object for the project, can be undefined.",
                        "codeSnippet": "let collection: Collection | void;",
                        "codeLine": 50,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "hb",
                        "type": "variable",
                        "description": "Heartbeat response from the database client.",
                        "codeSnippet": "const hb = await client.heartbeat().catch((err: any) => {",
                        "codeLine": 52,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "bOK",
                        "type": "variable",
                        "description": "Boolean flag indicating the success of the saveToVectorDatabase function.",
                        "codeSnippet": "let bOK = true;",
                        "codeLine": 83,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "searchEmbeddings",
                        "type": "variable",
                        "description": "Embeddings generated for the search string.",
                        "codeSnippet": "const searchEmbeddings = await embedder.generate([searchString]);",
                        "codeLine": 108,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "searchResults",
                        "type": "variable",
                        "description": "Results from querying the collection with search embeddings.",
                        "codeSnippet": "const searchResults = await collection.query({",
                        "codeLine": 109,
                        "codeIndent": 2,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "embeddings",
                        "type": "variable",
                        "description": "Holds the embeddings from searchResults if available, otherwise an empty object.",
                        "codeSnippet": "embeddings: searchResults.embeddings ? ([0] as any) : {},",
                        "codeLine": 1,
                        "codeIndent": 4,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "documentData",
                        "type": "variable",
                        "description": "Holds the first document from searchResults if available, otherwise an empty array.",
                        "codeSnippet": "documentData: (searchResults.documents[0] as any) || [],",
                        "codeLine": 2,
                        "codeIndent": 4,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "ProjectSummary",
                        "description": "Represents a summary of a project.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "RagData",
                        "description": "Represents RAG (Retrieval-Augmented Generation) data.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "ChromaClient",
                        "description": "Client for interacting with Chroma database.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "GoogleGenerativeAiEmbeddingFunction",
                        "description": "Function for generating embeddings using Google Generative AI.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "OpenAIEmbeddingFunction",
                        "description": "Function for generating embeddings using OpenAI.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "Collection",
                        "description": "Represents a collection in the Chroma database.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ],
                "interfaces": [],
                "imports": [
                    {
                        "name": "ProjectSummary, RagData",
                        "type": "import",
                        "description": "Imports the ProjectSummary and RagData types from the local objectSchemas module.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures the dotenv module to load environment variables from a .env file.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection",
                        "type": "import",
                        "description": "Imports ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, and Collection from the chromadb module.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from \"chromadb\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "load_create_collection",
                        "type": "function",
                        "description": "Asynchronously loads or creates a collection in the Chroma database based on the provided project name.",
                        "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                        "codeLine": 32,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "function",
                        "description": "Asynchronously saves data to the vector database for a given project name, code, and RAG data.",
                        "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                        "codeLine": 70,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "function",
                        "description": "Asynchronously searches the RAG data in the vector database for a given project name and search string.",
                        "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                        "codeLine": 93,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/shared.ts",
            "fileLocation": ".//src/shared.ts",
            "codeSummary": {
                "goal": "The code provides utility functions for reading file content, breaking code into chunks, and counting tokens in a string.",
                "features_functions": "The code includes three functions: getFileContentLen, which reads a file and returns the length of its content; breakCodeIntoChunks, which splits code into chunks based on a specified token size; and getTokens, which counts the number of tokens in a string by splitting it on whitespace."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "getFileContentLen",
                        "type": "function",
                        "description": "Asynchronously reads a file and returns the length of its content.",
                        "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path to the file to be read.",
                                "example": "example/path/to/file.txt"
                            }
                        ],
                        "functionReturns": {
                            "name": "length",
                            "type": "number",
                            "description": "The length of the file content.",
                            "example": 123
                        }
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "function",
                        "description": "Breaks a given code string into chunks of specified token size.",
                        "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code string to be broken into chunks.",
                                "example": "const a = 1;\\nconst b = 2;"
                            },
                            {
                                "name": "chunkSize",
                                "type": "number",
                                "description": "The maximum token size for each chunk.",
                                "example": 10
                            }
                        ],
                        "functionReturns": {
                            "name": "chunks",
                            "type": "string[]",
                            "description": "An array of code chunks.",
                            "example": [
                                "const a = 1;\\n",
                                "const b = 2;\\n"
                            ]
                        }
                    },
                    {
                        "name": "getTokens",
                        "type": "function",
                        "description": "Counts the number of tokens in a given code string.",
                        "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code string to be tokenized.",
                                "example": "const a = 1;"
                            }
                        ],
                        "functionReturns": {
                            "name": "tokenCount",
                            "type": "number",
                            "description": "The number of tokens in the code string.",
                            "example": 4
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "codeByLine",
                        "type": "variable",
                        "description": "Array of strings, each representing a line of the input code.",
                        "codeSnippet": "const codeByLine = code.split('\\n');",
                        "codeLine": 9,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chunks",
                        "type": "variable",
                        "description": "Array to hold the chunks of code.",
                        "codeSnippet": "const chunks = [];",
                        "codeLine": 10,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentChunk",
                        "type": "variable",
                        "description": "String to accumulate the current chunk of code.",
                        "codeSnippet": "let currentChunk = '';",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentChunkTokenCount",
                        "type": "variable",
                        "description": "Counter for the number of tokens in the current chunk.",
                        "codeSnippet": "let currentChunkTokenCount = 0;",
                        "codeLine": 12,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "line",
                        "type": "variable",
                        "description": "Current line of code being processed.",
                        "codeSnippet": "for (const line of codeByLine) {",
                        "codeLine": 14,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "lineTokenCount",
                        "type": "variable",
                        "description": "Approximate token count of the current line by splitting on whitespace.",
                        "codeSnippet": "const lineTokenCount = line.split(/\\s+/).length;",
                        "codeLine": 15,
                        "codeIndent": 2,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "readFile",
                        "type": "import",
                        "description": "Imports the readFile function from the 'fs/promises' module, which provides a way to read files asynchronously.",
                        "codeSnippet": "import { readFile } from 'fs/promises';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "getFileContentLen",
                        "type": "export",
                        "description": "Asynchronously reads a file and returns the length of its content.",
                        "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { ... }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "export",
                        "description": "Splits the given code into chunks of specified token size.",
                        "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { ... }",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "export",
                        "description": "Returns the number of tokens in the given code.",
                        "codeSnippet": "export function getTokens(code: string): number { ... }",
                        "codeLine": 31,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/prompt.ts",
            "fileLocation": ".//src/prompt.ts",
            "codeSummary": {
                "goal": "The code provides a set of functions to generate prompts for different types of code objects (e.g., classes, functions, variables, types, interfaces, comments, imports, exports) and a function to determine the programming language based on the file path.",
                "features_functions": "The code defines multiple functions (e.g., classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt) that call a generalPrompt function with specific parameters to generate prompts for different code objects. Additionally, there is a getLanguageTypeFromFile function that generates a prompt to guess the programming language based on the file path."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "generalPrompt",
                        "type": "function",
                        "description": "Generates a prompt string for identifying and describing code objects in a given code snippet.",
                        "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context of the project and team.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code.",
                                "example": "Relevant Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file containing the code snippet.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to be analyzed.",
                                "example": "code snippet here"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "Type of code objects to identify (e.g., functions, classes).",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "promptString",
                            "type": "string",
                            "description": "Generated prompt string.",
                            "example": "Generated prompt string here"
                        }
                    },
                    {
                        "name": "classesPrompt",
                        "type": "function",
                        "description": "Generates a prompt for classes based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 50,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "classes"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for classes"
                        }
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "function",
                        "description": "Generates a prompt for functions based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 52,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for functions"
                        }
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "function",
                        "description": "Generates a prompt for variables based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 54,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "variables"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for variables"
                        }
                    },
                    {
                        "name": "typesPrompt",
                        "type": "function",
                        "description": "Generates a prompt for types based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 56,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "types"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for types"
                        }
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "function",
                        "description": "Generates a prompt for interfaces based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 58,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "interfaces"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for interfaces"
                        }
                    },
                    {
                        "name": "importsPrompt",
                        "type": "function",
                        "description": "Generates a prompt for imports based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 62,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "imports"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for imports"
                        }
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "function",
                        "description": "Generates a prompt for exports based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 64,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context for generating the prompt.",
                                "example": "Project and Team Context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "The relevant code for generating the prompt.",
                                "example": "Previously Parsed Code"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path for generating the prompt.",
                                "example": ".//src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet for generating the prompt.",
                                "example": "codeSnippet"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object for generating the prompt.",
                                "example": "exports"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The generated prompt.",
                            "example": "Generated prompt for exports"
                        }
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "function",
                        "description": "Guesses the programming language based on the file name and path.",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}\n    \n    Please respond with JUST the language name. For example: JavaScript\n    `\n}",
                        "codeLine": 66,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path to guess the programming language from.",
                                "example": ".//src/prompt.ts"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "The guessed programming language.",
                            "example": "JavaScript"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "codeSummary",
                        "type": "variable",
                        "description": "A constant string that contains a template for summarizing code in markdown format.",
                        "codeSnippet": "export const codeSummary = `...`;",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "generalPrompt",
                        "type": "variable",
                        "description": "A constant function that generates a prompt string based on provided context, relevant code, file path, code snippet, and type.",
                        "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... };",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileName",
                        "type": "variable",
                        "description": "A constant string that represents the name of the file extracted from the file path.",
                        "codeSnippet": "const fileName = filePath.split('/').pop();",
                        "codeLine": 6,
                        "codeIndent": 1,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "CodeObjects",
                        "type": "import",
                        "description": "Imports the CodeObjects type from the objectSchemas module.",
                        "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "codeSummary",
                        "type": "export",
                        "description": "A constant string template for creating a summary of code in markdown format.",
                        "codeSnippet": "export const codeSummary = `...`",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "classesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for classes based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 70,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for functions based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 71,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for variables based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 72,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "typesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for types based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 73,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for interfaces based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 74,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "importsPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for imports based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 77,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "export",
                        "description": "A function that generates a prompt for exports based on the provided context, relevant code, file path, and code snippet.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 78,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "export",
                        "description": "A function that guesses the programming language based on the file name and path.",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): ${filePath} Please respond with JUST the language name. For example: JavaScript ` }",
                        "codeLine": 81,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/objectSchemas.ts",
            "fileLocation": ".//src/objectSchemas.ts",
            "codeSummary": {
                "goal": "The code defines TypeScript types and interfaces for summarizing and analyzing code projects.",
                "features_functions": "The code includes definitions for various types and interfaces such as CodeObjectType, CodeObjects, ProjectSummary, models, modelServiceConfig, RagData, codeSummary, CodeFileSummary, ExecutionFlow, FunctionParameter, FunctionReturn, and CodeObject. These interfaces and types are used to structure data related to code projects, including metadata, code summaries, execution flow, and more."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [],
                "variables": [],
                "types": [
                    {
                        "name": "CodeObjectType",
                        "description": "A union type representing different kinds of code objects.",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "description": "A union type representing different collections of code objects.",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjectTypes",
                        "description": "A union type representing different properties of a CodeObject.",
                        "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "ProjectSummary",
                        "type": "interface",
                        "description": "Interface representing a summary of a project.",
                        "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "models",
                        "type": "interface",
                        "description": "Interface representing a model with a name and the model itself.",
                        "codeSnippet": "export interface models { name: string, model: any, }",
                        "codeLine": 13,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "interface",
                        "description": "Interface representing the configuration for a model service.",
                        "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                        "codeLine": 16,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "interface",
                        "description": "Interface representing RAG data with metadata and optional embeddings.",
                        "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                        "codeLine": 20,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "interface",
                        "description": "Interface representing a summary of code with goal and features/functions.",
                        "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "interface",
                        "description": "Interface representing a summary of a code file.",
                        "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                        "codeLine": 32,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ExecutionFlow",
                        "type": "interface",
                        "description": "Interface representing the execution flow of a code file.",
                        "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionParameter",
                        "type": "interface",
                        "description": "Interface representing a function parameter with name, type, description, and example.",
                        "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionReturn",
                        "type": "interface",
                        "description": "Interface representing the return type of a function with description and example.",
                        "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                        "codeLine": 52,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "interface",
                        "description": "Interface representing a code object with various properties.",
                        "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                        "codeLine": 57,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ],
                "imports": [],
                "exports": [
                    {
                        "name": "CodeObjectType",
                        "type": "export",
                        "description": "Type alias for different kinds of code objects.",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "export",
                        "description": "Type alias for different categories of code objects.",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/llmInterface.ts",
            "fileLocation": ".//src/llmInterface.ts",
            "codeSummary": {
                "goal": "The goal of the code is to prepare a prompt with relevant context and code snippet, call an AI API to get a response, handle rate limits, and enhance the response with file path information.",
                "features_functions": "The code prepares a prompt by replacing placeholders with actual values, calls an AI API using the prepared prompt, handles rate limit errors by retrying after a delay, and enhances the API response with file path and file name information."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "getModelBackend",
                        "type": "function",
                        "description": "Retrieves the backend type for a given model based on the selected model name.",
                        "codeSnippet": "const getModelBackend = (selectedModel: string) => { ... }",
                        "codeLine": 79,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "selectedModel",
                                "type": "string",
                                "description": "The name of the selected model.",
                                "example": "gpt-4o"
                            }
                        ],
                        "functionReturns": {
                            "name": "backend",
                            "type": "llm_modes",
                            "description": "The backend type associated with the selected model.",
                            "example": "OLLAMA"
                        }
                    },
                    {
                        "name": "validateJSON",
                        "type": "function",
                        "description": "Validates if a given string is a valid JSON.",
                        "codeSnippet": "function validateJSON(jsonString: string): boolean { ... }",
                        "codeLine": 10,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "jsonString",
                                "type": "string",
                                "description": "The JSON string to be validated.",
                                "example": "{\"key\": \"value\"}"
                            }
                        ],
                        "functionReturns": {
                            "name": "isValid",
                            "type": "boolean",
                            "description": "Returns true if the JSON string is valid, otherwise false.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "fixJSON",
                        "type": "function",
                        "description": "Attempts to repair a malformed JSON string.",
                        "codeSnippet": "function fixJSON(jsonString: string): string { ... }",
                        "codeLine": 18,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "jsonString",
                                "type": "string",
                                "description": "The malformed JSON string to be repaired.",
                                "example": "{\"key\": \"value\""
                            }
                        ],
                        "functionReturns": {
                            "name": "repairedJSON",
                            "type": "string",
                            "description": "Returns the repaired JSON string.",
                            "example": "{\"key\": \"value\"}"
                        }
                    },
                    {
                        "name": "parseYaml",
                        "type": "function",
                        "description": "Parses a YAML string and converts it into a JSON object.",
                        "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                        "codeLine": 26,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "yamlString",
                                "type": "string",
                                "description": "The YAML string to be parsed.",
                                "example": "key: value"
                            }
                        ],
                        "functionReturns": {
                            "name": "parsedObject",
                            "type": "any",
                            "description": "Returns the parsed JSON object.",
                            "example": "{\"key\": \"value\"}"
                        }
                    },
                    {
                        "name": "parseText",
                        "type": "function",
                        "description": "Converts a text string into a JSON object with a specified key.",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                        "codeLine": 36,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "text",
                                "type": "string",
                                "description": "The text string to be converted.",
                                "example": "This is a sample text."
                            },
                            {
                                "name": "resKey",
                                "type": "string",
                                "description": "The key to be used in the resulting JSON object.",
                                "example": "response"
                            }
                        ],
                        "functionReturns": {
                            "name": "parsedObject",
                            "type": "any",
                            "description": "Returns the JSON object with the specified key.",
                            "example": "{\"response\": \"This is a sample text.\"}"
                        }
                    },
                    {
                        "name": "wait",
                        "type": "function",
                        "description": "Pauses execution for a specified number of milliseconds.",
                        "codeSnippet": "async function wait(ms: number) { ... }",
                        "codeLine": 44,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "ms",
                                "type": "number",
                                "description": "The number of milliseconds to wait.",
                                "example": 1000
                            }
                        ],
                        "functionReturns": {
                            "name": "promise",
                            "type": "Promise<void>",
                            "description": "Returns a promise that resolves after the specified time.",
                            "example": "Promise<void>"
                        }
                    },
                    {
                        "name": "infer",
                        "type": "function",
                        "description": "Generates a response based on the provided prompt and model.",
                        "codeSnippet": "export async function infer(prompt: string, responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\", responseKey?: string, bPro = false, bRetry = true, supplementalData?: any, model: string = textModel): Promise<any> { ... }",
                        "codeLine": 48,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "prompt",
                                "type": "string",
                                "description": "The prompt to be used for generating the response.",
                                "example": "What is the capital of France?"
                            },
                            {
                                "name": "responseMode",
                                "type": "\"JSON object\" | \"YAML object\" | \"TEXT STRING\"",
                                "description": "The format of the response.",
                                "example": "\"JSON object\""
                            },
                            {
                                "name": "responseKey",
                                "type": "string",
                                "description": "The key to be used in the response object.",
                                "example": "response"
                            },
                            {
                                "name": "bPro",
                                "type": "boolean",
                                "description": "Flag to indicate if the pro version should be used.",
                                "example": false
                            },
                            {
                                "name": "bRetry",
                                "type": "boolean",
                                "description": "Flag to indicate if retries should be allowed.",
                                "example": true
                            },
                            {
                                "name": "supplementalData",
                                "type": "any",
                                "description": "Additional data to be used in the response generation.",
                                "example": "{\"context\": \"additional context\"}"
                            },
                            {
                                "name": "model",
                                "type": "string",
                                "description": "The model to be used for generating the response.",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "response",
                            "type": "Promise<any>",
                            "description": "Returns a promise that resolves to the generated response.",
                            "example": "{\"response\": \"Paris\"}"
                        }
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "function",
                        "description": "Asynchronously gets a code summary from a language model by sending a prompt with the code to summarize.",
                        "codeSnippet": "export async function getCodeSummaryFromLLM(\n  codeToSummarize: string,\n  model: string = textModel\n): Promise<codeSummary> { ... }",
                        "codeLine": 52,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "codeToSummarize",
                                "type": "string",
                                "description": "The code block that needs to be summarized.",
                                "example": "const x = 10;"
                            },
                            {
                                "name": "model",
                                "type": "string",
                                "description": "The model to use for summarization, defaults to textModel.",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "codeSummary",
                            "type": "Promise<codeSummary>",
                            "description": "A promise that resolves to a code summary object.",
                            "example": "{ goal: 'Summarize the code', features_functions: 'Describes features and functions' }"
                        }
                    },
                    {
                        "name": "getFileNameFromPath",
                        "type": "function",
                        "description": "Extracts the file name from a given file path.",
                        "codeSnippet": "const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";",
                        "codeLine": 20,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "path",
                                "type": "string",
                                "description": "The file path from which to extract the file name.",
                                "example": "/path/to/file.txt"
                            }
                        ],
                        "functionReturns": {
                            "name": "fileName",
                            "type": "string",
                            "description": "The extracted file name.",
                            "example": "file.txt"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "retries",
                        "type": "variable",
                        "description": "A counter for the number of retries.",
                        "codeSnippet": "let retries = 0;",
                        "codeLine": 30,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endpoints",
                        "type": "variable",
                        "description": "An object containing the endpoint URLs for different services.",
                        "codeSnippet": "const endpoints = { OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\" };",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "systemPrompt",
                        "type": "variable",
                        "description": "A system prompt string for the developer AI.",
                        "codeSnippet": "const systemPrompt = \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "MODEL_MODES",
                        "type": "variable",
                        "description": "An array of objects representing different model modes.",
                        "codeSnippet": "const MODEL_MODES = [ ... ];",
                        "codeLine": 38,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "openai",
                        "type": "variable",
                        "description": "An instance of the OpenAI class configured with organization and API key.",
                        "codeSnippet": "const openai = new OpenAI({ organization: process.env.OPENAI_ORG_ID, apiKey: process.env.OPENAI_API_KEY });",
                        "codeLine": 79,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "ollama",
                        "type": "variable",
                        "description": "An instance of the Ollama class configured with the host endpoint.",
                        "codeSnippet": "const ollama = new Ollama({ host: endpoints.OLLAMA });",
                        "codeLine": 84,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "contextLength",
                        "type": "variable",
                        "description": "A constant representing the context length for the model.",
                        "codeSnippet": "const contextLength = 8000;",
                        "codeLine": 85,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "project",
                        "type": "variable",
                        "description": "A constant representing the project name for Vertex AI.",
                        "codeSnippet": "const project = \"sweet-papa-technologies\";",
                        "codeLine": 88,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "location",
                        "type": "variable",
                        "description": "A constant representing the location for Vertex AI.",
                        "codeSnippet": "const location = \"us-central1\";",
                        "codeLine": 89,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "yaml",
                        "type": "variable",
                        "description": "Library used for parsing YAML strings.",
                        "codeSnippet": "const obj = yaml.load(yamlString) as any;",
                        "codeLine": 28,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "llm_modes",
                        "type": "variable",
                        "description": "Type representing the different modes of the language model.",
                        "codeSnippet": "const modelBackend:llm_modes = getModelBackend(model);",
                        "codeLine": 45,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "ollamaResponse",
                        "type": "variable",
                        "description": "Stores the response from the ollama.generate function call.",
                        "codeSnippet": "const ollamaResponse = await ollama.generate({ model: model, prompt: promptNew, stream: false, system: systemPrompt, keep_alive: 9000, options: { ...secretSauce, num_ctx: contextLength, }, });",
                        "codeLine": 3,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "request",
                        "type": "variable",
                        "description": "Holds the request payload for the VERTEX model backend.",
                        "codeSnippet": "const request = { contents: [{ role: \"user\", parts: [{ text: promptNew }] }], };",
                        "codeLine": 11,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "genFunction",
                        "type": "variable",
                        "description": "Function to generate content, which can be either generativeModel or generateModelAdv based on the bPro flag.",
                        "codeSnippet": "let genFunction = generativeModel;",
                        "codeLine": 15,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "result",
                        "type": "variable",
                        "description": "Stores the result from the genFunction.generateContent function call.",
                        "codeSnippet": "const result = await genFunction.generateContent(request);",
                        "codeLine": 20,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "completion",
                        "type": "variable",
                        "description": "Stores the completion response from the openai.chat.completions.create function call.",
                        "codeSnippet": "const completion = await openai.chat.completions.create({ ...secretSauce, messages: [{ role: \"system\", content: systemPrompt }, { role: \"user\", content: promptNew} ], model: model, });",
                        "codeLine": 43,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endTime",
                        "type": "variable",
                        "description": "Stores the current timestamp at the end of the process.",
                        "codeSnippet": "const endTime = Date.now();",
                        "codeLine": 58,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "totalTime",
                        "type": "variable",
                        "description": "Calculates the total time taken for the process by subtracting startTime from endTime.",
                        "codeSnippet": "const totalTime = endTime - startTime;",
                        "codeLine": 59,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "newData",
                        "type": "variable",
                        "description": "Holds the first element of the parsed JSON array if it exists.",
                        "codeSnippet": "const newData = res[0];",
                        "codeLine": 14,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "keys",
                        "type": "variable",
                        "description": "Holds the keys of the newData object.",
                        "codeSnippet": "const keys = Object.keys(newData);",
                        "codeLine": 17,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "expectedKeys",
                        "type": "variable",
                        "description": "Holds the expected keys for the JSON object.",
                        "codeSnippet": "const expectedKeys: CodeObjects[] = [\"classes\", \"functions\", \"variables\", \"types\", \"interfaces\", \"imports\", \"exports\"];",
                        "codeLine": 19,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fixedData",
                        "type": "variable",
                        "description": "Holds the fixed JSON object if the original object is missing keys.",
                        "codeSnippet": "const fixedData = {} as any;",
                        "codeLine": 27,
                        "codeIndent": 12,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "e",
                        "type": "variable",
                        "description": "Holds the error object if JSON parsing fails.",
                        "codeSnippet": "catch (e: any) {",
                        "codeLine": 43,
                        "codeIndent": 6,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "question",
                        "type": "variable",
                        "description": "Holds the prompt question to be sent to the LLM for summarizing code.",
                        "codeSnippet": "const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \\n  Please respond with a JSON object as follows:\\n  {\\n    \\\"goal\\\": \\\"String summarizing what the code is about, and the goal\\\",\\n    \\\"features_functions\\\": \\\"String describing any relevant features\\\",\\n  }\\n\\n  ### Code To Sumnarize:\\n  ${codeToSummarize}\\n  `;",
                        "codeLine": 67,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeSummary",
                        "type": "variable",
                        "description": "Holds the summary of the code returned by the LLM.",
                        "codeSnippet": "const codeSummary = await infer(question, \"JSON object\", undefined, false, undefined, undefined, model);",
                        "codeLine": 75,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "promptTemplate",
                        "type": "variable",
                        "description": "Template for the prompt that will be sent to the AI API, with placeholders for relevant code and context.",
                        "codeSnippet": "promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");",
                        "codeLine": 6,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "prompt",
                        "type": "variable",
                        "description": "Final prompt string after replacing placeholders with actual values.",
                        "codeSnippet": "const prompt = promptTemplate.replace(\"<supplemental context>\", projectContext.teamContext).replace(\"<code snippet>\", code).replace(\"<file path>\", filePath);",
                        "codeLine": 16,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "getFileNameFromPath",
                        "type": "variable",
                        "description": "Function to extract the file name from a given file path.",
                        "codeSnippet": "const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";",
                        "codeLine": 22,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileName",
                        "type": "variable",
                        "description": "Extracted file name from the given file path.",
                        "codeSnippet": "const fileName = getFileNameFromPath(filePath);",
                        "codeLine": 23,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "response",
                        "type": "variable",
                        "description": "Response from the AI API call.",
                        "codeSnippet": "const response = await infer(prompt, \"JSON object\", undefined, true, true, { fileLocation: filePath, fileName: fileName }, model).catch((error) => { console.error(\"Error calling API:\", error); return { error: error }; });",
                        "codeLine": 27,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeObjects",
                        "type": "variable",
                        "description": "Parsed and validated response from the AI API.",
                        "codeSnippet": "let codeObjects: any = response;",
                        "codeLine": 39,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "CodeObjects",
                        "description": "An array of strings representing different categories of code elements such as classes, functions, variables, etc.",
                        "codeSnippet": "const expectedKeys: CodeObjects[] = [\"classes\", \"functions\", \"variables\", \"types\", \"interfaces\", \"imports\", \"exports\"];",
                        "codeLine": 19,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "interfaces": [],
                "imports": [
                    {
                        "name": "CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig",
                        "type": "import",
                        "description": "Imports various types and configurations from the objectSchemas module.",
                        "codeSnippet": "import { CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "import",
                        "description": "Imports the searchRAG function from the vectorDB module.",
                        "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "Ollama",
                        "type": "import",
                        "description": "Imports the Ollama class from the ollama module.",
                        "codeSnippet": "import { Ollama } from \"ollama\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "OpenAI",
                        "type": "import",
                        "description": "Imports the OpenAI class from the openai module.",
                        "codeSnippet": "import OpenAI from \"openai\";",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures environment variables from the dotenv module.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 14,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI",
                        "type": "import",
                        "description": "Imports various types and classes from the @google-cloud/vertexai module.",
                        "codeSnippet": "import { FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI } from \"@google-cloud/vertexai\";",
                        "codeLine": 16,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "import",
                        "description": "Imports the getTokens function from the shared module.",
                        "codeSnippet": "import { getTokens } from \"./shared\";",
                        "codeLine": 17,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "CodeObject",
                        "type": "export",
                        "description": "Exported object from objectSchemas module",
                        "codeSnippet": "import { CodeObject } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "CodeObjectType",
                        "type": "export",
                        "description": "Exported object from objectSchemas module",
                        "codeSnippet": "import { CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "export",
                        "description": "Exported object from objectSchemas module",
                        "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "export",
                        "description": "Exported object from objectSchemas module",
                        "codeSnippet": "import { ProjectSummary } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "export",
                        "description": "Exported object from objectSchemas module",
                        "codeSnippet": "import { codeSummary } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "export",
                        "description": "Exported object from objectSchemas module",
                        "codeSnippet": "import { modelServiceConfig } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "export",
                        "description": "Exported object from vectorDB module",
                        "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "FunctionDeclarationSchemaType",
                        "type": "export",
                        "description": "Exported object from @google-cloud/vertexai module",
                        "codeSnippet": "import { FunctionDeclarationSchemaType } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmBlockThreshold",
                        "type": "export",
                        "description": "Exported object from @google-cloud/vertexai module",
                        "codeSnippet": "import { HarmBlockThreshold } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmCategory",
                        "type": "export",
                        "description": "Exported object from @google-cloud/vertexai module",
                        "codeSnippet": "import { HarmCategory } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "VertexAI",
                        "type": "export",
                        "description": "Exported object from @google-cloud/vertexai module",
                        "codeSnippet": "import { VertexAI } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "export",
                        "description": "Exported object from shared module",
                        "codeSnippet": "import { getTokens } from \"./shared\";",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "parseYaml",
                        "type": "export",
                        "description": "Function to convert a YAML string into a JSON object.",
                        "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "parseText",
                        "type": "export",
                        "description": "Function to convert a text string into a JSON object with a specified key.",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                        "codeLine": 38,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "infer",
                        "type": "export",
                        "description": "Asynchronous function to infer a response based on a given prompt and model.",
                        "codeSnippet": "export async function infer(prompt: string, responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\", responseKey?: string, bPro = false, bRetry = true, supplementalData?: any, model: string = textModel): Promise<any> { ... }",
                        "codeLine": 45,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "export",
                        "description": "Asynchronously gets a code summary from the LLM based on the provided code block and model.",
                        "codeSnippet": "export async function getCodeSummaryFromLLM(codeToSummarize: string, model: string = textModel): Promise<codeSummary> { ... }",
                        "codeLine": 70,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "callLLM",
                        "type": "export",
                        "description": "Asynchronously calls the LLM with a given prompt template, project context, code, file path, and model.",
                        "codeSnippet": "export async function callLLM(promptTemplate: string, projectContext: ProjectSummary, code: string, filePath: string, bRAG = false, model: string = textModel): Promise<any> { ... }",
                        "codeLine": 86,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/index.ts",
            "fileLocation": ".//src/index.ts",
            "codeSummary": {
                "goal": "The code is a CLI tool for generating documentation for a codebase using FoFo Docs.",
                "features_functions": "The code uses the 'commander' library to define a CLI program with options for specifying the input path, output path, test mode, and generating documentation from a JSON file. It includes functions to parse the codebase and generate documentation, handling errors and ensuring necessary directories exist."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "action",
                        "type": "function",
                        "description": "Handles the main logic for generating documentation based on the provided options.",
                        "codeSnippet": "async (projectName, options) => { ... }",
                        "codeLine": 21,
                        "codeIndent": 2,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "Name of the project for which documentation is being generated.",
                                "example": "myProject"
                            },
                            {
                                "name": "options",
                                "type": "object",
                                "description": "Options provided by the user, including input path, output path, test mode, and JSON file path.",
                                "example": {
                                    "input": ".",
                                    "output": "./output",
                                    "test": "false",
                                    "generateFromFile": "path/to/json"
                                }
                            }
                        ],
                        "functionReturns": {
                            "name": "void",
                            "type": "void",
                            "description": "This function does not return a value.",
                            "example": null
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "program",
                        "type": "variable",
                        "description": "Instance of the Command class from the commander library.",
                        "codeSnippet": "const program = new Command();",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "bTestMode",
                        "type": "variable",
                        "description": "Boolean indicating whether the test mode is enabled.",
                        "codeSnippet": "const bTestMode = options.test;",
                        "codeLine": 23,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectPath",
                        "type": "variable",
                        "description": "Path to the codebase provided by the user.",
                        "codeSnippet": "const projectPath = options.input;",
                        "codeLine": 24,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "outputDir",
                        "type": "variable",
                        "description": "Directory where the generated documentation will be saved.",
                        "codeSnippet": "const outputDir = options.output;",
                        "codeLine": 25,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "jsonFile",
                        "type": "variable",
                        "description": "Path to the JSON file used for generating documentation.",
                        "codeSnippet": "const jsonFile = options.generateFromFile;",
                        "codeLine": 26,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "startTime",
                        "type": "variable",
                        "description": "Timestamp marking the start of the codebase parsing.",
                        "codeSnippet": "const startTime = Date.now();",
                        "codeLine": 56,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "parsedCodebase",
                        "type": "variable",
                        "description": "Object representing the parsed codebase.",
                        "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                        "codeLine": 58,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endTime",
                        "type": "variable",
                        "description": "Timestamp marking the end of the documentation generation.",
                        "codeSnippet": "const endTime = Date.now();",
                        "codeLine": 77,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "totalTime",
                        "type": "variable",
                        "description": "Total time taken for the documentation generation process.",
                        "codeSnippet": "const totalTime = endTime - startTime;",
                        "codeLine": 78,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "imports": [
                    {
                        "name": "Command",
                        "type": "import",
                        "description": "Imports the Command class from the 'commander' module, which is used to create command-line interfaces.",
                        "codeSnippet": "import { Command } from \"commander\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "parseCodebase",
                        "type": "import",
                        "description": "Imports the parseCodebase function from the local module './codeParser', which is used to parse the codebase.",
                        "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "import",
                        "description": "Imports the generateDocumentation function from the local module './documentationGenerator', which is used to generate documentation.",
                        "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "fs",
                        "type": "import",
                        "description": "Imports the 'fs' module, which provides an API for interacting with the file system.",
                        "codeSnippet": "import fs from \"fs\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    }
                ],
                "exports": []
            }
        },
        {
            "fileName": "src/documentationGenerator.ts",
            "fileLocation": ".//src/documentationGenerator.ts",
            "codeSummary": {
                "goal": "The code aims to generate documentation for a project by saving the project context to a JSON file and converting it to Markdown format.",
                "features_functions": "The code includes a switch-case block that returns specific emojis based on different cases such as 'comments', 'imports', 'exports', and 'interfaces'. The main function 'generateDocumentation' checks if a folder exists and creates it if it doesn't, ensures the folder is writable, saves the project context to a JSON file, and converts the JSON to Markdown format."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "jsonToMarkdown",
                        "type": "function",
                        "description": "Converts a project summary object into a markdown documentation format and saves it to the specified output folder.",
                        "codeSnippet": "function jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) { ... }",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "The summary of the project including details like project name, description, team context, and code files.",
                                "example": "{ projectName: 'ExampleProject', projectDescription: { goal: '...', features_functions: '...' }, teamContext: '...', codeFiles: [...] }"
                            },
                            {
                                "name": "outputFolder",
                                "type": "string",
                                "description": "The directory where the markdown files will be saved.",
                                "example": "\"./output\""
                            }
                        ],
                        "functionReturns": {
                            "name": "void",
                            "type": "void",
                            "description": "This function does not return a value.",
                            "example": "N/A"
                        }
                    },
                    {
                        "name": "duplicateCheck",
                        "type": "function",
                        "description": "Checks if a given code object is a duplicate based on its name, content, and type.",
                        "codeSnippet": "const duplicateCheck = (obj: CodeObject, type: CodeObjectType): boolean => { ... }",
                        "codeLine": 70,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "obj",
                                "type": "CodeObject",
                                "description": "The code object to check for duplication.",
                                "example": "{ name: 'exampleFunction', codeSnippet: 'function exampleFunction() { ... }', type: 'function' }"
                            },
                            {
                                "name": "type",
                                "type": "CodeObjectType",
                                "description": "The type of the code object (e.g., class, function, variable).",
                                "example": "\"function\""
                            }
                        ],
                        "functionReturns": {
                            "name": "isDuplicate",
                            "type": "boolean",
                            "description": "Returns true if the code object is a duplicate, otherwise false.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "generateCodeObjectContent",
                        "type": "function",
                        "description": "Generates content for a given code object with specified indentation.",
                        "codeSnippet": "function generateCodeObjectContent(codeObject: CodeObject, indent: number): string { ... }",
                        "codeLine": 87,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "codeObject",
                                "type": "CodeObject",
                                "description": "The code object to generate content for.",
                                "example": "{ name: 'example', type: 'function', description: 'An example function', codeSnippet: 'function example() { ... }', codeLine: 10, codeIndent: 2, fileName: 'example.ts', fileLocation: './src/example.ts', isExported: true, isPrivate: false, isAsync: false }"
                            },
                            {
                                "name": "indent",
                                "type": "number",
                                "description": "The level of indentation to apply to the generated content.",
                                "example": 2
                            }
                        ],
                        "functionReturns": {
                            "name": "content",
                            "type": "string",
                            "description": "The generated content for the code object.",
                            "example": "### example - [FUNCTION]\n---\n**Description:** An example function\n**Code Snippet:**\n\nfunction example() { ... }\n```\n- **Line:** 10\n- **Indent:** 2\n- **Location:** example.ts (./src/example.ts)\n- **Exported:** true\n- **Private:** false\n- **Async:** false\n\n"
                        }
                    },
                    {
                        "name": "getEmoji",
                        "type": "function",
                        "description": "Returns an emoji based on the type of code object.",
                        "codeSnippet": "function getEmoji(type: string): string { ... }",
                        "codeLine": 142,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "type",
                                "type": "string",
                                "description": "The type of code object.",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "emoji",
                            "type": "string",
                            "description": "The emoji corresponding to the code object type.",
                            "example": "🔧"
                        }
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "function",
                        "description": "Generates documentation for a project by saving the project context to a JSON file and converting it to Markdown.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "folderPath",
                                "type": "string",
                                "description": "The path to the folder where the documentation will be generated.",
                                "example": "/path/to/folder"
                            },
                            {
                                "name": "projectContext",
                                "type": "ProjectSummary | null",
                                "description": "The project context to be documented. If null, it will be read from the JSON file.",
                                "example": "null"
                            },
                            {
                                "name": "jsonFile",
                                "type": "string",
                                "description": "Optional path to an existing JSON file containing the project context.",
                                "example": "/path/to/projectContext.json"
                            }
                        ],
                        "functionReturns": {
                            "name": "success",
                            "type": "boolean",
                            "description": "Returns true if the documentation was successfully generated, otherwise false.",
                            "example": "true"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "timestamp",
                        "type": "variable",
                        "description": "Current timestamp formatted as a string.",
                        "codeSnippet": "const timestamp = new Date().toISOString().replace(/[:.]/g, '-');",
                        "codeLine": 10,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectFolder",
                        "type": "variable",
                        "description": "Path to the project folder.",
                        "codeSnippet": "const projectFolder = path.join(outputFolder, `${projectSummary.projectName}-${timestamp}`);",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "toc",
                        "type": "variable",
                        "description": "Table of contents as an array of strings.",
                        "codeSnippet": "const toc: string[] = [];",
                        "codeLine": 14,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileName",
                        "type": "variable",
                        "description": "Name of the markdown file for each code file.",
                        "codeSnippet": "const fileName = `${file.fileName}.md`;",
                        "codeLine": 22,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "filePath",
                        "type": "variable",
                        "description": "Path to the markdown file for each code file.",
                        "codeSnippet": "const filePath = path.join(projectFolder, fileName);",
                        "codeLine": 23,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileContent",
                        "type": "variable",
                        "description": "Content of the markdown file for each code file.",
                        "codeSnippet": "let fileContent = `# ${file.fileName} - ${projectSummary.projectName}\n`;",
                        "codeLine": 25,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "sectionLinks",
                        "type": "variable",
                        "description": "Array of section links for the table of contents.",
                        "codeSnippet": "const sectionLinks: string[] = [];",
                        "codeLine": 32,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "sectionContent",
                        "type": "variable",
                        "description": "Object to hold different sections of content.",
                        "codeSnippet": "const sectionContent = {\n    classes: '',\n    functions: '',\n    variables: '',\n    types: '',\n    comments: '',\n    imports: '',\n    exports: '',\n    interfaces: ''\n};",
                        "codeLine": 34,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "duplicateTracking",
                        "type": "variable",
                        "description": "Object to track duplicates of different code objects.",
                        "codeSnippet": "const duplicateTracking: dupTrack = {\n    classes: [],\n    functions: [],\n    variables: [],\n    types: [],\n    comments: [],\n    imports: [],\n    exports: [],\n    interfaces: []\n};",
                        "codeLine": 50,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "duplicateCheck",
                        "type": "variable",
                        "description": "Function to check for duplicates in code objects.",
                        "codeSnippet": "const duplicateCheck = (obj: CodeObject, type: CodeObjectType): boolean => {\n    const objName = obj.name;\n    const objContent = obj.codeSnippet;\n    const objType = obj.type;\n\n    if ((objName || objContent) && objType) {\n        const dupObj = {\n            name: objName,\n            content: objContent,\n            type: objType\n        };\n\n        // Check to see if the object already exists in the duplicate tracking\n        let bFound = false;\n        for (const [section, content] of Object.entries(duplicateTracking)) {\n            const contentObj = content as dupObj[];\n\n            // If the same name and the same type, we will go ahead and omit it\n            const found = contentObj.find((item) => (item.name === objName || item.content === objContent) && item.type === objType);\n\n            if (typeof found !== 'undefined') {\n                bFound = true;\n                break;\n            }\n        }\n\n        if (bFound === true) {\n            return true;\n        }\n\n        switch (type) {\n            case 'class':\n                duplicateTracking.classes.push(dupObj);\n                break;\n            case 'function':\n                duplicateTracking.functions.push(dupObj);\n                break;\n            case 'variable':\n                duplicateTracking.variables.push(dupObj);\n                break;\n            case 'type':\n                duplicateTracking.types.push(dupObj);\n                break;\n            // case 'comment':\n            //     duplicateTracking.comments.push(dupObj);\n            //     break;\n            case 'import':\n                duplicateTracking.imports.push(dupObj);\n                break;\n            case 'export':\n                duplicateTracking.exports.push(dupObj);\n                break;\n            case 'interface':\n                duplicateTracking.interfaces.push(dupObj);\n                break;\n            default:\n                break;\n        }\n\n        return false;\n    }\n\n    return false;\n};",
                        "codeLine": 61,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "baseObject",
                        "type": "variable",
                        "description": "Holds the code objects from the file.",
                        "codeSnippet": "const baseObject = file.codeObjects as any;",
                        "codeLine": 1,
                        "codeIndent": 12,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "obj",
                        "type": "variable",
                        "description": "Holds the array of code objects for a specific key.",
                        "codeSnippet": "const obj = baseObject[key] as any[];",
                        "codeLine": 2,
                        "codeIndent": 12,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileFolder",
                        "type": "variable",
                        "description": "Holds the directory path of the file.",
                        "codeSnippet": "const fileFolder = path.dirname(filePath);",
                        "codeLine": 37,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "tocPath",
                        "type": "variable",
                        "description": "Holds the path to the README.md file in the project folder.",
                        "codeSnippet": "const tocPath = path.join(projectFolder, 'README.md');",
                        "codeLine": 47,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "indentation",
                        "type": "variable",
                        "description": "Holds the indentation string based on the indent level.",
                        "codeSnippet": "const indentation = '  '.repeat(indent);",
                        "codeLine": 53,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fancyBar",
                        "type": "variable",
                        "description": "Holds a decorative string used in the content.",
                        "codeSnippet": "const fancyBar = '---'.repeat(20);",
                        "codeLine": 54,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "folderPath",
                        "type": "variable",
                        "description": "The path to the folder where documentation will be generated.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectContext",
                        "type": "variable",
                        "description": "The context of the project, which can be null.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "jsonFile",
                        "type": "variable",
                        "description": "Optional path to a JSON file.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "timeStamp",
                        "type": "variable",
                        "description": "A timestamp used to create a unique filename.",
                        "codeSnippet": "const timeStamp = new Date().toISOString().replace(/[:.]/g, '-');",
                        "codeLine": 38,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "model",
                        "type": "variable",
                        "description": "The model name used in the filename, defaulting to 'ml'.",
                        "codeSnippet": "const model = process.env.LLM_TO_USE || 'ml';",
                        "codeLine": 39,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectContextPath",
                        "type": "variable",
                        "description": "The path to the project context JSON file.",
                        "codeSnippet": "const projectContextPath = path.join(folderPath, `projectContext-${timeStamp}-${model}.json`);",
                        "codeLine": 40,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "dupObj",
                        "description": "An interface representing a duplicate object with optional name and content, and a mandatory type.",
                        "codeSnippet": "interface dupObj {\n    name?: string;\n    content?: string;\n    type: CodeObjectType;\n}",
                        "codeLine": 38,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "dupTrack",
                        "description": "An interface representing the structure for tracking duplicates across different code object types.",
                        "codeSnippet": "interface dupTrack {\n    classes: dupObj[];\n    functions: dupObj[];\n    variables: dupObj[];\n    types: dupObj[];\n    comments: dupObj[];\n    imports: dupObj[];\n    exports: dupObj[];\n    interfaces: dupObj[];\n}",
                        "codeLine": 45,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "description": "Represents a summary of the project context.",
                        "codeSnippet": "projectContext: ProjectSummary | null = null",
                        "codeLine": 7,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "dupObj",
                        "type": "interface",
                        "description": "Interface for tracking duplicate objects with optional name and content, and a required type.",
                        "codeSnippet": "interface dupObj { name?: string; content?: string; type: CodeObjectType; }",
                        "codeLine": 45,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "dupTrack",
                        "type": "interface",
                        "description": "Interface for tracking duplicates of various code object types.",
                        "codeSnippet": "interface dupTrack { classes: dupObj[]; functions: dupObj[]; variables: dupObj[]; types: dupObj[]; comments: dupObj[]; imports: dupObj[]; exports: dupObj[]; interfaces: dupObj[]; }",
                        "codeLine": 50,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "CodeObject, ProjectSummary, CodeObjectType",
                        "type": "import",
                        "description": "Imports the CodeObject, ProjectSummary, and CodeObjectType types from the local objectSchemas module.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures the dotenv module to load environment variables from a .env file.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "fs",
                        "type": "import",
                        "description": "Node.js File System module used for file operations such as checking existence, creating directories, and writing files.",
                        "codeSnippet": "import fs from 'fs';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "path",
                        "type": "import",
                        "description": "Node.js Path module used for handling and transforming file paths.",
                        "codeSnippet": "import path from 'path';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "generateDocumentation",
                        "type": "export",
                        "description": "Asynchronous function to generate documentation for a given folder path and project context. It ensures the folder path exists and is writable, saves the project context to a JSON file, and converts the JSON to Markdown.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                        "codeLine": 12,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/codeParser.ts",
            "fileLocation": ".//src/codeParser.ts",
            "codeSummary": {
                "goal": "The code checks if a file is too long based on token count or file size.",
                "features_functions": "It reads a file, counts its tokens, and checks if the token count exceeds a maximum limit. If not, it checks if the file size exceeds a maximum size in kilobytes."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "genCodeChunkObj",
                        "type": "function",
                        "description": "Processes each chunk's code objects and updates the project summary.",
                        "codeSnippet": "async function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{ ... }",
                        "codeLine": 32,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "Summary of the project.",
                                "example": "projectSummary"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file being processed.",
                                "example": "'.//src/codeParser.ts'"
                            },
                            {
                                "name": "chunk",
                                "type": "string",
                                "description": "Chunk of code to process.",
                                "example": "chunk"
                            }
                        ],
                        "functionReturns": {
                            "name": "chunkCodeObjects",
                            "type": "CodeObject",
                            "description": "Processed code objects for the chunk.",
                            "example": "chunkCodeObjects"
                        }
                    },
                    {
                        "name": "mergeObjectArrays",
                        "type": "function",
                        "description": "Merges incoming code object's key-array pairs with the existing code object array.",
                        "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                        "codeLine": 73,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "codeObjArray",
                                "type": "CodeObject",
                                "description": "Existing code object array.",
                                "example": "codeObjArray"
                            },
                            {
                                "name": "newCodeObj",
                                "type": "any",
                                "description": "New code object to merge.",
                                "example": "newCodeObj"
                            }
                        ],
                        "functionReturns": {
                            "name": "mergedCodeObj",
                            "type": "CodeObject",
                            "description": "Merged code object array.",
                            "example": "mergedCodeObj"
                        }
                    },
                    {
                        "name": "parseCodebase",
                        "type": "function",
                        "description": "Parses the codebase located at the given project path and generates a summary of the project.",
                        "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                        "codeLine": 30,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "The path to the project directory or file.",
                                "example": "/path/to/project"
                            },
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project.",
                                "example": "MyProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "projectSummary",
                            "type": "ProjectSummary",
                            "description": "A summary of the project including its name, description, location, code files, and other metadata.",
                            "example": {
                                "projectName": "MyProject",
                                "projectDescription": {},
                                "projectLocation": "/path/to/project",
                                "codeFiles": [],
                                "ragData": [],
                                "teamContext": ""
                            }
                        }
                    },
                    {
                        "name": "getIgnoredFiles",
                        "type": "function",
                        "description": "Reads and returns a list of file patterns to ignore based on .gitignore and .fofoignore files in various paths.",
                        "codeSnippet": "async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }",
                        "codeLine": 88,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "The path of the project to check for ignore files.",
                                "example": "/path/to/project"
                            }
                        ],
                        "functionReturns": {
                            "name": "ignorePatterns",
                            "type": "string[]",
                            "description": "An array of file patterns to ignore.",
                            "example": [
                                "node_modules",
                                "dist"
                            ]
                        }
                    },
                    {
                        "name": "getFileSizeInKB",
                        "type": "function",
                        "description": "Returns the size of a file in kilobytes.",
                        "codeSnippet": "async function getFileSizeInKB(filePath: string): Promise<number> { ... }",
                        "codeLine": 123,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path of the file to check the size of.",
                                "example": "/path/to/file.txt"
                            }
                        ],
                        "functionReturns": {
                            "name": "fileSize",
                            "type": "number",
                            "description": "The size of the file in kilobytes.",
                            "example": 1024
                        }
                    },
                    {
                        "name": "isFileTooLarge",
                        "type": "function",
                        "description": "Checks if a file is too large based on its size in kilobytes and the number of characters.",
                        "codeSnippet": "async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars: number = 300): Promise<boolean> { ... }",
                        "codeLine": 128,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path of the file to check.",
                                "example": "/path/to/file.txt"
                            },
                            {
                                "name": "maxFileSizeKB",
                                "type": "number",
                                "description": "The maximum file size in kilobytes.",
                                "example": 1024
                            },
                            {
                                "name": "maxChars",
                                "type": "number",
                                "description": "The maximum number of characters allowed in the file.",
                                "example": 300
                            }
                        ],
                        "functionReturns": {
                            "name": "isTooLarge",
                            "type": "boolean",
                            "description": "Whether the file is too large.",
                            "example": true
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "llmToUse",
                        "type": "variable",
                        "description": "Specifies the language model to use, retrieved from environment variables.",
                        "codeSnippet": "const llmToUse = process.env.LLM_TO_USE || undefined;",
                        "codeLine": 23,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "breakNum",
                        "type": "variable",
                        "description": "Specifies the maximum token split value, retrieved from environment variables or defaults to 400.",
                        "codeSnippet": "const breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;",
                        "codeLine": 24,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "objectKeys",
                        "type": "variable",
                        "description": "An array of code object types to be processed.",
                        "codeSnippet": "const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'imports', 'exports']",
                        "codeLine": 30,
                        "codeIndent": 1,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chunkCodeObjectsAny",
                        "type": "variable",
                        "description": "An object to store the code objects for each chunk.",
                        "codeSnippet": "const chunkCodeObjectsAny = {} as any;",
                        "codeLine": 31,
                        "codeIndent": 1,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "promptTemplate",
                        "type": "variable",
                        "description": "A template string for generating prompts based on the type of code object.",
                        "codeSnippet": "let promptTemplate = \"\"",
                        "codeLine": 34,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "mergedCodeObj",
                        "type": "variable",
                        "description": "An object to store the merged code objects.",
                        "codeSnippet": "const mergedCodeObj: any = codeObjArray;",
                        "codeLine": 71,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "mergedCodeKeys",
                        "type": "variable",
                        "description": "An array of keys from the merged code objects.",
                        "codeSnippet": "const mergedCodeKeys = Object.keys(mergedCodeObj);",
                        "codeLine": 86,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "foundKeys",
                        "type": "variable",
                        "description": "An array to store unique keys found in the merged code object.",
                        "codeSnippet": "const foundKeys: string[] = [];",
                        "codeLine": 1,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectSummary",
                        "type": "variable",
                        "description": "An object to store the summary of the project being parsed.",
                        "codeSnippet": "const projectSummary: ProjectSummary = { projectName: projectName, projectDescription: {} as codeSummary, projectLocation: projectPath, codeFiles: [], ragData: [], teamContext: \"\", };",
                        "codeLine": 27,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "filePaths",
                        "type": "variable",
                        "description": "An array to store the paths of the files to be parsed.",
                        "codeSnippet": "let filePaths: string[] = [];",
                        "codeLine": 41,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fullFilePath",
                        "type": "variable",
                        "description": "A variable to store the full path of the file being parsed.",
                        "codeSnippet": "const fullFilePath = `${projectPath}/${filePath}`;",
                        "codeLine": 71,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileLanguage",
                        "type": "variable",
                        "description": "A variable to store the inferred language of the file being parsed.",
                        "codeSnippet": "const fileLanguage = await infer( getLanguageTypeFromFile(fullFilePath), \"TEXT STRING\", \"language\", false, undefined, undefined, llmToUse );",
                        "codeLine": 74,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeFileSummary",
                        "type": "variable",
                        "description": "An object to store the summary of the code file being parsed.",
                        "codeSnippet": "const codeFileSummary: CodeFileSummary = { fileName: filePath, fileLocation: fullFilePath, codeSummary: {} as codeSummary, language: fileLanguage.language || \"Unknown\", executionFlow: [], codeObjects: {} as CodeObject, };",
                        "codeLine": 79,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentLine",
                        "type": "variable",
                        "description": "A variable to keep track of the current line number while parsing the file.",
                        "codeSnippet": "let currentLine = 0;",
                        "codeLine": 86,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endLine",
                        "type": "variable",
                        "description": "The ending line number of the current code chunk.",
                        "codeSnippet": "const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end;",
                        "codeLine": 5,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chunkCodeObjects",
                        "type": "variable",
                        "description": "The code objects generated from the current code chunk.",
                        "codeSnippet": "const chunkCodeObjects = await genCodeChunkObj(projectSummary, fullFilePath, chunk);",
                        "codeLine": 7,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileContent",
                        "type": "variable",
                        "description": "The content of the file read as a string.",
                        "codeSnippet": "const fileContent = await readFile(fullFilePath, \"utf-8\");",
                        "codeLine": 25,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeObjects",
                        "type": "variable",
                        "description": "The code objects generated from the entire file content.",
                        "codeSnippet": "const codeObjects = await genCodeChunkObj(projectSummary, fullFilePath, fileContent);",
                        "codeLine": 26,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeDescription",
                        "type": "variable",
                        "description": "A string that accumulates the code summaries of all code files.",
                        "codeSnippet": "let codeDescription = '';",
                        "codeLine": 48,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "basePath",
                        "type": "variable",
                        "description": "The base path of the project directory.",
                        "codeSnippet": "const basePath = projectPath.split(\"/\").slice(0, -1).join(\"/\");",
                        "codeLine": 75,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "executionPath",
                        "type": "variable",
                        "description": "The current working directory of the process.",
                        "codeSnippet": "const executionPath = process.cwd();",
                        "codeLine": 76,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "pathsToCheck",
                        "type": "variable",
                        "description": "An array of file paths to check for ignore patterns.",
                        "codeSnippet": "const pathsToCheck = [ `${basePath}/.gitignore`, `${basePath}/.fofoignore`, `${executionPath}/.gitignore`, `${executionPath}/.fofoignore`, ];",
                        "codeLine": 80,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fofoignoreContent",
                        "type": "variable",
                        "description": "The content of the .fofoignore file read as a string.",
                        "codeSnippet": "const fofoignoreContent = await readFile( path, \"utf-8\" );",
                        "codeLine": 87,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "gitignoreContent",
                        "type": "variable",
                        "description": "The content of the .gitignore file read as a string.",
                        "codeSnippet": "const gitignoreContent = await readFile( path, \"utf-8\" );",
                        "codeLine": 95,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "tooLong",
                        "type": "variable",
                        "description": "Indicates if the number of tokens in the file exceeds the maximum allowed characters",
                        "codeSnippet": "const tooLong = getTokens(file) > maxChars;",
                        "codeLine": 3,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "ProjectSummary",
                        "description": "Represents a summary of the project including its name, description, location, code files, RAG data, and team context.",
                        "codeSnippet": "type ProjectSummary = { projectName: string; projectDescription: codeSummary; projectLocation: string; codeFiles: CodeFileSummary[]; ragData: any[]; teamContext: string; };",
                        "codeLine": 42,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "description": "Represents a summary of a code file including its name, location, code summary, language, execution flow, and code objects.",
                        "codeSnippet": "type CodeFileSummary = { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: any[]; codeObjects: CodeObject; };",
                        "codeLine": 69,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "RagData",
                        "description": "Represents the structure for storing metadata and document data for a code chunk.",
                        "codeSnippet": "const ragData: RagData = { ... };",
                        "codeLine": 10,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "interfaces": [],
                "imports": [
                    {
                        "name": "readFile",
                        "type": "import",
                        "description": "Imports the 'readFile' function from 'fs/promises' for reading files asynchronously.",
                        "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "stat",
                        "type": "import",
                        "description": "Imports the 'stat' function from 'fs/promises' for retrieving file status asynchronously.",
                        "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "import",
                        "description": "Imports the 'CodeFileSummary' type from './objectSchemas'.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "import",
                        "description": "Imports the 'CodeObject' type from './objectSchemas'.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "import",
                        "description": "Imports the 'CodeObjects' type from './objectSchemas'.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "import",
                        "description": "Imports the 'ProjectSummary' type from './objectSchemas'.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "import",
                        "description": "Imports the 'RagData' type from './objectSchemas'.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "import",
                        "description": "Imports the 'codeSummary' function from './objectSchemas'.",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "infer",
                        "type": "import",
                        "description": "Imports the 'infer' function from './llmInterface'.",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "callLLM",
                        "type": "import",
                        "description": "Imports the 'callLLM' function from './llmInterface'.",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "import",
                        "description": "Imports the 'getCodeSummaryFromLLM' function from './llmInterface'.",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "import",
                        "description": "Imports the 'getLanguageTypeFromFile' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "classesPrompt",
                        "type": "import",
                        "description": "Imports the 'classesPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "import",
                        "description": "Imports the 'functionsPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "import",
                        "description": "Imports the 'variablesPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "typesPrompt",
                        "type": "import",
                        "description": "Imports the 'typesPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "import",
                        "description": "Imports the 'interfacesPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "importsPrompt",
                        "type": "import",
                        "description": "Imports the 'importsPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "import",
                        "description": "Imports the 'exportsPrompt' function from './prompt'.",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "import",
                        "description": "Imports the 'saveToVectorDatabase' function from './vectorDB'.",
                        "codeSnippet": "import { saveToVectorDatabase } from \"./vectorDB\";",
                        "codeLine": 6,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "import",
                        "description": "Imports the 'breakCodeIntoChunks' function from './shared'.",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getFileContentLen",
                        "type": "import",
                        "description": "Imports the 'getFileContentLen' function from './shared'.",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "import",
                        "description": "Imports the 'getTokens' function from './shared'.",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports the 'dotenv/config' module to load environment variables from a .env file.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "mergeObjectArrays",
                        "type": "export",
                        "description": "Function to merge incoming code objects with existing code objects, handling both new and existing keys.",
                        "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                        "codeLine": 67,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "parseCodebase",
                        "type": "export",
                        "description": "Asynchronously parses the codebase at the given project path and returns a summary of the project.",
                        "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ]
            }
        }
    ],
    "ragData": [
        {
            "metadata": {
                "filename": ".//src/vectorDB.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 147,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "load_create_collection",
                            "type": "function",
                            "description": "Loads an existing collection or creates a new one if it doesn't exist.",
                            "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                            "codeLine": 40,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project for which the collection is being loaded or created.",
                                    "example": "exampleProject"
                                }
                            ],
                            "functionReturns": {
                                "name": "collection",
                                "type": "Collection | void",
                                "description": "The collection object if found or created, otherwise void.",
                                "example": "Collection { name: 'exampleProject', ... }"
                            }
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "type": "function",
                            "description": "Saves data to the vector database.",
                            "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                            "codeLine": 78,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project for which the data is being saved.",
                                    "example": "exampleProject"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be saved in the vector database.",
                                    "example": "const x = 10;"
                                },
                                {
                                    "name": "ragData",
                                    "type": "RagData",
                                    "description": "The RAG data associated with the code.",
                                    "example": "{ metadata: { filename: 'example.ts', codeChunkId: '123' }, ... }"
                                }
                            ],
                            "functionReturns": {
                                "name": "bOK",
                                "type": "boolean",
                                "description": "Returns true if the data is saved successfully, otherwise false.",
                                "example": "true"
                            }
                        },
                        {
                            "name": "searchRAG",
                            "type": "function",
                            "description": "Searches the RAG data in the vector database.",
                            "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                            "codeLine": 101,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project for which the search is being performed.",
                                    "example": "exampleProject"
                                },
                                {
                                    "name": "searchString",
                                    "type": "string",
                                    "description": "The search string used to query the RAG data.",
                                    "example": "example search"
                                }
                            ],
                            "functionReturns": {
                                "name": "ragData",
                                "type": "RagData",
                                "description": "The RAG data that matches the search query.",
                                "example": "{ metadata: { filename: 'example.ts', codeChunkId: '123' }, ... }"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "apiPass",
                            "type": "variable",
                            "description": "API password retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const apiPass = process.env.API_PASS || \"\";",
                            "codeLine": 9,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "apiUser",
                            "type": "variable",
                            "description": "API user retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const apiUser = process.env.API_USER || \"\";",
                            "codeLine": 10,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "geminiKey",
                            "type": "variable",
                            "description": "Gemini API key retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const geminiKey = process.env.GEMINI_KEY || \"\";",
                            "codeLine": 11,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "apiURL",
                            "type": "variable",
                            "description": "API URL retrieved from environment variables or an empty string if not set.",
                            "codeSnippet": "const apiURL = process.env.API_URL || \"\";",
                            "codeLine": 12,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "embedderMode",
                            "type": "variable",
                            "description": "Embedder mode retrieved from environment variables or defaults to 'GCP'.",
                            "codeSnippet": "const embedderMode = process.env.EMBEDDER_MODE || \"GCP\";",
                            "codeLine": 18,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "embedder",
                            "type": "variable",
                            "description": "Embedder function initialized based on the embedder mode.",
                            "codeSnippet": "let embedder: any | undefined = undefined;",
                            "codeLine": 20,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "chromaSettings",
                            "type": "variable",
                            "description": "Settings for ChromaClient, currently set to undefined.",
                            "codeSnippet": "const chromaSettings = undefined;",
                            "codeLine": 42,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "client",
                            "type": "variable",
                            "description": "Instance of ChromaClient initialized with chromaSettings.",
                            "codeSnippet": "const client = new ChromaClient(chromaSettings);",
                            "codeLine": 44,
                            "codeIndent": 1,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "name",
                            "type": "variable",
                            "description": "Name of the project collection.",
                            "codeSnippet": "const name = projectName;",
                            "codeLine": 49,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "collection",
                            "type": "variable",
                            "description": "Collection object for the project, can be undefined.",
                            "codeSnippet": "let collection: Collection | void;",
                            "codeLine": 50,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "hb",
                            "type": "variable",
                            "description": "Heartbeat response from the database client.",
                            "codeSnippet": "const hb = await client.heartbeat().catch((err: any) => {",
                            "codeLine": 52,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "bOK",
                            "type": "variable",
                            "description": "Boolean flag indicating the success of the saveToVectorDatabase function.",
                            "codeSnippet": "let bOK = true;",
                            "codeLine": 83,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "searchEmbeddings",
                            "type": "variable",
                            "description": "Embeddings generated for the search string.",
                            "codeSnippet": "const searchEmbeddings = await embedder.generate([searchString]);",
                            "codeLine": 108,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "searchResults",
                            "type": "variable",
                            "description": "Results from querying the collection with search embeddings.",
                            "codeSnippet": "const searchResults = await collection.query({",
                            "codeLine": 109,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ragData",
                            "type": "variable",
                            "description": "RAG data object constructed from search results metadata.",
                            "codeSnippet": "const ragData = {",
                            "codeLine": 114,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "ProjectSummary",
                            "description": "Represents a summary of a project.",
                            "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "RagData",
                            "description": "Represents RAG (Retrieval-Augmented Generation) data.",
                            "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "ChromaClient",
                            "description": "Client for interacting with Chroma database.",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "GoogleGenerativeAiEmbeddingFunction",
                            "description": "Function for generating embeddings using Google Generative AI.",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "OpenAIEmbeddingFunction",
                            "description": "Function for generating embeddings using OpenAI.",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "Collection",
                            "description": "Represents a collection in the Chroma database.",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection, } from \"chromadb\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "ProjectSummary, RagData",
                            "type": "import",
                            "description": "Imports the ProjectSummary and RagData types from the local objectSchemas module.",
                            "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports and configures the dotenv module to load environment variables from a .env file.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection",
                            "type": "import",
                            "description": "Imports ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, and Collection from the chromadb module.",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from \"chromadb\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "load_create_collection",
                            "type": "function",
                            "description": "Asynchronously loads or creates a collection in the Chroma database based on the provided project name.",
                            "codeSnippet": "export async function load_create_collection(projectName: string): Promise<Collection | void> { ... }",
                            "codeLine": 32,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "type": "function",
                            "description": "Asynchronously saves data to the vector database for a given project name, code, and RAG data.",
                            "codeSnippet": "export async function saveToVectorDatabase(projectName: string, code: string, ragData: RagData): Promise<boolean> { ... }",
                            "codeLine": 70,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        },
                        {
                            "name": "searchRAG",
                            "type": "function",
                            "description": "Asynchronously searches the RAG data in the vector database for a given project name and search string.",
                            "codeSnippet": "export async function searchRAG(projectName: string, searchString: string): Promise<RagData> { ... }",
                            "codeLine": 93,
                            "codeIndent": 0,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts"
                        }
                    ]
                }
            },
            "documentData": "import { ProjectSummary, RagData } from \"./objectSchemas\";\nimport \"dotenv/config\";\nimport {\n  ChromaClient,\n  GoogleGenerativeAiEmbeddingFunction,\n  OpenAIEmbeddingFunction,\n  Collection,\n} from \"chromadb\";\n\nconst apiPass = process.env.API_PASS || \"\";\nconst apiUser = process.env.API_USER || \"\";\nconst geminiKey = process.env.GEMINI_KEY || \"\";\nconst apiURL = process.env.API_URL || \"\";\n\n// Check to see if any of the environment variables are missing\nif (!apiPass || !apiUser || !geminiKey || !apiURL) {\n  console.error(\"Missing environment variables - Please check your .env file\");\n  process.exit(1);\n}\n\nconst embedderMode = process.env.EMBEDDER_MODE || \"GCP\";\n\nlet embedder: any | undefined = undefined;\n\nswitch (embedderMode) {\n  case \"GCP\":\n    embedder = new GoogleGenerativeAiEmbeddingFunction({\n      googleApiKey: geminiKey,\n    });\n    break;\n  case \"OpenAI\":\n    embedder = new OpenAIEmbeddingFunction({\n      openai_api_key: process.env.OPENAI_API_KEY || \"\",\n      openai_organization_id: process.env.OPENAI_ORG_ID || \"\",\n      openai_model: \"text-embedding-3-small\",\n    });\n    break;\n  default:\n    embedder = new GoogleGenerativeAiEmbeddingFunction({\n      googleApiKey: geminiKey,\n    });\n}\n\n// const chromaSettings = {\n//     path: apiURL,\n//       \"auth\": {\n//           provider: \"basic\", credentials: `${apiUser}:${apiPass}`\n//           }\n//     }\n\nconst chromaSettings = undefined;\n\nconst client = new ChromaClient(chromaSettings);\n\nexport async function load_create_collection(\n  projectName: string\n): Promise<Collection | void> {\n  const name = projectName;\n  let collection: Collection | void;\n\n  const hb = await client.heartbeat().catch((err: any) => {\n    console.log(\"Error connecting to database\");\n    console.error(err);\n  });\n\n  console.log(\"Heartbeat for Database:\");\n  console.log(hb);\n\n  try {\n    collection = await client.getCollection({\n      name: name,\n      embeddingFunction: embedder,\n    });\n    if (collection instanceof Collection && \"name\" in collection) {\n      return collection;\n    }\n  } catch (err) {\n    console.log(\"Collection not found, creating collection\");\n  }\n\n  collection = await client\n    .createCollection({ name: name, embeddingFunction: embedder })\n    .catch((err: any) => {\n      console.log(\"Error creating collection\");\n      console.error(err);\n    });\n\n  return collection;\n}\n\nexport async function saveToVectorDatabase(\n  projectName: string,\n  code: string,\n  ragData: RagData\n): Promise<boolean> {\n  let bOK = true;\n\n  return bOK; // TODO: Implement this function fully\n\n//   const meta = ragData.metadata as any;\n\n//   const filename = meta.filename;\n\n//   delete meta.codeObjects;\n\n//   const collection = await load_create_collection(`${projectName}`);\n\n//   const embeddings = await embedder.generate([code]);\n//   console.log(embeddings);\n\n//   if (!collection) {\n//     console.error(\"Error creating collection\");\n//     return false;\n//   }\n\n//   const res = await collection.add({\n//     ids: [`${projectName}-${filename}-${ragData.metadata.codeChunkId}`],\n//     documents: [code],\n//     embeddings: embeddings,\n//     metadatas: [meta],\n//   });\n\n//   console.log(\"Saved to Vector Database:\");\n//   console.log(res);\n\n//   return true;\n}\nexport async function searchRAG(\n  projectName: string,\n  searchString: string\n): Promise<RagData> {\n  const collection = await load_create_collection(projectName);\n  if (!collection) {\n    console.error(\"Error creating collection\");\n    return {} as RagData;\n  }\n  const searchEmbeddings = await embedder.generate([searchString]);\n  const searchResults = await collection.query({\n    queryEmbeddings: searchEmbeddings,\n  });\n\n  console.log(\"Search Results for RAG:\");\n  console.log(searchResults);\n\n  const ragData = {\n    metadata: (searchResults.metadatas[0] as any) || {},\n"
        },
        {
            "metadata": {
                "filename": ".//src/vectorDB.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 147,
                "codeChunkLineEnd": 158,
                "codeObjects": {
                    "classes": [],
                    "functions": [],
                    "variables": [
                        {
                            "name": "embeddings",
                            "type": "variable",
                            "description": "Holds the embeddings from searchResults if available, otherwise an empty object.",
                            "codeSnippet": "embeddings: searchResults.embeddings ? ([0] as any) : {},",
                            "codeLine": 1,
                            "codeIndent": 4,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "documentData",
                            "type": "variable",
                            "description": "Holds the first document from searchResults if available, otherwise an empty array.",
                            "codeSnippet": "documentData: (searchResults.documents[0] as any) || [],",
                            "codeLine": 2,
                            "codeIndent": 4,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ragData",
                            "type": "variable",
                            "description": "An object containing embeddings and document data.",
                            "codeSnippet": "const ragData = {",
                            "codeLine": 0,
                            "codeIndent": 2,
                            "fileName": "vectorDB.ts",
                            "fileLocation": ".//src/vectorDB.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [],
                    "exports": []
                }
            },
            "documentData": "    embeddings: searchResults.embeddings ? ([0] as any) : {},\n    documentData: (searchResults.documents[0] as any) || [],\n  };\n\n  console.log(\"RAG Data:\");\n  console.log(ragData);\n\n  return ragData;\n}\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/shared.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getFileContentLen",
                            "type": "function",
                            "description": "Asynchronously reads a file and returns the length of its content.",
                            "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path to the file to be read.",
                                    "example": "example/path/to/file.txt"
                                }
                            ],
                            "functionReturns": {
                                "name": "length",
                                "type": "number",
                                "description": "The length of the file content.",
                                "example": 123
                            }
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "type": "function",
                            "description": "Breaks a given code string into chunks of specified token size.",
                            "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code string to be broken into chunks.",
                                    "example": "const a = 1;\\nconst b = 2;"
                                },
                                {
                                    "name": "chunkSize",
                                    "type": "number",
                                    "description": "The maximum token size for each chunk.",
                                    "example": 10
                                }
                            ],
                            "functionReturns": {
                                "name": "chunks",
                                "type": "string[]",
                                "description": "An array of code chunks.",
                                "example": [
                                    "const a = 1;\\n",
                                    "const b = 2;\\n"
                                ]
                            }
                        },
                        {
                            "name": "getTokens",
                            "type": "function",
                            "description": "Counts the number of tokens in a given code string.",
                            "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                            "codeLine": 28,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code string to be tokenized.",
                                    "example": "const a = 1;"
                                }
                            ],
                            "functionReturns": {
                                "name": "tokenCount",
                                "type": "number",
                                "description": "The number of tokens in the code string.",
                                "example": 4
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "codeByLine",
                            "type": "variable",
                            "description": "Array of strings, each representing a line of the input code.",
                            "codeSnippet": "const codeByLine = code.split('\\n');",
                            "codeLine": 9,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "chunks",
                            "type": "variable",
                            "description": "Array to hold the chunks of code.",
                            "codeSnippet": "const chunks = [];",
                            "codeLine": 10,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "currentChunk",
                            "type": "variable",
                            "description": "String to accumulate the current chunk of code.",
                            "codeSnippet": "let currentChunk = '';",
                            "codeLine": 11,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "currentChunkTokenCount",
                            "type": "variable",
                            "description": "Counter for the number of tokens in the current chunk.",
                            "codeSnippet": "let currentChunkTokenCount = 0;",
                            "codeLine": 12,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "line",
                            "type": "variable",
                            "description": "Current line of code being processed.",
                            "codeSnippet": "for (const line of codeByLine) {",
                            "codeLine": 14,
                            "codeIndent": 1,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "lineTokenCount",
                            "type": "variable",
                            "description": "Approximate token count of the current line by splitting on whitespace.",
                            "codeSnippet": "const lineTokenCount = line.split(/\\s+/).length;",
                            "codeLine": 15,
                            "codeIndent": 2,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "readFile",
                            "type": "import",
                            "description": "Imports the readFile function from the 'fs/promises' module, which provides a way to read files asynchronously.",
                            "codeSnippet": "import { readFile } from 'fs/promises';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "getFileContentLen",
                            "type": "export",
                            "description": "Asynchronously reads a file and returns the length of its content.",
                            "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { ... }",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "type": "export",
                            "description": "Splits the given code into chunks of specified token size.",
                            "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { ... }",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "export",
                            "description": "Returns the number of tokens in the given code.",
                            "codeSnippet": "export function getTokens(code: string): number { ... }",
                            "codeLine": 31,
                            "codeIndent": 0,
                            "fileName": "shared.ts",
                            "fileLocation": ".//src/shared.ts"
                        }
                    ]
                }
            },
            "documentData": "import { readFile } from 'fs/promises';\n\n\nexport async function getFileContentLen(filePath: string): Promise<number> {\n    return await readFile(filePath, 'utf-8').then(content => content.length);\n}\n\nexport function breakCodeIntoChunks(code: string, chunkSize: number): string[] {\n    const codeByLine = code.split('\\n');\n    const chunks = [];\n    let currentChunk = '';\n    let currentChunkTokenCount = 0;\n\n    for (const line of codeByLine) {\n        const lineTokenCount = line.split(/\\s+/).length; // Approximate token count by splitting on whitespace\n\n        if (currentChunkTokenCount + lineTokenCount <= chunkSize) {\n            currentChunk += line + '\\n';\n            currentChunkTokenCount += lineTokenCount;\n        } else {\n            chunks.push(currentChunk);\n            currentChunk = line + '\\n';\n            currentChunkTokenCount = lineTokenCount;\n        }\n    }\n\n    if (currentChunk) {\n        chunks.push(currentChunk);\n    }\n\n    return chunks;\n}\n\nexport function getTokens(code: string): number {\n    return code.split(' ').length\n}"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 126,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "generalPrompt",
                            "type": "function",
                            "description": "Generates a prompt string for identifying and describing code objects in a given code snippet.",
                            "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "Context of the project and team.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "Previously parsed relevant code.",
                                    "example": "Relevant Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file containing the code snippet.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet to be analyzed.",
                                    "example": "code snippet here"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "Type of code objects to identify (e.g., functions, classes).",
                                    "example": "functions"
                                }
                            ],
                            "functionReturns": {
                                "name": "promptString",
                                "type": "string",
                                "description": "Generated prompt string.",
                                "example": "Generated prompt string here"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "codeSummary",
                            "type": "variable",
                            "description": "A constant string that contains a template for summarizing code in markdown format.",
                            "codeSnippet": "export const codeSummary = `...`;",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false
                        },
                        {
                            "name": "generalPrompt",
                            "type": "variable",
                            "description": "A constant function that generates a prompt string based on provided context, relevant code, file path, code snippet, and type.",
                            "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... };",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileName",
                            "type": "variable",
                            "description": "A constant string that represents the name of the file extracted from the file path.",
                            "codeSnippet": "const fileName = filePath.split('/').pop();",
                            "codeLine": 6,
                            "codeIndent": 1,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "CodeObjects",
                            "type": "import",
                            "description": "Imports the CodeObjects type from the objectSchemas module.",
                            "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "codeSummary",
                            "type": "export",
                            "description": "A constant string template for creating a summary of code in markdown format.",
                            "codeSnippet": "export const codeSummary = `...`",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        }
                    ]
                }
            },
            "documentData": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\\n\\n1. The app... etc\n`\nimport { CodeObjects } from \"./objectSchemas\";\nconst generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => {\n    const fileName = filePath.split('/').pop();\n    return`\nYou will be asked to provide a JSON object that contains the identified ${type} objects in the code snippet attached at the bottom of this request.\n\n## Context\n- Project and Team Context: \n${context}\n\n## Previously Parsed Code\n- Relevant Code:\n${relevantCode}\n\n## Task\nIn the following code snippet, please identify and described all of the ${type} objects. ONLY focus on the ${type} objects and their descriptions. DO NOT add or implement new code.\n\nIF no ${type} objects are found, please respond with an empty JSON object:\n\n{\n    \"${type}\": []\n}\n\n## Response Format\nRespond ONLY with a JSON object containing the identified ${type} objects and their descriptions. Here is an example of the required format:\n\n${type === 'classes' ? `\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"type\": \"class\",\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"subObjects\": []\n        }\n    ]\n}` : type === 'functions' ? `\n{\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"type\": \"function\",\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"isExported\": false,\n            \"isPrivate\": false,\n            \"isAsync\": false\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"name\": \"returnVal1\",\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ]\n}` : type === 'variables' ? `\n{\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"type\": \"variable\",\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"isExported\": false,\n            \"isPrivate\": false\n        }\n    ]\n}` : type === 'types' ? `\n{\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'interfaces' ? `\n{\n    \"interfaces\": [\n        {\n            \"name\": \"InterfaceName\",\n            \"type\": \"interface\",\n            \"description\": \"Description of the interface\",\n            \"codeSnippet\": \"interface InterfaceName { ... }\",\n            \"codeLine\": 65,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` \n// : type === 'comments' ? `\n// {\n//     \"comments\": [\n//         {\n"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 126,
                "codeChunkLineEnd": 196,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "classesPrompt",
                            "type": "function",
                            "description": "Generates a prompt for classes based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                            "codeLine": 50,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "classes"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for classes"
                            }
                        },
                        {
                            "name": "functionsPrompt",
                            "type": "function",
                            "description": "Generates a prompt for functions based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                            "codeLine": 52,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "functions"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for functions"
                            }
                        },
                        {
                            "name": "variablesPrompt",
                            "type": "function",
                            "description": "Generates a prompt for variables based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                            "codeLine": 54,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "variables"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for variables"
                            }
                        },
                        {
                            "name": "typesPrompt",
                            "type": "function",
                            "description": "Generates a prompt for types based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                            "codeLine": 56,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "types"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for types"
                            }
                        },
                        {
                            "name": "interfacesPrompt",
                            "type": "function",
                            "description": "Generates a prompt for interfaces based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                            "codeLine": 58,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "interfaces"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for interfaces"
                            }
                        },
                        {
                            "name": "importsPrompt",
                            "type": "function",
                            "description": "Generates a prompt for imports based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                            "codeLine": 62,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "imports"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for imports"
                            }
                        },
                        {
                            "name": "exportsPrompt",
                            "type": "function",
                            "description": "Generates a prompt for exports based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                            "codeLine": 64,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "context",
                                    "type": "string",
                                    "description": "The context for generating the prompt.",
                                    "example": "Project and Team Context"
                                },
                                {
                                    "name": "relevantCode",
                                    "type": "string",
                                    "description": "The relevant code for generating the prompt.",
                                    "example": "Previously Parsed Code"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path for generating the prompt.",
                                    "example": ".//src/prompt.ts"
                                },
                                {
                                    "name": "codeSnippet",
                                    "type": "string",
                                    "description": "The code snippet for generating the prompt.",
                                    "example": "codeSnippet"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjects",
                                    "description": "The type of code object for generating the prompt.",
                                    "example": "exports"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The generated prompt.",
                                "example": "Generated prompt for exports"
                            }
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "type": "function",
                            "description": "Guesses the programming language based on the file name and path.",
                            "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}\n    \n    Please respond with JUST the language name. For example: JavaScript\n    `\n}",
                            "codeLine": 66,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path to guess the programming language from.",
                                    "example": ".//src/prompt.ts"
                                }
                            ],
                            "functionReturns": {
                                "name": "returnVal1",
                                "type": "string",
                                "description": "The guessed programming language.",
                                "example": "JavaScript"
                            }
                        }
                    ],
                    "variables": [],
                    "types": [],
                    "interfaces": [],
                    "imports": [],
                    "exports": [
                        {
                            "name": "classesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for classes based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                            "codeLine": 70,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "functionsPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for functions based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                            "codeLine": 71,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "variablesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for variables based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                            "codeLine": 72,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "typesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for types based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                            "codeLine": 73,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "interfacesPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for interfaces based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                            "codeLine": 74,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "importsPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for imports based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                            "codeLine": 77,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "exportsPrompt",
                            "type": "export",
                            "description": "A function that generates a prompt for exports based on the provided context, relevant code, file path, and code snippet.",
                            "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                            "codeLine": 78,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "type": "export",
                            "description": "A function that guesses the programming language based on the file name and path.",
                            "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): ${filePath} Please respond with JUST the language name. For example: JavaScript ` }",
                            "codeLine": 81,
                            "codeIndent": 0,
                            "fileName": "prompt.ts",
                            "fileLocation": ".//src/prompt.ts"
                        }
                    ]
                }
            },
            "documentData": "//             \"content\": \"This is a comment\",\n//             type: \"comment\",\n//             \"codeLine\": 50,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\"\n//         }\n//     ]\n// }` \n: type === 'imports' ? `\n{\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"type\": \"import\",\n            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\",\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'exports' ? `\n{\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"type\": \"export\",\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : ''\n}\n\n## Code Snippet for file: ${fileName}\n- File Path: ${filePath}\n${codeSnippet}\n`}\n\nexport const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');\n\nexport const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');\n\nexport const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');\n\nexport const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');\n\nexport const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');\n\n// export const commentsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'comments');\n\nexport const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');\n\nexport const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');\n\nexport const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}\n    \n    Please respond with JUST the language name. For example: JavaScript\n    `\n\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/objectSchemas.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0,
                "codeObjects": {
                    "classes": [],
                    "functions": [],
                    "variables": [],
                    "types": [
                        {
                            "name": "CodeObjectType",
                            "description": "A union type representing different kinds of code objects.",
                            "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "description": "A union type representing different collections of code objects.",
                            "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjectTypes",
                            "description": "A union type representing different properties of a CodeObject.",
                            "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                            "codeLine": 47,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        }
                    ],
                    "interfaces": [
                        {
                            "name": "ProjectSummary",
                            "type": "interface",
                            "description": "Interface representing a summary of a project.",
                            "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "models",
                            "type": "interface",
                            "description": "Interface representing a model with a name and the model itself.",
                            "codeSnippet": "export interface models { name: string, model: any, }",
                            "codeLine": 13,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "modelServiceConfig",
                            "type": "interface",
                            "description": "Interface representing the configuration for a model service.",
                            "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                            "codeLine": 16,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "RagData",
                            "type": "interface",
                            "description": "Interface representing RAG data with metadata and optional embeddings.",
                            "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                            "codeLine": 20,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "codeSummary",
                            "type": "interface",
                            "description": "Interface representing a summary of code with goal and features/functions.",
                            "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                            "codeLine": 29,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeFileSummary",
                            "type": "interface",
                            "description": "Interface representing a summary of a code file.",
                            "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                            "codeLine": 32,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "ExecutionFlow",
                            "type": "interface",
                            "description": "Interface representing the execution flow of a code file.",
                            "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                            "codeLine": 39,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "FunctionParameter",
                            "type": "interface",
                            "description": "Interface representing a function parameter with name, type, description, and example.",
                            "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                            "codeLine": 47,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "FunctionReturn",
                            "type": "interface",
                            "description": "Interface representing the return type of a function with description and example.",
                            "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                            "codeLine": 52,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObject",
                            "type": "interface",
                            "description": "Interface representing a code object with various properties.",
                            "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                            "codeLine": 57,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        }
                    ],
                    "imports": [],
                    "exports": [
                        {
                            "name": "CodeObjectType",
                            "type": "export",
                            "description": "Type alias for different kinds of code objects.",
                            "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "type": "export",
                            "description": "Type alias for different categories of code objects.",
                            "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "objectSchemas.ts",
                            "fileLocation": ".//src/objectSchemas.ts"
                        }
                    ]
                }
            },
            "documentData": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'import' | 'export' | 'interface' | 'constructor';\nexport type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation'\n\nexport interface ProjectSummary {\n    projectName: string;\n    projectDescription: codeSummary\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}\n\nexport interface models {\n    name: string,\n    model: any,\n}\nexport interface modelServiceConfig {\n    models: models[],\n    endpoint?:string \n}\n\nexport interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}\n\nexport interface codeSummary {\n    goal: string,\n    features_functions: string,\n  }\nexport interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: codeSummary;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject;\n}\n\nexport interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}\n\nexport interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    description: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    content?:string;\n    fileName: string;\n    fileLocation: string;\n    subObjects?: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}\n\nexport type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync'"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 162,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getModelBackend",
                            "type": "function",
                            "description": "Retrieves the backend type for a given model based on the selected model name.",
                            "codeSnippet": "const getModelBackend = (selectedModel: string) => { ... }",
                            "codeLine": 79,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "selectedModel",
                                    "type": "string",
                                    "description": "The name of the selected model.",
                                    "example": "gpt-4o"
                                }
                            ],
                            "functionReturns": {
                                "name": "backend",
                                "type": "llm_modes",
                                "description": "The backend type associated with the selected model.",
                                "example": "OLLAMA"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "retries",
                            "type": "variable",
                            "description": "A counter for the number of retries.",
                            "codeSnippet": "let retries = 0;",
                            "codeLine": 30,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "endpoints",
                            "type": "variable",
                            "description": "An object containing the endpoint URLs for different services.",
                            "codeSnippet": "const endpoints = { OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\" };",
                            "codeLine": 33,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "systemPrompt",
                            "type": "variable",
                            "description": "A system prompt string for the developer AI.",
                            "codeSnippet": "const systemPrompt = \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";",
                            "codeLine": 36,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "MODEL_MODES",
                            "type": "variable",
                            "description": "An array of objects representing different model modes.",
                            "codeSnippet": "const MODEL_MODES = [ ... ];",
                            "codeLine": 38,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "secretSauce",
                            "type": "variable",
                            "description": "An object containing configuration settings for temperature and top_p.",
                            "codeSnippet": "const secretSauce = { temperature: 0.2, top_p: 0.9 };",
                            "codeLine": 75,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "openai",
                            "type": "variable",
                            "description": "An instance of the OpenAI class configured with organization and API key.",
                            "codeSnippet": "const openai = new OpenAI({ organization: process.env.OPENAI_ORG_ID, apiKey: process.env.OPENAI_API_KEY });",
                            "codeLine": 79,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ollama",
                            "type": "variable",
                            "description": "An instance of the Ollama class configured with the host endpoint.",
                            "codeSnippet": "const ollama = new Ollama({ host: endpoints.OLLAMA });",
                            "codeLine": 84,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "contextLength",
                            "type": "variable",
                            "description": "A constant representing the context length for the model.",
                            "codeSnippet": "const contextLength = 8000;",
                            "codeLine": 85,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "project",
                            "type": "variable",
                            "description": "A constant representing the project name for Vertex AI.",
                            "codeSnippet": "const project = \"sweet-papa-technologies\";",
                            "codeLine": 88,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "location",
                            "type": "variable",
                            "description": "A constant representing the location for Vertex AI.",
                            "codeSnippet": "const location = \"us-central1\";",
                            "codeLine": 89,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "textModel",
                            "type": "variable",
                            "description": "A constant representing the text model for Vertex AI.",
                            "codeSnippet": "const textModel = \"gemini-1.5-flash-preview-0514\";",
                            "codeLine": 90,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "textModelAdvanced",
                            "type": "variable",
                            "description": "A constant representing the advanced text model for Vertex AI.",
                            "codeSnippet": "const textModelAdvanced = \"gemini-1.5-pro-preview-0514\t\";",
                            "codeLine": 91,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "vertexWAIT",
                            "type": "variable",
                            "description": "A constant representing the wait time for Vertex AI.",
                            "codeSnippet": "const vertexWAIT = 5000;",
                            "codeLine": 92,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "vertexAI",
                            "type": "variable",
                            "description": "An instance of the VertexAI class configured with project and location.",
                            "codeSnippet": "const vertexAI = new VertexAI({ project: project, location: location });",
                            "codeLine": 94,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "safetySettings",
                            "type": "variable",
                            "description": "An array of objects representing safety settings for different harm categories.",
                            "codeSnippet": "const safetySettings = [ ... ];",
                            "codeLine": 96,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "llm_modes",
                            "description": "A type representing the possible backend modes for language models.",
                            "codeSnippet": "type llm_modes = \"OLLAMA\" | \"VERTEX\" | \"OPENAI\";",
                            "codeLine": 91,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig",
                            "type": "import",
                            "description": "Imports various types and configurations from the objectSchemas module.",
                            "codeSnippet": "import { CodeObject, CodeObjectType, CodeObjects, ProjectSummary, codeSummary, modelServiceConfig } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "searchRAG",
                            "type": "import",
                            "description": "Imports the searchRAG function from the vectorDB module.",
                            "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "yaml",
                            "type": "import",
                            "description": "Imports the yaml module from js-yaml.",
                            "codeSnippet": "import yaml from \"js-yaml\";",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "jsonrepair",
                            "type": "import",
                            "description": "Imports the jsonrepair function from the jsonrepair module.",
                            "codeSnippet": "import { jsonrepair } from \"jsonrepair\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "Ollama",
                            "type": "import",
                            "description": "Imports the Ollama class from the ollama module.",
                            "codeSnippet": "import { Ollama } from \"ollama\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "OpenAI",
                            "type": "import",
                            "description": "Imports the OpenAI class from the openai module.",
                            "codeSnippet": "import OpenAI from \"openai\";",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports and configures environment variables from the dotenv module.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 14,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI",
                            "type": "import",
                            "description": "Imports various types and classes from the @google-cloud/vertexai module.",
                            "codeSnippet": "import { FunctionDeclarationSchemaType, HarmBlockThreshold, HarmCategory, VertexAI } from \"@google-cloud/vertexai\";",
                            "codeLine": 16,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "import",
                            "description": "Imports the getTokens function from the shared module.",
                            "codeSnippet": "import { getTokens } from \"./shared\";",
                            "codeLine": 17,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "CodeObject",
                            "type": "export",
                            "description": "Exported object from objectSchemas module",
                            "codeSnippet": "import { CodeObject } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "CodeObjectType",
                            "type": "export",
                            "description": "Exported object from objectSchemas module",
                            "codeSnippet": "import { CodeObjectType } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "type": "export",
                            "description": "Exported object from objectSchemas module",
                            "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "ProjectSummary",
                            "type": "export",
                            "description": "Exported object from objectSchemas module",
                            "codeSnippet": "import { ProjectSummary } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "codeSummary",
                            "type": "export",
                            "description": "Exported object from objectSchemas module",
                            "codeSnippet": "import { codeSummary } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "modelServiceConfig",
                            "type": "export",
                            "description": "Exported object from objectSchemas module",
                            "codeSnippet": "import { modelServiceConfig } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "searchRAG",
                            "type": "export",
                            "description": "Exported object from vectorDB module",
                            "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "FunctionDeclarationSchemaType",
                            "type": "export",
                            "description": "Exported object from @google-cloud/vertexai module",
                            "codeSnippet": "import { FunctionDeclarationSchemaType } from \"@google-cloud/vertexai\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "HarmBlockThreshold",
                            "type": "export",
                            "description": "Exported object from @google-cloud/vertexai module",
                            "codeSnippet": "import { HarmBlockThreshold } from \"@google-cloud/vertexai\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "HarmCategory",
                            "type": "export",
                            "description": "Exported object from @google-cloud/vertexai module",
                            "codeSnippet": "import { HarmCategory } from \"@google-cloud/vertexai\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "VertexAI",
                            "type": "export",
                            "description": "Exported object from @google-cloud/vertexai module",
                            "codeSnippet": "import { VertexAI } from \"@google-cloud/vertexai\";",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "export",
                            "description": "Exported object from shared module",
                            "codeSnippet": "import { getTokens } from \"./shared\";",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ]
                }
            },
            "documentData": "import {\n  CodeObject,\n  CodeObjectType,\n  CodeObjects,\n  ProjectSummary,\n  codeSummary,\n  modelServiceConfig,\n} from \"./objectSchemas\"; // Adjust path as needed\nimport { searchRAG } from \"./vectorDB\";\nimport yaml from \"js-yaml\";\nimport { jsonrepair } from \"jsonrepair\";\nimport { Ollama } from \"ollama\";\nimport OpenAI from \"openai\";\n\n\nimport \"dotenv/config\";\n\nimport {\n  FunctionDeclarationSchemaType,\n  HarmBlockThreshold,\n  HarmCategory,\n  VertexAI,\n} from \"@google-cloud/vertexai\";\nimport { getTokens } from \"./shared\";\n\nlet retries = 0;\n\n// Model Service Modes:\nconst endpoints = {\n  OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\",\n};\nconst systemPrompt =\n  \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";\n\nconst MODEL_MODES = [\n  {\n    name: \"qwen:32b-chat-v1.5-q4_0\",\n    model: \"qwen:32b-chat-v1.5-q4_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"codeqwen:7b-code-v1.5-q8_0\",\n    model: \"codeqwen:7b-code-v1.5-q8_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"llama3-chatqa:8b-v1.5-fp16\",\n    model: \"llama3-chatqa:8b-v1.5-fp16\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"qwen:32b-text-v1.5-q4_0\",\n    model: \"qwen:32b-text-v1.5-q4_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"gpt-4o\",\n    model: \"gpt-4o\",\n    backend: \"OPENAI\"\n  },\n  {\n    name: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    model: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    model: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"phi3\",\n    model: \"phi3\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"dolphin-llama3:8b-v2.9-fp16\",\n    model: \"dolphin-llama3:8b-v2.9-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"codechat-bison\",\n    model: \"codechat-bison\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"codechat-bison-32k\",\n    model: \"codechat-bison-32k\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-flash-preview-0514\",\n    model: \"gemini-1.5-flash-preview-0514\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-pro-preview-0514\",\n    model: \"gemini-1.5-pro-preview-0514\",\n    backend: \"VERTEX\",\n  },\n];\n\nconst getModelBackend = (selectedModel: string) => {\n  const model = MODEL_MODES.find((m) => m.model === selectedModel);\n  if (model) {\n    return model.backend as llm_modes;\n  }\n  throw new Error(\"Model not found\");\n};\n\ntype llm_modes = \"OLLAMA\" | \"VERTEX\" | \"OPENAI\";\n\n// Set the values to undefined if you want to use the default values\nconst secretSauce = {\n  temperature: 0.2,\n  top_p: 0.9,\n}\n// OpenAI Settings\nconst openai = new OpenAI({\n  organization: process.env.OPENAI_ORG_ID,\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// OLLAMA Settings\nconst ollama = new Ollama({ host: endpoints.OLLAMA })\nconst contextLength = 8000; // Works with 24GB GPU - RTX 4090\n\n// Vertex Settings:\nconst project = \"sweet-papa-technologies\";\nconst location = \"us-central1\";\nconst textModel = \"gemini-1.5-flash-preview-0514\";\nconst textModelAdvanced = \"gemini-1.5-pro-preview-0514\t\";\nconst vertexWAIT = 5000;\n\nconst vertexAI = new VertexAI({ project: project, location: location });\n\nconst safetySettings = [\n  {\n    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_UNSPECIFIED,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n];\n\nconst generativeModel = vertexAI.getGenerativeModel({\n  model: textModel,\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 162,
                "codeChunkLineEnd": 286,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "validateJSON",
                            "type": "function",
                            "description": "Validates if a given string is a valid JSON.",
                            "codeSnippet": "function validateJSON(jsonString: string): boolean { ... }",
                            "codeLine": 10,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The JSON string to be validated.",
                                    "example": "{\"key\": \"value\"}"
                                }
                            ],
                            "functionReturns": {
                                "name": "isValid",
                                "type": "boolean",
                                "description": "Returns true if the JSON string is valid, otherwise false.",
                                "example": "true"
                            }
                        },
                        {
                            "name": "fixJSON",
                            "type": "function",
                            "description": "Attempts to repair a malformed JSON string.",
                            "codeSnippet": "function fixJSON(jsonString: string): string { ... }",
                            "codeLine": 18,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The malformed JSON string to be repaired.",
                                    "example": "{\"key\": \"value\""
                                }
                            ],
                            "functionReturns": {
                                "name": "repairedJSON",
                                "type": "string",
                                "description": "Returns the repaired JSON string.",
                                "example": "{\"key\": \"value\"}"
                            }
                        },
                        {
                            "name": "parseYaml",
                            "type": "function",
                            "description": "Parses a YAML string and converts it into a JSON object.",
                            "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                            "codeLine": 26,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "yamlString",
                                    "type": "string",
                                    "description": "The YAML string to be parsed.",
                                    "example": "key: value"
                                }
                            ],
                            "functionReturns": {
                                "name": "parsedObject",
                                "type": "any",
                                "description": "Returns the parsed JSON object.",
                                "example": "{\"key\": \"value\"}"
                            }
                        },
                        {
                            "name": "parseText",
                            "type": "function",
                            "description": "Converts a text string into a JSON object with a specified key.",
                            "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                            "codeLine": 36,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "text",
                                    "type": "string",
                                    "description": "The text string to be converted.",
                                    "example": "This is a sample text."
                                },
                                {
                                    "name": "resKey",
                                    "type": "string",
                                    "description": "The key to be used in the resulting JSON object.",
                                    "example": "response"
                                }
                            ],
                            "functionReturns": {
                                "name": "parsedObject",
                                "type": "any",
                                "description": "Returns the JSON object with the specified key.",
                                "example": "{\"response\": \"This is a sample text.\"}"
                            }
                        },
                        {
                            "name": "wait",
                            "type": "function",
                            "description": "Pauses execution for a specified number of milliseconds.",
                            "codeSnippet": "async function wait(ms: number) { ... }",
                            "codeLine": 44,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "ms",
                                    "type": "number",
                                    "description": "The number of milliseconds to wait.",
                                    "example": 1000
                                }
                            ],
                            "functionReturns": {
                                "name": "promise",
                                "type": "Promise<void>",
                                "description": "Returns a promise that resolves after the specified time.",
                                "example": "Promise<void>"
                            }
                        },
                        {
                            "name": "infer",
                            "type": "function",
                            "description": "Generates a response based on the provided prompt and model.",
                            "codeSnippet": "export async function infer(prompt: string, responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\", responseKey?: string, bPro = false, bRetry = true, supplementalData?: any, model: string = textModel): Promise<any> { ... }",
                            "codeLine": 48,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "prompt",
                                    "type": "string",
                                    "description": "The prompt to be used for generating the response.",
                                    "example": "What is the capital of France?"
                                },
                                {
                                    "name": "responseMode",
                                    "type": "\"JSON object\" | \"YAML object\" | \"TEXT STRING\"",
                                    "description": "The format of the response.",
                                    "example": "\"JSON object\""
                                },
                                {
                                    "name": "responseKey",
                                    "type": "string",
                                    "description": "The key to be used in the response object.",
                                    "example": "response"
                                },
                                {
                                    "name": "bPro",
                                    "type": "boolean",
                                    "description": "Flag to indicate if the pro version should be used.",
                                    "example": false
                                },
                                {
                                    "name": "bRetry",
                                    "type": "boolean",
                                    "description": "Flag to indicate if retries should be allowed.",
                                    "example": true
                                },
                                {
                                    "name": "supplementalData",
                                    "type": "any",
                                    "description": "Additional data to be used in the response generation.",
                                    "example": "{\"context\": \"additional context\"}"
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to be used for generating the response.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "response",
                                "type": "Promise<any>",
                                "description": "Returns a promise that resolves to the generated response.",
                                "example": "{\"response\": \"Paris\"}"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "safetySettings",
                            "type": "variable",
                            "description": "Settings related to the safety configurations for the model.",
                            "codeSnippet": "safetySettings: safetySettings,",
                            "codeLine": 2,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "secretSauce",
                            "type": "variable",
                            "description": "Configuration object containing parameters like temperature and top_p for generation.",
                            "codeSnippet": "temperature: secretSauce.temperature,\ntopP: secretSauce.top_p",
                            "codeLine": 4,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "vertexAI",
                            "type": "variable",
                            "description": "Object representing the Vertex AI service used to get generative models.",
                            "codeSnippet": "const generateModelAdv = vertexAI.getGenerativeModel({",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "textModelAdvanced",
                            "type": "variable",
                            "description": "Advanced text model used for generating responses.",
                            "codeSnippet": "model: textModelAdvanced,",
                            "codeLine": 9,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "yaml",
                            "type": "variable",
                            "description": "Library used for parsing YAML strings.",
                            "codeSnippet": "const obj = yaml.load(yamlString) as any;",
                            "codeLine": 28,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "vertexWAIT",
                            "type": "variable",
                            "description": "Wait time for Vertex AI models.",
                            "codeSnippet": "await wait(vertexWAIT);",
                            "codeLine": 56,
                            "codeIndent": 6,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "textModel",
                            "type": "variable",
                            "description": "Default text model used for generating responses.",
                            "codeSnippet": "model: string = textModel",
                            "codeLine": 43,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "llm_modes",
                            "type": "variable",
                            "description": "Type representing the different modes of the language model.",
                            "codeSnippet": "const modelBackend:llm_modes = getModelBackend(model);",
                            "codeLine": 45,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "llm_modes",
                            "description": "A type representing the different modes of the language model backend.",
                            "codeSnippet": "const modelBackend:llm_modes = getModelBackend(model);",
                            "codeLine": 72,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "jsonrepair",
                            "type": "import",
                            "description": "A function used to repair malformed JSON strings.",
                            "codeSnippet": "import { jsonrepair } from 'jsonrepair';",
                            "codeLine": 20,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "yaml",
                            "type": "import",
                            "description": "A module used to parse YAML strings into JavaScript objects.",
                            "codeSnippet": "import * as yaml from 'js-yaml';",
                            "codeLine": 30,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "parseYaml",
                            "type": "export",
                            "description": "Function to convert a YAML string into a JSON object.",
                            "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                            "codeLine": 28,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "parseText",
                            "type": "export",
                            "description": "Function to convert a text string into a JSON object with a specified key.",
                            "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                            "codeLine": 38,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "infer",
                            "type": "export",
                            "description": "Asynchronous function to infer a response based on a given prompt and model.",
                            "codeSnippet": "export async function infer(prompt: string, responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\", responseKey?: string, bPro = false, bRetry = true, supplementalData?: any, model: string = textModel): Promise<any> { ... }",
                            "codeLine": 45,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ]
                }
            },
            "documentData": "  safetySettings: safetySettings,\n  \"generationConfig\": {\n    temperature: secretSauce.temperature,\n    topP: secretSauce.top_p\n  }\n});\n\nconst generateModelAdv = vertexAI.getGenerativeModel({\n  model: textModelAdvanced,\n  safetySettings: safetySettings,\n  \"generationConfig\": {\n    temperature: secretSauce.temperature,\n    topP: secretSauce.top_p\n  }\n});\n\n// General Functions\nfunction validateJSON(jsonString: string): boolean {\n  try {\n    JSON.parse(jsonString);\n    return true;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nfunction fixJSON(jsonString: string): string {\n  try {\n    return jsonrepair(jsonString);\n  } catch (e) {\n    throw new Error(\"Unable to fix JSON\");\n  }\n}\n\nexport function parseYaml(yamlString: string): any {\n  // Convert YAML file into a proper JSON object\n  try {\n    const obj = yaml.load(yamlString) as any;\n    return obj as any;\n  } catch (e: any) {\n    console.log(e);\n    throw new Error(\"Invalid YAML object\");\n  }\n}\n\nexport function parseText(text: string, resKey = \"response\"): any {\n  // Convert text into a proper JSON object\n  const obj = {} as any;\n  obj[resKey] = text;\n  return obj;\n}\n\nasync function wait(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function infer(\n  prompt: string,\n  responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",\n  responseKey?: string,\n  bPro = false,\n  bRetry = true,\n  supplementalData?: any,\n  model: string = textModel\n): Promise<any> {\n  const modelBackend:llm_modes = getModelBackend(model);\n\n  console.log(\"====> Model Backend:\", modelBackend);\n\n  if (modelBackend === \"VERTEX\") {\n    if (model !== textModel && model !== textModelAdvanced) {\n      console.log(\"Waiting 1 second...\");\n      await wait(1000);\n    } else {\n      console.log(\"Waiting 5 seconds...\");\n      await wait(vertexWAIT);\n    }\n  }\n\n  const promptResponseInstructions = `Please respond with a ${responseMode} containing your answer. ${\n    responseMode !== \"TEXT STRING\"\n      ? `Please properly format and escape your output, as I will need to parse your response.`\n      : \"\"\n  }${\n    responseKey ? `The key for the response should be ${responseKey}.` : \"\"\n  }\\n\\n`;\n\n  if (responseMode !== \"TEXT STRING\" && responseKey) {\n    console.warn(\n      \"responseKey is only applicable for TEXT STRING responseMode. Ignoring responseKey.\"\n    );\n  }\n\n  prompt = prompt.trim();\n  prompt = promptResponseInstructions + prompt;\n\n  const promptCharLen = prompt.length;\n  const promptLen = getTokens(prompt);\n\n  console.log(`Prompt: ${promptCharLen} Characters`);\n  console.log(`Prompt: ${promptLen} Tokens`);\n\n  let promptNew = prompt;\n\n  if (responseMode === \"JSON object\") {\n    promptNew = `\n    In your response, PLEASE BE SURE TO FORMAT YOUR RESPONSE AS A PARSE-ABLE JSON OBJECT.\n    This means that your response keys and values should be properly formatted and escaped.\n\n    ${prompt}\n    `;\n  }\n\n  let response = \"\";\n\n  const startTime = Date.now();\n\n  // BASED on the model passed, we will call the appropriate endpoints, etc:\n\n  if (modelBackend === \"OLLAMA\") {\n    //\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 286,
                "codeChunkLineEnd": 416,
                "codeObjects": {
                    "classes": [],
                    "functions": [],
                    "variables": [
                        {
                            "name": "ollamaResponse",
                            "type": "variable",
                            "description": "Stores the response from the ollama.generate function call.",
                            "codeSnippet": "const ollamaResponse = await ollama.generate({ model: model, prompt: promptNew, stream: false, system: systemPrompt, keep_alive: 9000, options: { ...secretSauce, num_ctx: contextLength, }, });",
                            "codeLine": 3,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "request",
                            "type": "variable",
                            "description": "Holds the request payload for the VERTEX model backend.",
                            "codeSnippet": "const request = { contents: [{ role: \"user\", parts: [{ text: promptNew }] }], };",
                            "codeLine": 11,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "genFunction",
                            "type": "variable",
                            "description": "Function to generate content, which can be either generativeModel or generateModelAdv based on the bPro flag.",
                            "codeSnippet": "let genFunction = generativeModel;",
                            "codeLine": 15,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "result",
                            "type": "variable",
                            "description": "Stores the result from the genFunction.generateContent function call.",
                            "codeSnippet": "const result = await genFunction.generateContent(request);",
                            "codeLine": 20,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "completion",
                            "type": "variable",
                            "description": "Stores the completion response from the openai.chat.completions.create function call.",
                            "codeSnippet": "const completion = await openai.chat.completions.create({ ...secretSauce, messages: [{ role: \"system\", content: systemPrompt }, { role: \"user\", content: promptNew} ], model: model, });",
                            "codeLine": 43,
                            "codeIndent": 4,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "endTime",
                            "type": "variable",
                            "description": "Stores the current timestamp at the end of the process.",
                            "codeSnippet": "const endTime = Date.now();",
                            "codeLine": 58,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "totalTime",
                            "type": "variable",
                            "description": "Calculates the total time taken for the process by subtracting startTime from endTime.",
                            "codeSnippet": "const totalTime = endTime - startTime;",
                            "codeLine": 59,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [],
                    "exports": []
                }
            },
            "documentData": "    // const contextLength = promptLen > 1000 ? 32000 : 4096;\n\n    const ollamaResponse = await ollama.generate({\n      model: model,\n      prompt: promptNew,\n      stream: false,\n      system: systemPrompt,\n      keep_alive: 9000,\n      options: {\n        ...secretSauce,\n        num_ctx: contextLength,\n      },\n    });\n    console.log(ollamaResponse.response.length);\n    response = ollamaResponse.response;\n  } else if (modelBackend === \"VERTEX\") {\n    //\n    const request = {\n      contents: [{ role: \"user\", parts: [{ text: promptNew }] }],\n    };\n\n    let genFunction = generativeModel;\n    if (bPro === true) {\n      genFunction = generateModelAdv;\n    }\n\n    const result = await genFunction.generateContent(request);\n\n    try {\n      response = result.response.candidates?.[0].content?.parts[0].text || \"\";\n    } catch (error: any) {\n      console.error(\"Error parsing response from Gemini:\", error);\n      console.debug(\"Prompt to Gemini:\", promptNew);\n\n      if (typeof result === \"string\") {\n        console.log(\n          \"Response from Gemini:\",\n          \"Response is a string, but not a valid JSON object\"\n        );\n        console.log(result);\n      } else {\n        console.log(\n          \"Response from Gemini - String-y-fied:\",\n          JSON.stringify(result)\n        );\n      }\n\n      if (bRetry == true || retries < 3) {\n        retries += 1;\n        console.log(\"Retrying since there was an error\");\n        return await infer(\n          promptNew,\n          responseMode,\n          responseKey,\n          bPro,\n          false,\n          supplementalData,\n          model\n        );\n      }\n    }\n  } else if (modelBackend === \"OPENAI\") {\n    const completion = await openai.chat.completions.create({\n      ...secretSauce,\n      messages: [{ role: \"system\", content: systemPrompt },\n      { role: \"user\", content: promptNew}\n      ],\n      model: model,\n    });\n  \n    console.log(completion.choices[0]);\n    response = completion.choices[0].message.content || \"\";\n\n    if (response === \"\") {\n      console.error(\"Empty response from OpenAI\");\n      console.error(completion);\n    }\n  }\n  else {\n    console.error(\"Unknown Model Backend\");\n  }\n\n  const endTime = Date.now();\n  const totalTime = endTime - startTime;\n\n  // PRint the total time in seconds, truncated to 2 decimal places\n  console.log(`Total Time: ${totalTime / 1000}s`);\n\n  if (typeof response !== \"string\") {\n    throw new Error(\"Invalid response from LLM\");\n  }\n\n  if (responseMode === \"JSON object\") {\n    response = response.replace(\"```json\", \"\").replace(\"```\", \"\").trim();\n\n    let bFixed = false;\n    if (validateJSON(response) === true) {\n      console.log(\"Valid JSON:\");\n    } else {\n      console.error(\"Invalid JSON, attempting to fix:\");\n      try {\n        const fixedJson = fixJSON(response);\n        console.log(\"Fixed JSON:\", fixedJson);\n        response = fixedJson;\n        bFixed = true;\n      } catch (error: any) {\n        console.error(\"Error fixing JSON:\", error.message);\n\n        if (bRetry == true || retries < 3) {\n          retries += 1;\n          console.log(\n            \"Retrying since JSON output was not correct, here is what we got:\"\n          );\n\n          console.log(`\\n\\nBAD JSON\\n${response}\\n\\n`);\n\n          return await infer(\n            promptNew,\n            responseMode,\n            responseKey,\n            bPro,\n            false,\n            supplementalData,\n            model\n          );\n        }\n\n        console.warn(\"Returning error message as JSON -- Please Try Again\");\n        return { error: error, original: response } as any;\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 3,
                "codeChunkLineStart": 416,
                "codeChunkLineEnd": 533,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getCodeSummaryFromLLM",
                            "type": "function",
                            "description": "Asynchronously gets a code summary from a language model by sending a prompt with the code to summarize.",
                            "codeSnippet": "export async function getCodeSummaryFromLLM(\n  codeToSummarize: string,\n  model: string = textModel\n): Promise<codeSummary> { ... }",
                            "codeLine": 52,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "codeToSummarize",
                                    "type": "string",
                                    "description": "The code block that needs to be summarized.",
                                    "example": "const x = 10;"
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to use for summarization, defaults to textModel.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "codeSummary",
                                "type": "Promise<codeSummary>",
                                "description": "A promise that resolves to a code summary object.",
                                "example": "{ goal: 'Summarize the code', features_functions: 'Describes features and functions' }"
                            }
                        },
                        {
                            "name": "callLLM",
                            "type": "function",
                            "description": "Asynchronously calls a language model with a given prompt template and project context.",
                            "codeSnippet": "export async function callLLM(\n  promptTemplate: string,\n  projectContext: ProjectSummary,\n  code: string,\n  filePath: string,\n  bRAG = false,\n  model: string = textModel\n): Promise<any> { ... }",
                            "codeLine": 66,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "promptTemplate",
                                    "type": "string",
                                    "description": "The template for the prompt to send to the language model.",
                                    "example": "Summarize the following code block."
                                },
                                {
                                    "name": "projectContext",
                                    "type": "ProjectSummary",
                                    "description": "The context of the project to provide additional information to the model.",
                                    "example": "{ projectName: 'MyProject', description: 'A sample project' }"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be processed by the language model.",
                                    "example": "const x = 10;"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path of the code being processed.",
                                    "example": "./src/myFile.ts"
                                },
                                {
                                    "name": "bRAG",
                                    "type": "boolean",
                                    "description": "A flag indicating whether to use RAG (Retrieval-Augmented Generation) or not.",
                                    "example": "true"
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to use for processing, defaults to textModel.",
                                    "example": "textModel"
                                }
                            ],
                            "functionReturns": {
                                "name": "result",
                                "type": "Promise<any>",
                                "description": "A promise that resolves to the result from the language model.",
                                "example": "{ summary: 'Code summary', details: 'Additional details' }"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "res",
                            "type": "variable",
                            "description": "Holds the parsed JSON response.",
                            "codeSnippet": "const res = JSON.parse(response);",
                            "codeLine": 4,
                            "codeIndent": 6,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "newData",
                            "type": "variable",
                            "description": "Holds the first element of the parsed JSON array if it exists.",
                            "codeSnippet": "const newData = res[0];",
                            "codeLine": 14,
                            "codeIndent": 10,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "keys",
                            "type": "variable",
                            "description": "Holds the keys of the newData object.",
                            "codeSnippet": "const keys = Object.keys(newData);",
                            "codeLine": 17,
                            "codeIndent": 10,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "expectedKeys",
                            "type": "variable",
                            "description": "Holds the expected keys for the JSON object.",
                            "codeSnippet": "const expectedKeys: CodeObjects[] = [\"classes\", \"functions\", \"variables\", \"types\", \"interfaces\", \"imports\", \"exports\"];",
                            "codeLine": 19,
                            "codeIndent": 10,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fixedData",
                            "type": "variable",
                            "description": "Holds the fixed JSON object if the original object is missing keys.",
                            "codeSnippet": "const fixedData = {} as any;",
                            "codeLine": 27,
                            "codeIndent": 12,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "e",
                            "type": "variable",
                            "description": "Holds the error object if JSON parsing fails.",
                            "codeSnippet": "catch (e: any) {",
                            "codeLine": 43,
                            "codeIndent": 6,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "question",
                            "type": "variable",
                            "description": "Holds the prompt question to be sent to the LLM for summarizing code.",
                            "codeSnippet": "const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \\n  Please respond with a JSON object as follows:\\n  {\\n    \\\"goal\\\": \\\"String summarizing what the code is about, and the goal\\\",\\n    \\\"features_functions\\\": \\\"String describing any relevant features\\\",\\n  }\\n\\n  ### Code To Sumnarize:\\n  ${codeToSummarize}\\n  `;",
                            "codeLine": 67,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "codeSummary",
                            "type": "variable",
                            "description": "Holds the summary of the code returned by the LLM.",
                            "codeSnippet": "const codeSummary = await infer(question, \"JSON object\", undefined, false, undefined, undefined, model);",
                            "codeLine": 75,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "res",
                            "type": "variable",
                            "description": "Holds the parsed YAML response.",
                            "codeSnippet": "const res = parseYaml(response);",
                            "codeLine": 59,
                            "codeIndent": 6,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "CodeObjects",
                            "description": "An array of strings representing different categories of code elements such as classes, functions, variables, etc.",
                            "codeSnippet": "const expectedKeys: CodeObjects[] = [\"classes\", \"functions\", \"variables\", \"types\", \"interfaces\", \"imports\", \"exports\"];",
                            "codeLine": 19,
                            "codeIndent": 10,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [],
                    "exports": [
                        {
                            "name": "getCodeSummaryFromLLM",
                            "type": "export",
                            "description": "Asynchronously gets a code summary from the LLM based on the provided code block and model.",
                            "codeSnippet": "export async function getCodeSummaryFromLLM(codeToSummarize: string, model: string = textModel): Promise<codeSummary> { ... }",
                            "codeLine": 70,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        },
                        {
                            "name": "callLLM",
                            "type": "export",
                            "description": "Asynchronously calls the LLM with a given prompt template, project context, code, file path, and model.",
                            "codeSnippet": "export async function callLLM(promptTemplate: string, projectContext: ProjectSummary, code: string, filePath: string, bRAG = false, model: string = textModel): Promise<any> { ... }",
                            "codeLine": 86,
                            "codeIndent": 0,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts"
                        }
                    ]
                }
            },
            "documentData": "      }\n    }\n\n    try {\n      const res = JSON.parse(response);\n\n      if (bFixed == true) {\n        console.debug(\"JSON was fixed! Checking that everything else is OK now.\");\n\n        // Check if Object malformed into an Array some how...\n        if (Array.isArray(res) === true && res.length >= 1) {\n          console.log(\"This looks like a fixed JSON object!\");\n          // if (\"classes\" in res[0] === false) {\n          //   console.warn(\"This object does not look correct!\");\n          //   console.warn(res);\n          // }\n\n          const newData = res[0];\n\n          // We should check that the fixed JSON object has the same amount of keys as our interface for the object:\n          const keys = Object.keys(newData);\n\n          const expectedKeys: CodeObjects[] = [\n            \"classes\",\n            \"functions\",\n            \"variables\",\n            \"types\",\n            \"interfaces\",\n            // \"comments\",\n            \"imports\",\n            \"exports\"\n          ];\n\n          if (keys.length < expectedKeys.length) {\n            console.warn(\n              \"This object does not look correct! Attempting to fix:\"\n            );\n\n            const fixedData = {} as any;\n            for (const key of expectedKeys) {\n              if (key in newData) {\n                fixedData[key] = newData[key];\n              } else {\n                if (key === \"fileName\") {\n                  fixedData[key] = supplementalData.fileName || \"unknown\";\n                }\n                if (key === \"fileLocation\") {\n                  fixedData[key] = supplementalData.fileLocation || \"unknown\";\n                }\n                if (key !== \"fileName\" && key !== \"fileLocation\") {\n                  fixedData[key] = [];\n                }\n              }\n            }\n          }\n\n          console.log(\"JSON should be fixed now...\");\n\n          return res[0];\n        } else if (Array.isArray(res) === true) {\n          console.log(\"This looks like a fixed JSON object, but it is empty!\");\n          console.warn(res);\n        }\n      }\n\n      return res;\n    } catch (e: any) {\n      console.error(\"Error parsing JSON:\", e);\n      console.warn(\"Returning error message as JSON -- Please Try Again\");\n      return { error: e, original: response } as any;\n    }\n\n  } else if (responseMode === \"YAML object\") {\n    response = response.replace(\"```yaml\", \"\").replace(\"```\", \"\").trim();\n    const res = parseYaml(response);\n    return res;\n  } else {\n    return parseText(response, responseKey);\n  }\n}\n\nexport async function getCodeSummaryFromLLM(\n  codeToSummarize: string,\n  model: string = textModel\n): Promise<codeSummary> {\n  const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \n  Please respond with a JSON object as follows:\n  {\n    \"goal\": \"String summarizing what the code is about, and the goal\",\n    \"features_functions\": \"String describing any relevant features\",\n  }\n\n  ### Code To Sumnarize:\n  ${codeToSummarize}\n  `\n  const codeSummary = await infer(\n    question,\n    \"JSON object\",\n    undefined,\n    false,\n    undefined,\n    undefined,\n    model\n  );\n  return codeSummary;\n}\n\nexport async function callLLM(\n  promptTemplate: string,\n  projectContext: ProjectSummary,\n  code: string,\n  filePath: string,\n  bRAG = false,\n  model: string = textModel\n): Promise<any> {\n  if (bRAG === true) {\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 4,
                "codeChunkLineStart": 533,
                "codeChunkLineEnd": 597,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getFileNameFromPath",
                            "type": "function",
                            "description": "Extracts the file name from a given file path.",
                            "codeSnippet": "const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";",
                            "codeLine": 20,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "path",
                                    "type": "string",
                                    "description": "The file path from which to extract the file name.",
                                    "example": "/path/to/file.txt"
                                }
                            ],
                            "functionReturns": {
                                "name": "fileName",
                                "type": "string",
                                "description": "The extracted file name.",
                                "example": "file.txt"
                            }
                        },
                        {
                            "name": "callLLM",
                            "type": "function",
                            "description": "Calls the LLM API with the provided parameters and handles rate limiting.",
                            "codeSnippet": "async function callLLM(promptTemplate, projectContext, code, filePath, bRAG, model) { ... }",
                            "codeLine": 50,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "promptTemplate",
                                    "type": "string",
                                    "description": "The template for the prompt to be sent to the LLM.",
                                    "example": "<prompt template>"
                                },
                                {
                                    "name": "projectContext",
                                    "type": "object",
                                    "description": "The context of the project including team and project details.",
                                    "example": "{ teamContext: 'team details', projectName: 'project name' }"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code snippet to be included in the prompt.",
                                    "example": "const x = 10;"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path of the file being processed.",
                                    "example": "/path/to/file.ts"
                                },
                                {
                                    "name": "bRAG",
                                    "type": "boolean",
                                    "description": "A flag indicating whether to use RAG (Retrieval-Augmented Generation).",
                                    "example": true
                                },
                                {
                                    "name": "model",
                                    "type": "string",
                                    "description": "The model to be used for inference.",
                                    "example": "gpt-3"
                                }
                            ],
                            "functionReturns": {
                                "name": "codeObjects",
                                "type": "any",
                                "description": "The response from the LLM API, potentially enhanced with file path information.",
                                "example": "{ fileName: 'file.ts', fileLocation: '/path/to/file.ts' }"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "promptTemplate",
                            "type": "variable",
                            "description": "Template for the prompt that will be sent to the AI API, with placeholders for relevant code and context.",
                            "codeSnippet": "promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");",
                            "codeLine": 6,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "prompt",
                            "type": "variable",
                            "description": "Final prompt string after replacing placeholders with actual values.",
                            "codeSnippet": "const prompt = promptTemplate.replace(\"<supplemental context>\", projectContext.teamContext).replace(\"<code snippet>\", code).replace(\"<file path>\", filePath);",
                            "codeLine": 16,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "getFileNameFromPath",
                            "type": "variable",
                            "description": "Function to extract the file name from a given file path.",
                            "codeSnippet": "const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";",
                            "codeLine": 22,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileName",
                            "type": "variable",
                            "description": "Extracted file name from the given file path.",
                            "codeSnippet": "const fileName = getFileNameFromPath(filePath);",
                            "codeLine": 23,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "response",
                            "type": "variable",
                            "description": "Response from the AI API call.",
                            "codeSnippet": "const response = await infer(prompt, \"JSON object\", undefined, true, true, { fileLocation: filePath, fileName: fileName }, model).catch((error) => { console.error(\"Error calling API:\", error); return { error: error }; });",
                            "codeLine": 27,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "codeObjects",
                            "type": "variable",
                            "description": "Parsed and validated response from the AI API.",
                            "codeSnippet": "let codeObjects: any = response;",
                            "codeLine": 39,
                            "codeIndent": 2,
                            "fileName": "llmInterface.ts",
                            "fileLocation": ".//src/llmInterface.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [],
                    "exports": []
                }
            },
            "documentData": "    // Take 400 characters of relevant code\n    // const relevantCode = await searchRAG(projectContext.projectName, code); // Placeholder, implement searchRAG function\n    // const r =\n    //   relevantCode.documentData.length > 400\n    //     ? relevantCode.documentData.substring(0, 400)\n    //     : relevantCode.documentData;\n    // promptTemplate = promptTemplate.replace(\"<relevant code>\", r); // Not implemented yet, placeholder for RAG\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");\n  } else {\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");\n  }\n\n  // 1. Prepare Prompt\n  const prompt = promptTemplate\n    .replace(\"<supplemental context>\", projectContext.teamContext) // Add team context\n    .replace(\"<code snippet>\", code)\n    .replace(\"<file path>\", filePath);\n\n  const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";\n  const fileName = getFileNameFromPath(filePath);\n\n  // 2. Call AI API\n  const response = await infer(\n    prompt,\n    \"JSON object\",\n    undefined,\n    true,\n    true,\n    {\n      fileLocation: filePath,\n      fileName: fileName,\n    },\n    model\n  ).catch((error) => {\n    console.error(\"Error calling API:\", error);\n    return { error: error };\n  });\n\n  // IF too many request or rate limit has been hit, we wait 30 seconds and try again\n  if (response.error && response.error.code === 429) {\n    console.log(\"Rate Limit Hit, waiting 30 seconds...\");\n    await wait(30000);\n    return await callLLM(\n      promptTemplate,\n      projectContext,\n      code,\n      filePath,\n      bRAG,\n      model\n    );\n  }\n\n  // 3. Parse and Validate Response\n  let codeObjects: any = response;\n\n  // 4. Enhance with filePath\n  if (!codeObjects.fileName) codeObjects.fileName = fileName;\n\n  if (!codeObjects.fileLocation) codeObjects.fileLocation = filePath;\n\n  return codeObjects;\n}\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/index.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 109,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "action",
                            "type": "function",
                            "description": "Handles the main logic for generating documentation based on the provided options.",
                            "codeSnippet": "async (projectName, options) => { ... }",
                            "codeLine": 21,
                            "codeIndent": 2,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project for which documentation is being generated.",
                                    "example": "myProject"
                                },
                                {
                                    "name": "options",
                                    "type": "object",
                                    "description": "Options provided by the user, including input path, output path, test mode, and JSON file path.",
                                    "example": {
                                        "input": ".",
                                        "output": "./output",
                                        "test": "false",
                                        "generateFromFile": "path/to/json"
                                    }
                                }
                            ],
                            "functionReturns": {
                                "name": "void",
                                "type": "void",
                                "description": "This function does not return a value.",
                                "example": null
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "program",
                            "type": "variable",
                            "description": "Instance of the Command class from the commander library.",
                            "codeSnippet": "const program = new Command();",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "bTestMode",
                            "type": "variable",
                            "description": "Boolean indicating whether the test mode is enabled.",
                            "codeSnippet": "const bTestMode = options.test;",
                            "codeLine": 23,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "projectPath",
                            "type": "variable",
                            "description": "Path to the codebase provided by the user.",
                            "codeSnippet": "const projectPath = options.input;",
                            "codeLine": 24,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "outputDir",
                            "type": "variable",
                            "description": "Directory where the generated documentation will be saved.",
                            "codeSnippet": "const outputDir = options.output;",
                            "codeLine": 25,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "jsonFile",
                            "type": "variable",
                            "description": "Path to the JSON file used for generating documentation.",
                            "codeSnippet": "const jsonFile = options.generateFromFile;",
                            "codeLine": 26,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "startTime",
                            "type": "variable",
                            "description": "Timestamp marking the start of the codebase parsing.",
                            "codeSnippet": "const startTime = Date.now();",
                            "codeLine": 56,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "parsedCodebase",
                            "type": "variable",
                            "description": "Object representing the parsed codebase.",
                            "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                            "codeLine": 58,
                            "codeIndent": 6,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "endTime",
                            "type": "variable",
                            "description": "Timestamp marking the end of the documentation generation.",
                            "codeSnippet": "const endTime = Date.now();",
                            "codeLine": 77,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "totalTime",
                            "type": "variable",
                            "description": "Total time taken for the documentation generation process.",
                            "codeSnippet": "const totalTime = endTime - startTime;",
                            "codeLine": 78,
                            "codeIndent": 4,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "Command",
                            "type": "import",
                            "description": "Imports the Command class from the 'commander' module, which is used to create command-line interfaces.",
                            "codeSnippet": "import { Command } from \"commander\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        },
                        {
                            "name": "parseCodebase",
                            "type": "import",
                            "description": "Imports the parseCodebase function from the local module './codeParser', which is used to parse the codebase.",
                            "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        },
                        {
                            "name": "generateDocumentation",
                            "type": "import",
                            "description": "Imports the generateDocumentation function from the local module './documentationGenerator', which is used to generate documentation.",
                            "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Imports the 'fs' module, which provides an API for interacting with the file system.",
                            "codeSnippet": "import fs from \"fs\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "index.ts",
                            "fileLocation": ".//src/index.ts"
                        }
                    ],
                    "exports": []
                }
            },
            "documentData": "import { Command } from \"commander\";\nimport { parseCodebase } from \"./codeParser\";\nimport { generateDocumentation } from \"./documentationGenerator\";\nimport fs from \"fs\";\n\nconst program = new Command();\n\nprogram\n  .name(\"fofodocs\")\n  .description(\"Generate documentation for your codebase using FoFo Docs\")\n  .version(\"1.0.0\")\n  .argument(\"<project_name>\", \"Name of your project\")\n  .option(\n    \"-i, --input <path>\",\n    \"Path to your codebase (default: current directory)\",\n    \".\"\n  )\n  .option(\n    \"-o, --output <path>\",\n    \"Path to output documentation (default: ./output)\",\n    \"./output\"\n  )\n  .option(\"-t, --test <bool>\", \"Run in Test Mode\", \"false\")\n  .option(\"-g, --generateFromFile <path>\", \"Generate MD documentation from JSON file\")\n  .action(async (projectName, options) => {\n    console.log(\n      `FoFo Docs is generating documentation for project: ${projectName}`\n    );\n\n    const bTestMode = options.test;\n    const projectPath = options.input;\n    const outputDir = options.output;\n    const jsonFile = options.generateFromFile;\n\n    // Generate documentation from JSON file ONLY if flag is set\n    if (jsonFile) {\n      console.log(\"Generating documentation from JSON file:\", jsonFile);\n\n      // Check if JSON file exists\n      if (!fs.existsSync(jsonFile)) {\n        console.error(\"JSON file does not exist!\");\n        return;\n      }\n\n      // Check if output directory exists, if not create it\n      if (!fs.existsSync(outputDir)) {\n        try {\n          fs.mkdirSync(outputDir, {\n            recursive: true,\n          });\n        } catch (err) {\n          console.error(err);\n          throw new Error(\"Error creating output directory\");\n        }\n      }\n\n      // Generate documentation\n      \n      try {\n        const bGenerated = await generateDocumentation(outputDir, null, jsonFile);\n        if (!bGenerated) {\n          console.error(\"Documentation generation failed!\");\n          return;\n        }\n      } catch (error) {\n        console.error(\"Error during documentation generation:\", error);\n        if (!bTestMode) {\n          process.exit(1);\n        }\n        return;\n      }\n      console.log(\"Documentation generation complete!\");\n      return;\n    }\n\n    // 1. Parse Codebase\n    const startTime = Date.now();\n    try {\n      const parsedCodebase = await parseCodebase(projectPath, projectName);\n      parsedCodebase.projectName = projectName;\n\n      // 2. Generate Documentation\n      const bGenerated = await generateDocumentation(\n        outputDir,\n        parsedCodebase        \n      );\n\n      if (!bGenerated) {\n        console.error(\"Documentation generation failed!\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error during documentation generation:\", error);\n      if (!bTestMode) {\n        process.exit(1);\n      }\n      return;\n    }\n\n    console.log(\"Documentation generation complete!\");\n    const endTime = Date.now();\n    const totalTime = endTime - startTime;\n    console.log(`Total Time: ${totalTime / 1000}s`);\n    \n  });\n\nprogram.parse();\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 140,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "jsonToMarkdown",
                            "type": "function",
                            "description": "Converts a project summary object into a markdown documentation format and saves it to the specified output folder.",
                            "codeSnippet": "function jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) { ... }",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "projectSummary",
                                    "type": "ProjectSummary",
                                    "description": "The summary of the project including details like project name, description, team context, and code files.",
                                    "example": "{ projectName: 'ExampleProject', projectDescription: { goal: '...', features_functions: '...' }, teamContext: '...', codeFiles: [...] }"
                                },
                                {
                                    "name": "outputFolder",
                                    "type": "string",
                                    "description": "The directory where the markdown files will be saved.",
                                    "example": "\"./output\""
                                }
                            ],
                            "functionReturns": {
                                "name": "void",
                                "type": "void",
                                "description": "This function does not return a value.",
                                "example": "N/A"
                            }
                        },
                        {
                            "name": "duplicateCheck",
                            "type": "function",
                            "description": "Checks if a given code object is a duplicate based on its name, content, and type.",
                            "codeSnippet": "const duplicateCheck = (obj: CodeObject, type: CodeObjectType): boolean => { ... }",
                            "codeLine": 70,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": true,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "obj",
                                    "type": "CodeObject",
                                    "description": "The code object to check for duplication.",
                                    "example": "{ name: 'exampleFunction', codeSnippet: 'function exampleFunction() { ... }', type: 'function' }"
                                },
                                {
                                    "name": "type",
                                    "type": "CodeObjectType",
                                    "description": "The type of the code object (e.g., class, function, variable).",
                                    "example": "\"function\""
                                }
                            ],
                            "functionReturns": {
                                "name": "isDuplicate",
                                "type": "boolean",
                                "description": "Returns true if the code object is a duplicate, otherwise false.",
                                "example": "true"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "backupDirectory",
                            "type": "variable",
                            "description": "Path to the backup directory.",
                            "codeSnippet": "const backupDirectory = path.join(__dirname, 'backup');",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "timestamp",
                            "type": "variable",
                            "description": "Current timestamp formatted as a string.",
                            "codeSnippet": "const timestamp = new Date().toISOString().replace(/[:.]/g, '-');",
                            "codeLine": 10,
                            "codeIndent": 1,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "projectFolder",
                            "type": "variable",
                            "description": "Path to the project folder.",
                            "codeSnippet": "const projectFolder = path.join(outputFolder, `${projectSummary.projectName}-${timestamp}`);",
                            "codeLine": 11,
                            "codeIndent": 1,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "toc",
                            "type": "variable",
                            "description": "Table of contents as an array of strings.",
                            "codeSnippet": "const toc: string[] = [];",
                            "codeLine": 14,
                            "codeIndent": 1,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileName",
                            "type": "variable",
                            "description": "Name of the markdown file for each code file.",
                            "codeSnippet": "const fileName = `${file.fileName}.md`;",
                            "codeLine": 22,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "filePath",
                            "type": "variable",
                            "description": "Path to the markdown file for each code file.",
                            "codeSnippet": "const filePath = path.join(projectFolder, fileName);",
                            "codeLine": 23,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileContent",
                            "type": "variable",
                            "description": "Content of the markdown file for each code file.",
                            "codeSnippet": "let fileContent = `# ${file.fileName} - ${projectSummary.projectName}\n`;",
                            "codeLine": 25,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "sectionLinks",
                            "type": "variable",
                            "description": "Array of section links for the table of contents.",
                            "codeSnippet": "const sectionLinks: string[] = [];",
                            "codeLine": 32,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "sectionContent",
                            "type": "variable",
                            "description": "Object to hold different sections of content.",
                            "codeSnippet": "const sectionContent = {\n    classes: '',\n    functions: '',\n    variables: '',\n    types: '',\n    comments: '',\n    imports: '',\n    exports: '',\n    interfaces: ''\n};",
                            "codeLine": 34,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "duplicateTracking",
                            "type": "variable",
                            "description": "Object to track duplicates of different code objects.",
                            "codeSnippet": "const duplicateTracking: dupTrack = {\n    classes: [],\n    functions: [],\n    variables: [],\n    types: [],\n    comments: [],\n    imports: [],\n    exports: [],\n    interfaces: []\n};",
                            "codeLine": 50,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "duplicateCheck",
                            "type": "variable",
                            "description": "Function to check for duplicates in code objects.",
                            "codeSnippet": "const duplicateCheck = (obj: CodeObject, type: CodeObjectType): boolean => {\n    const objName = obj.name;\n    const objContent = obj.codeSnippet;\n    const objType = obj.type;\n\n    if ((objName || objContent) && objType) {\n        const dupObj = {\n            name: objName,\n            content: objContent,\n            type: objType\n        };\n\n        // Check to see if the object already exists in the duplicate tracking\n        let bFound = false;\n        for (const [section, content] of Object.entries(duplicateTracking)) {\n            const contentObj = content as dupObj[];\n\n            // If the same name and the same type, we will go ahead and omit it\n            const found = contentObj.find((item) => (item.name === objName || item.content === objContent) && item.type === objType);\n\n            if (typeof found !== 'undefined') {\n                bFound = true;\n                break;\n            }\n        }\n\n        if (bFound === true) {\n            return true;\n        }\n\n        switch (type) {\n            case 'class':\n                duplicateTracking.classes.push(dupObj);\n                break;\n            case 'function':\n                duplicateTracking.functions.push(dupObj);\n                break;\n            case 'variable':\n                duplicateTracking.variables.push(dupObj);\n                break;\n            case 'type':\n                duplicateTracking.types.push(dupObj);\n                break;\n            // case 'comment':\n            //     duplicateTracking.comments.push(dupObj);\n            //     break;\n            case 'import':\n                duplicateTracking.imports.push(dupObj);\n                break;\n            case 'export':\n                duplicateTracking.exports.push(dupObj);\n                break;\n            case 'interface':\n                duplicateTracking.interfaces.push(dupObj);\n                break;\n            default:\n                break;\n        }\n\n        return false;\n    }\n\n    return false;\n};",
                            "codeLine": 61,
                            "codeIndent": 2,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "dupObj",
                            "description": "An interface representing a duplicate object with optional name and content, and a mandatory type.",
                            "codeSnippet": "interface dupObj {\n    name?: string;\n    content?: string;\n    type: CodeObjectType;\n}",
                            "codeLine": 38,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "dupTrack",
                            "description": "An interface representing the structure for tracking duplicates across different code object types.",
                            "codeSnippet": "interface dupTrack {\n    classes: dupObj[];\n    functions: dupObj[];\n    variables: dupObj[];\n    types: dupObj[];\n    comments: dupObj[];\n    imports: dupObj[];\n    exports: dupObj[];\n    interfaces: dupObj[];\n}",
                            "codeLine": 45,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "interfaces": [
                        {
                            "name": "dupObj",
                            "type": "interface",
                            "description": "Interface for tracking duplicate objects with optional name and content, and a required type.",
                            "codeSnippet": "interface dupObj { name?: string; content?: string; type: CodeObjectType; }",
                            "codeLine": 45,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "dupTrack",
                            "type": "interface",
                            "description": "Interface for tracking duplicates of various code object types.",
                            "codeSnippet": "interface dupTrack { classes: dupObj[]; functions: dupObj[]; variables: dupObj[]; types: dupObj[]; comments: dupObj[]; imports: dupObj[]; exports: dupObj[]; interfaces: dupObj[]; }",
                            "codeLine": 50,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "imports": [
                        {
                            "name": "CodeObject, ProjectSummary, CodeObjectType",
                            "type": "import",
                            "description": "Imports the CodeObject, ProjectSummary, and CodeObjectType types from the local objectSchemas module.",
                            "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Imports the fs (file system) module from Node.js for interacting with the file system.",
                            "codeSnippet": "import fs from 'fs';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "path",
                            "type": "import",
                            "description": "Imports the path module from Node.js for handling and transforming file paths.",
                            "codeSnippet": "import path from 'path';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports and configures the dotenv module to load environment variables from a .env file.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "exports": []
                }
            },
            "documentData": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";\nimport fs from 'fs';\nimport path from 'path';\nimport \"dotenv/config\";\n\nconst backupDirectory = path.join(__dirname, 'backup');\n\nfunction jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const projectFolder = path.join(outputFolder, `${projectSummary.projectName}-${timestamp}`);\n    fs.mkdirSync(projectFolder, { recursive: true });\n\n    const toc: string[] = [];\n    \n    toc.push(`# Project | ${projectSummary.projectName}`);\n    toc.push(`\\n## Project Description\\n${projectSummary.projectDescription.goal}`);\n    toc.push(`\\n## Features and Functions\\n${projectSummary.projectDescription.features_functions}`);\n    toc.push(`\\n## Team Context\\n${projectSummary.teamContext}`);\n    toc.push(`\\n## Table of Contents\\n`);\n\n    // Process Code Files\n    projectSummary.codeFiles.forEach(file => {\n        const fileName = `${file.fileName}.md`;\n        const filePath = path.join(projectFolder, fileName);\n        toc.push(`\\n- [${file.fileName}](./${fileName})`);\n\n        let fileContent = `# ${file.fileName} - ${projectSummary.projectName}\\n`;\n        fileContent += `\\n**Summary:** ${file.codeSummary.goal}\\n`;\n        fileContent += `\\n- **File Location:** ${file.fileLocation}`;\n        fileContent += `\\n- **Language:** ${file.language}`;\n        fileContent += `\\n## Table of Contents\\n`;\n\n        const sectionLinks: string[] = [];\n\n        const sectionContent = {\n            classes: '',\n            functions: '',\n            variables: '',\n            types: '',\n            comments: '',\n            imports: '',\n            exports: '',\n            interfaces: ''\n        };\n\n        interface dupObj {\n            name?: string;\n            content?: string;\n            type: CodeObjectType;\n        }\n\n        interface dupTrack {\n            classes: dupObj[];\n            functions: dupObj[];\n            variables: dupObj[];\n            types: dupObj[];\n            comments: dupObj[];\n            imports: dupObj[];\n            exports: dupObj[];\n            interfaces: dupObj[];\n        }\n\n        const duplicateTracking: dupTrack = {\n            classes: [],\n            functions: [],\n            variables: [],\n            types: [],\n            comments: [],\n            imports: [],\n            exports: [],\n            interfaces: []\n        };\n\n        const duplicateCheck = (obj: CodeObject, type: CodeObjectType): boolean => {\n            const objName = obj.name;\n            const objContent = obj.codeSnippet;\n            const objType = obj.type;\n\n            if ((objName || objContent) && objType) {\n                const dupObj = {\n                    name: objName,\n                    content: objContent,\n                    type: objType\n                };\n\n                // Check to see if the object already exists in the duplicate tracking\n                let bFound = false;\n                for (const [section, content] of Object.entries(duplicateTracking)) {\n                    const contentObj = content as dupObj[];\n\n                    // If the same name and the same type, we will go ahead and omit it\n                    const found = contentObj.find((item) => (item.name === objName || item.content === objContent) && item.type === objType);\n\n                    if (typeof found !== 'undefined') {\n                        bFound = true;\n                        break;\n                    }\n                }\n\n                if (bFound === true) {\n                    return true;\n                }\n\n                switch (type) {\n                    case 'class':\n                        duplicateTracking.classes.push(dupObj);\n                        break;\n                    case 'function':\n                        duplicateTracking.functions.push(dupObj);\n                        break;\n                    case 'variable':\n                        duplicateTracking.variables.push(dupObj);\n                        break;\n                    case 'type':\n                        duplicateTracking.types.push(dupObj);\n                        break;\n                    // case 'comment':\n                    //     duplicateTracking.comments.push(dupObj);\n                    //     break;\n                    case 'import':\n                        duplicateTracking.imports.push(dupObj);\n                        break;\n                    case 'export':\n                        duplicateTracking.exports.push(dupObj);\n                        break;\n                    case 'interface':\n                        duplicateTracking.interfaces.push(dupObj);\n                        break;\n                    default:\n                        break;\n                }\n\n                return false;\n            }\n\n            return false;\n        };\n\n        Object.keys(file.codeObjects).forEach(key => {\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 140,
                "codeChunkLineEnd": 258,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "generateCodeObjectContent",
                            "type": "function",
                            "description": "Generates content for a given code object with specified indentation.",
                            "codeSnippet": "function generateCodeObjectContent(codeObject: CodeObject, indent: number): string { ... }",
                            "codeLine": 87,
                            "codeIndent": 1,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "codeObject",
                                    "type": "CodeObject",
                                    "description": "The code object to generate content for.",
                                    "example": "{ name: 'example', type: 'function', description: 'An example function', codeSnippet: 'function example() { ... }', codeLine: 10, codeIndent: 2, fileName: 'example.ts', fileLocation: './src/example.ts', isExported: true, isPrivate: false, isAsync: false }"
                                },
                                {
                                    "name": "indent",
                                    "type": "number",
                                    "description": "The level of indentation to apply to the generated content.",
                                    "example": 2
                                }
                            ],
                            "functionReturns": {
                                "name": "content",
                                "type": "string",
                                "description": "The generated content for the code object.",
                                "example": "### example - [FUNCTION]\n---\n**Description:** An example function\n**Code Snippet:**\n\nfunction example() { ... }\n```\n- **Line:** 10\n- **Indent:** 2\n- **Location:** example.ts (./src/example.ts)\n- **Exported:** true\n- **Private:** false\n- **Async:** false\n\n"
                            }
                        },
                        {
                            "name": "getEmoji",
                            "type": "function",
                            "description": "Returns an emoji based on the type of code object.",
                            "codeSnippet": "function getEmoji(type: string): string { ... }",
                            "codeLine": 142,
                            "codeIndent": 1,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "type",
                                    "type": "string",
                                    "description": "The type of code object.",
                                    "example": "functions"
                                }
                            ],
                            "functionReturns": {
                                "name": "emoji",
                                "type": "string",
                                "description": "The emoji corresponding to the code object type.",
                                "example": "🔧"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "baseObject",
                            "type": "variable",
                            "description": "Holds the code objects from the file.",
                            "codeSnippet": "const baseObject = file.codeObjects as any;",
                            "codeLine": 1,
                            "codeIndent": 12,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "obj",
                            "type": "variable",
                            "description": "Holds the array of code objects for a specific key.",
                            "codeSnippet": "const obj = baseObject[key] as any[];",
                            "codeLine": 2,
                            "codeIndent": 12,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "content",
                            "type": "variable",
                            "description": "Holds the generated content for a code object.",
                            "codeSnippet": "const content = generateCodeObjectContent(codeObject, 0);",
                            "codeLine": 6,
                            "codeIndent": 16,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileFolder",
                            "type": "variable",
                            "description": "Holds the directory path of the file.",
                            "codeSnippet": "const fileFolder = path.dirname(filePath);",
                            "codeLine": 37,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "tocPath",
                            "type": "variable",
                            "description": "Holds the path to the README.md file in the project folder.",
                            "codeSnippet": "const tocPath = path.join(projectFolder, 'README.md');",
                            "codeLine": 47,
                            "codeIndent": 4,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "indentation",
                            "type": "variable",
                            "description": "Holds the indentation string based on the indent level.",
                            "codeSnippet": "const indentation = '  '.repeat(indent);",
                            "codeLine": 53,
                            "codeIndent": 4,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fancyBar",
                            "type": "variable",
                            "description": "Holds a decorative string used in the content.",
                            "codeSnippet": "const fancyBar = '---'.repeat(20);",
                            "codeLine": 54,
                            "codeIndent": 4,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "content",
                            "type": "variable",
                            "description": "Holds the generated content string for a code object.",
                            "codeSnippet": "let content = `\\n\\n${indentation}### ${codeObject.name || 'Other Details'} - [${(codeObject.type || 'Undefined').toUpperCase()}]`;",
                            "codeLine": 56,
                            "codeIndent": 4,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "path",
                            "type": "import",
                            "description": "Node.js module for handling and transforming file paths",
                            "codeSnippet": "const path = require('path');",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Node.js module for interacting with the file system",
                            "codeSnippet": "const fs = require('fs');",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "exports": []
                }
            },
            "documentData": "            const baseObject = file.codeObjects as any;\n            const obj = baseObject[key] as any[];\n            obj.forEach((codeObject: CodeObject) => {\n                if (duplicateCheck(codeObject, codeObject.type) === true) {\n                    console.warn(`Duplicate object found: ${codeObject.name}`);\n                    return;\n                }\n\n                const content = generateCodeObjectContent(codeObject, 0);\n                switch (codeObject.type) {\n                    case 'class':\n                        sectionContent.classes += content;\n                        break;\n                    case 'function':\n                        sectionContent.functions += content;\n                        break;\n                    case 'variable':\n                        sectionContent.variables += content;\n                        break;\n                    case 'type':\n                        sectionContent.types += content;\n                        break;\n                    // case 'comment':\n                    //     sectionContent.comments += content;\n                    //     break;\n                    case 'import':\n                        sectionContent.imports += content;\n                        break;\n                    case 'export':\n                        sectionContent.exports += content;\n                        break;\n                    case 'interface':\n                        sectionContent.interfaces += content;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n\n        for (const [section, content] of Object.entries(sectionContent)) {\n            if (content) {\n                const emoji = getEmoji(section);\n                const sectionString = `${section}`\n                const sectionTitle = `## ${sectionString}\\n${emoji} **${sectionString.toUpperCase()}**`;\n                fileContent += `${sectionTitle}\\n${content}\\n`;\n                sectionLinks.push(`- [${sectionString}](#${sectionString})`);\n            }\n        }\n\n        fileContent = fileContent.replace('## Table of Contents\\n', `## Table of Contents\\n${sectionLinks.join('\\n')}\\n`);\n\n        // Make sure the folder path for the file exists\n        const fileFolder = path.dirname(filePath);\n\n        try {\n            fs.mkdirSync(fileFolder, { recursive: true });\n        } catch (err) {\n            console.error(`Error creating folder for ${file.fileName}`);\n        }\n\n        fs.writeFileSync(filePath, fileContent);\n    });\n\n    // Write TOC\n    const tocPath = path.join(projectFolder, 'README.md');\n    fs.writeFileSync(tocPath, toc.join('\\n'));\n}\n\nfunction generateCodeObjectContent(codeObject: CodeObject, indent: number): string {\n    const indentation = '  '.repeat(indent);\n    const fancyBar = '---'.repeat(20);\n\n    let content = `\\n\\n${indentation}### ${codeObject.name || 'Other Details'} - [${(codeObject.type || 'Undefined').toUpperCase()}]`;\n    content += `\\n${fancyBar}`;\n    content += `\\n**Description:** ${codeObject.description || 'undefined'}`;\n    content += `\\n**Code Snippet:**\\n\\`\\`\\`\\n${codeObject.codeSnippet || codeObject.content}\\n\\`\\`\\``;\n    content += `\\n${indentation}- **Line:** ${codeObject.codeLine !== undefined ? codeObject.codeLine : 'undefined'}`;\n    content += `\\n${indentation}- **Indent:** ${codeObject.codeIndent !== undefined ? codeObject.codeIndent : 'undefined'}`;\n    content += `\\n${indentation}- **Location:** ${codeObject.fileName || 'undefined'} (${codeObject.fileLocation || 'undefined'})`;\n    content += `\\n${indentation}- **Exported:** ${codeObject.isExported !== undefined ? codeObject.isExported : 'Not Available'}`;\n    content += `\\n${indentation}- **Private:** ${codeObject.isPrivate !== undefined ? codeObject.isPrivate : 'Not Available'}`;\n    content += `\\n${indentation}- **Async:** ${codeObject.isAsync !== undefined ? codeObject.isAsync : 'Not Available'}\\n\\n`;\n\n    if (codeObject.functionParameters && codeObject.functionParameters.length > 0) {\n        content += `\\n${indentation}###### Function Parameters:`;\n        codeObject.functionParameters.forEach(param => {\n            content += `\\n${indentation}- **${param.name}** (${param.type}): ${param.description} \\n Example: ${param.example}`;\n        });\n    }\n\n    if (codeObject.functionReturns) {\n        content += `\\n${indentation}###### Function Returns:`;\n        content += `\\n${indentation}- **Type:** ${codeObject.functionReturns.type}`;\n        content += `\\n${indentation}- **Description:** ${codeObject.functionReturns.description}`;\n        content += `\\n${indentation}- **Example:** ${codeObject.functionReturns.example}`;\n    }\n\n    if (codeObject.subObjects && codeObject.subObjects.length > 0) {\n        content += `\\n${indentation}###### Sub Objects:`;\n        codeObject.subObjects.forEach(subObj => {\n            content += generateCodeObjectContent(subObj, indent + 1);\n        });\n    }\n\n    return content;\n}\n\nfunction getEmoji(type: string): string {\n    switch (type) {\n        case 'classes':\n            return '📘';\n        case 'functions':\n            return '🔧';\n        case 'variables':\n            return '🧮';\n        case 'types':\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 258,
                "codeChunkLineEnd": 339,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "generateDocumentation",
                            "type": "function",
                            "description": "Generates documentation for a project by saving the project context to a JSON file and converting it to Markdown.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "folderPath",
                                    "type": "string",
                                    "description": "The path to the folder where the documentation will be generated.",
                                    "example": "/path/to/folder"
                                },
                                {
                                    "name": "projectContext",
                                    "type": "ProjectSummary | null",
                                    "description": "The project context to be documented. If null, it will be read from the JSON file.",
                                    "example": "null"
                                },
                                {
                                    "name": "jsonFile",
                                    "type": "string",
                                    "description": "Optional path to an existing JSON file containing the project context.",
                                    "example": "/path/to/projectContext.json"
                                }
                            ],
                            "functionReturns": {
                                "name": "success",
                                "type": "boolean",
                                "description": "Returns true if the documentation was successfully generated, otherwise false.",
                                "example": "true"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "folderPath",
                            "type": "variable",
                            "description": "The path to the folder where documentation will be generated.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "projectContext",
                            "type": "variable",
                            "description": "The context of the project, which can be null.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "jsonFile",
                            "type": "variable",
                            "description": "Optional path to a JSON file.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "backupDirectory",
                            "type": "variable",
                            "description": "The backup directory path used if the main folder path does not exist.",
                            "codeSnippet": "if (!fs.existsSync(backupDirectory)) {",
                            "codeLine": 22,
                            "codeIndent": 4,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "timeStamp",
                            "type": "variable",
                            "description": "A timestamp used to create a unique filename.",
                            "codeSnippet": "const timeStamp = new Date().toISOString().replace(/[:.]/g, '-');",
                            "codeLine": 38,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "model",
                            "type": "variable",
                            "description": "The model name used in the filename, defaulting to 'ml'.",
                            "codeSnippet": "const model = process.env.LLM_TO_USE || 'ml';",
                            "codeLine": 39,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "projectContextPath",
                            "type": "variable",
                            "description": "The path to the project context JSON file.",
                            "codeSnippet": "const projectContextPath = path.join(folderPath, `projectContext-${timeStamp}-${model}.json`);",
                            "codeLine": 40,
                            "codeIndent": 8,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "ProjectSummary",
                            "description": "Represents a summary of the project context.",
                            "codeSnippet": "projectContext: ProjectSummary | null = null",
                            "codeLine": 7,
                            "codeIndent": 4,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Node.js File System module used for file operations such as checking existence, creating directories, and writing files.",
                            "codeSnippet": "import fs from 'fs';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        },
                        {
                            "name": "path",
                            "type": "import",
                            "description": "Node.js Path module used for handling and transforming file paths.",
                            "codeSnippet": "import path from 'path';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "generateDocumentation",
                            "type": "export",
                            "description": "Asynchronous function to generate documentation for a given folder path and project context. It ensures the folder path exists and is writable, saves the project context to a JSON file, and converts the JSON to Markdown.",
                            "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                            "codeLine": 12,
                            "codeIndent": 0,
                            "fileName": "documentationGenerator.ts",
                            "fileLocation": ".//src/documentationGenerator.ts"
                        }
                    ]
                }
            },
            "documentData": "            return '🏷️';\n        case 'comments':\n            return '💬';\n        case 'imports':\n            return '📥';\n        case 'exports':\n            return '📤';\n        case 'interfaces':\n            return '🌉';\n        default:\n            return '';\n    }\n}\n\nexport async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {\n    if (!fs.existsSync(folderPath)) {\n        try {\n            fs.mkdirSync(folderPath, {\n                recursive: true\n            });\n        } catch (err) {\n            console.error(err);\n            console.log(\"Using Backup Directory\");\n\n            if (!fs.existsSync(backupDirectory)) {\n                fs.mkdirSync(backupDirectory, {\n                    recursive: true\n                });\n            }\n\n            if (!fs.existsSync(backupDirectory)) {\n                console.error(\"Backup Directory does not exist. We could not make it!\");\n                return false;\n            }\n\n            folderPath = backupDirectory;\n        }\n    }\n\n    // Check to make sure the filepath is writeable before proceeding\n    try {\n        fs.accessSync(folderPath, fs.constants.W_OK);\n    } catch (err) {\n        console.error(`Cannot write to ${folderPath}. Please check the path and try again.`);\n        return false;\n    }\n\n    // Save projectContext to a JSON file\n    if (!jsonFile) {\n        const timeStamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const model = process.env.LLM_TO_USE || 'ml';\n        const projectContextPath = path.join(folderPath, `projectContext-${timeStamp}-${model}.json`);\n        jsonFile = projectContextPath;\n\n        try {\n            fs.writeFileSync(jsonFile, JSON.stringify(projectContext, null, 4));\n        } catch (err) {\n            console.error(`Error writing project context to ${projectContextPath}`);\n        }\n    } else {\n        const projectContextPath = jsonFile;\n\n        if (!projectContext) {\n            try {\n                projectContext = JSON.parse(fs.readFileSync(projectContextPath, 'utf-8')) as ProjectSummary;\n            } catch (err) {\n                console.error(`Error reading project context from ${projectContextPath}`);\n            }\n        }\n    }\n\n    // parse the context file, etc.\n    if (!projectContext) {\n        console.error(`Error generating MD file. Project context is empty.`);\n        return false;\n    }\n    jsonToMarkdown(projectContext, folderPath);\n\n    return true;\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 121,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "genCodeChunkObj",
                            "type": "function",
                            "description": "Processes each chunk's code objects and updates the project summary.",
                            "codeSnippet": "async function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{ ... }",
                            "codeLine": 32,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectSummary",
                                    "type": "ProjectSummary",
                                    "description": "Summary of the project.",
                                    "example": "projectSummary"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "Path to the file being processed.",
                                    "example": "'.//src/codeParser.ts'"
                                },
                                {
                                    "name": "chunk",
                                    "type": "string",
                                    "description": "Chunk of code to process.",
                                    "example": "chunk"
                                }
                            ],
                            "functionReturns": {
                                "name": "chunkCodeObjects",
                                "type": "CodeObject",
                                "description": "Processed code objects for the chunk.",
                                "example": "chunkCodeObjects"
                            }
                        },
                        {
                            "name": "mergeObjectArrays",
                            "type": "function",
                            "description": "Merges incoming code object's key-array pairs with the existing code object array.",
                            "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                            "codeLine": 73,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": false,
                            "functionParameters": [
                                {
                                    "name": "codeObjArray",
                                    "type": "CodeObject",
                                    "description": "Existing code object array.",
                                    "example": "codeObjArray"
                                },
                                {
                                    "name": "newCodeObj",
                                    "type": "any",
                                    "description": "New code object to merge.",
                                    "example": "newCodeObj"
                                }
                            ],
                            "functionReturns": {
                                "name": "mergedCodeObj",
                                "type": "CodeObject",
                                "description": "Merged code object array.",
                                "example": "mergedCodeObj"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "llmToUse",
                            "type": "variable",
                            "description": "Specifies the language model to use, retrieved from environment variables.",
                            "codeSnippet": "const llmToUse = process.env.LLM_TO_USE || undefined;",
                            "codeLine": 23,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "breakNum",
                            "type": "variable",
                            "description": "Specifies the maximum token split value, retrieved from environment variables or defaults to 400.",
                            "codeSnippet": "const breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;",
                            "codeLine": 24,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "objectKeys",
                            "type": "variable",
                            "description": "An array of code object types to be processed.",
                            "codeSnippet": "const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'imports', 'exports']",
                            "codeLine": 30,
                            "codeIndent": 1,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "chunkCodeObjectsAny",
                            "type": "variable",
                            "description": "An object to store the code objects for each chunk.",
                            "codeSnippet": "const chunkCodeObjectsAny = {} as any;",
                            "codeLine": 31,
                            "codeIndent": 1,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "promptTemplate",
                            "type": "variable",
                            "description": "A template string for generating prompts based on the type of code object.",
                            "codeSnippet": "let promptTemplate = \"\"",
                            "codeLine": 34,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "mergedCodeObj",
                            "type": "variable",
                            "description": "An object to store the merged code objects.",
                            "codeSnippet": "const mergedCodeObj: any = codeObjArray;",
                            "codeLine": 71,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "mergedCodeKeys",
                            "type": "variable",
                            "description": "An array of keys from the merged code objects.",
                            "codeSnippet": "const mergedCodeKeys = Object.keys(mergedCodeObj);",
                            "codeLine": 86,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "glob",
                            "type": "import",
                            "description": "Imports the 'glob' module for file pattern matching.",
                            "codeSnippet": "import { glob } from \"glob\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "readFile",
                            "type": "import",
                            "description": "Imports the 'readFile' function from 'fs/promises' for reading files asynchronously.",
                            "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "stat",
                            "type": "import",
                            "description": "Imports the 'stat' function from 'fs/promises' for retrieving file status asynchronously.",
                            "codeSnippet": "import { readFile, stat } from \"fs/promises\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeFileSummary",
                            "type": "import",
                            "description": "Imports the 'CodeFileSummary' type from './objectSchemas'.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeObject",
                            "type": "import",
                            "description": "Imports the 'CodeObject' type from './objectSchemas'.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeObjects",
                            "type": "import",
                            "description": "Imports the 'CodeObjects' type from './objectSchemas'.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "ProjectSummary",
                            "type": "import",
                            "description": "Imports the 'ProjectSummary' type from './objectSchemas'.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "RagData",
                            "type": "import",
                            "description": "Imports the 'RagData' type from './objectSchemas'.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "codeSummary",
                            "type": "import",
                            "description": "Imports the 'codeSummary' function from './objectSchemas'.",
                            "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "infer",
                            "type": "import",
                            "description": "Imports the 'infer' function from './llmInterface'.",
                            "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "callLLM",
                            "type": "import",
                            "description": "Imports the 'callLLM' function from './llmInterface'.",
                            "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getCodeSummaryFromLLM",
                            "type": "import",
                            "description": "Imports the 'getCodeSummaryFromLLM' function from './llmInterface'.",
                            "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "type": "import",
                            "description": "Imports the 'getLanguageTypeFromFile' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "classesPrompt",
                            "type": "import",
                            "description": "Imports the 'classesPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "functionsPrompt",
                            "type": "import",
                            "description": "Imports the 'functionsPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "variablesPrompt",
                            "type": "import",
                            "description": "Imports the 'variablesPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "typesPrompt",
                            "type": "import",
                            "description": "Imports the 'typesPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "interfacesPrompt",
                            "type": "import",
                            "description": "Imports the 'interfacesPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "importsPrompt",
                            "type": "import",
                            "description": "Imports the 'importsPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "exportsPrompt",
                            "type": "import",
                            "description": "Imports the 'exportsPrompt' function from './prompt'.",
                            "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "type": "import",
                            "description": "Imports the 'saveToVectorDatabase' function from './vectorDB'.",
                            "codeSnippet": "import { saveToVectorDatabase } from \"./vectorDB\";",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "type": "import",
                            "description": "Imports the 'breakCodeIntoChunks' function from './shared'.",
                            "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getFileContentLen",
                            "type": "import",
                            "description": "Imports the 'getFileContentLen' function from './shared'.",
                            "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "getTokens",
                            "type": "import",
                            "description": "Imports the 'getTokens' function from './shared'.",
                            "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "Imports the 'fs' module for file system operations.",
                            "codeSnippet": "import fs from \"fs\";",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "dotenv/config",
                            "type": "import",
                            "description": "Imports the 'dotenv/config' module to load environment variables from a .env file.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "mergeObjectArrays",
                            "type": "export",
                            "description": "Function to merge incoming code objects with existing code objects, handling both new and existing keys.",
                            "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                            "codeLine": 67,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ]
                }
            },
            "documentData": "import { glob } from \"glob\";\nimport { readFile, stat } from \"fs/promises\";\nimport {\n  CodeFileSummary,\n  CodeObject,\n  CodeObjects,\n  ProjectSummary,\n  RagData,\n  codeSummary,\n} from \"./objectSchemas\";\nimport { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";\nimport { \n    getLanguageTypeFromFile, \n    classesPrompt,\n    functionsPrompt,\n    variablesPrompt,\n    typesPrompt,\n    interfacesPrompt,\n    // commentsPrompt,\n    importsPrompt,\n    exportsPrompt\n } from \"./prompt\";\nimport { saveToVectorDatabase } from \"./vectorDB\";\nimport { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";\nimport fs from \"fs\";\nimport \"dotenv/config\";\n\nconst llmToUse = process.env.LLM_TO_USE || undefined;\nconst breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;\n\n\nasync function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{\n    // Process each chunk's code objects (update projectSummary.ragData, etc.)\n    const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'imports', 'exports']\n    const chunkCodeObjectsAny = {} as any;\n    \n    for (const key of objectKeys) {\n\n    let promptTemplate = \"\"\n\n    switch (key) {\n        case 'classes':\n            promptTemplate = classesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'functions':\n            promptTemplate = functionsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'variables':\n            promptTemplate = variablesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'types':\n            promptTemplate = typesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'interfaces':\n            promptTemplate = interfacesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        // case 'comments':\n        //     promptTemplate = commentsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n        //     break;\n        case 'imports':\n            promptTemplate = importsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'exports':\n            promptTemplate = exportsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        default:\n            console.error(\"Error: Invalid object key\")\n            break;\n    }\n\n    const codeObjects = await callLLM(\n        promptTemplate,\n        projectSummary,\n        chunk,\n        filePath,\n        true,\n        llmToUse\n      );\n\n     // insert the object into the chunkCodeObjects\n     chunkCodeObjectsAny[key] = codeObjects[key];\n    }\n\n    const chunkCodeObjects = chunkCodeObjectsAny as CodeObject;\n\n    return chunkCodeObjects;\n}\n\n\nexport function mergeObjectArrays(\n  codeObjArray: CodeObject,\n  newCodeObj: any\n): CodeObject {\n  // We need to merge our incoming codeObj's key-array pairs with the existing codeObjArray\n  // If the key already exists, we need to merge the arrays\n  // If the key does not exist, we need to add it to the codeObjArray\n  const mergedCodeObj: any = codeObjArray;\n  for (const key in newCodeObj) {\n\n    // if the current key is a string, skip it\n    if (typeof newCodeObj[key] === \"string\" || newCodeObj[key] instanceof String) {\n      continue;\n    }\n    if (typeof mergedCodeObj[key] === \"string\" || mergedCodeObj[key] instanceof String) {\n      console.warn(\"Error: Code Object is not an object\");\n      console.log(newCodeObj[key]);\n      continue;\n    }\n\n    if (key in mergedCodeObj) {\n      mergedCodeObj[key] = [...mergedCodeObj[key], ...newCodeObj[key]];\n    } else {\n      mergedCodeObj[key] = newCodeObj[key];\n    }\n  }\n\n  // Delete any duplicate code objects:\n  console.log(\"Deleting Duplicate Code Objects\");\n  const mergedCodeKeys = Object.keys(mergedCodeObj);\n    for (const key of mergedCodeKeys) {\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 121,
                "codeChunkLineEnd": 241,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "parseCodebase",
                            "type": "function",
                            "description": "Parses the codebase located at the given project path and generates a summary of the project.",
                            "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                            "codeLine": 30,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": true,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "The path to the project directory or file.",
                                    "example": "/path/to/project"
                                },
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project.",
                                    "example": "MyProject"
                                }
                            ],
                            "functionReturns": {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "A summary of the project including its name, description, location, code files, and other metadata.",
                                "example": {
                                    "projectName": "MyProject",
                                    "projectDescription": {},
                                    "projectLocation": "/path/to/project",
                                    "codeFiles": [],
                                    "ragData": [],
                                    "teamContext": ""
                                }
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "foundKeys",
                            "type": "variable",
                            "description": "An array to store unique keys found in the merged code object.",
                            "codeSnippet": "const foundKeys: string[] = [];",
                            "codeLine": 1,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "projectSummary",
                            "type": "variable",
                            "description": "An object to store the summary of the project being parsed.",
                            "codeSnippet": "const projectSummary: ProjectSummary = { projectName: projectName, projectDescription: {} as codeSummary, projectLocation: projectPath, codeFiles: [], ragData: [], teamContext: \"\", };",
                            "codeLine": 27,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ignorePatterns",
                            "type": "variable",
                            "description": "An array of patterns to ignore while parsing the project files.",
                            "codeSnippet": "const ignorePatterns = [ \"node_modules/**\", \"dist/**\", ...(await getIgnoredFiles(projectPath)), ];",
                            "codeLine": 36,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "filePaths",
                            "type": "variable",
                            "description": "An array to store the paths of the files to be parsed.",
                            "codeSnippet": "let filePaths: string[] = [];",
                            "codeLine": 41,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "file",
                            "type": "variable",
                            "description": "A variable to store the name of the file being processed.",
                            "codeSnippet": "const file = projectPath.split(\"/\").pop();",
                            "codeLine": 53,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fullFilePath",
                            "type": "variable",
                            "description": "A variable to store the full path of the file being parsed.",
                            "codeSnippet": "const fullFilePath = `${projectPath}/${filePath}`;",
                            "codeLine": 71,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileLanguage",
                            "type": "variable",
                            "description": "A variable to store the inferred language of the file being parsed.",
                            "codeSnippet": "const fileLanguage = await infer( getLanguageTypeFromFile(fullFilePath), \"TEXT STRING\", \"language\", false, undefined, undefined, llmToUse );",
                            "codeLine": 74,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "codeFileSummary",
                            "type": "variable",
                            "description": "An object to store the summary of the code file being parsed.",
                            "codeSnippet": "const codeFileSummary: CodeFileSummary = { fileName: filePath, fileLocation: fullFilePath, codeSummary: {} as codeSummary, language: fileLanguage.language || \"Unknown\", executionFlow: [], codeObjects: {} as CodeObject, };",
                            "codeLine": 79,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "currentLine",
                            "type": "variable",
                            "description": "A variable to keep track of the current line number while parsing the file.",
                            "codeSnippet": "let currentLine = 0;",
                            "codeLine": 86,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "ProjectSummary",
                            "description": "Represents a summary of the project including its name, description, location, code files, RAG data, and team context.",
                            "codeSnippet": "type ProjectSummary = { projectName: string; projectDescription: codeSummary; projectLocation: string; codeFiles: CodeFileSummary[]; ragData: any[]; teamContext: string; };",
                            "codeLine": 42,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "CodeFileSummary",
                            "description": "Represents a summary of a code file including its name, location, code summary, language, execution flow, and code objects.",
                            "codeSnippet": "type CodeFileSummary = { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: any[]; codeObjects: CodeObject; };",
                            "codeLine": 69,
                            "codeIndent": 4,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [
                        {
                            "name": "fs",
                            "type": "import",
                            "description": "File system module used for interacting with the file system.",
                            "codeSnippet": "import fs from 'fs';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        },
                        {
                            "name": "glob",
                            "type": "import",
                            "description": "Glob module used for matching files using patterns.",
                            "codeSnippet": "import glob from 'glob';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ],
                    "exports": [
                        {
                            "name": "parseCodebase",
                            "type": "export",
                            "description": "Asynchronously parses the codebase at the given project path and returns a summary of the project.",
                            "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                            "codeLine": 36,
                            "codeIndent": 0,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ]
                }
            },
            "documentData": "\n    const foundKeys: string[] = [];\n\n    // Make sure the key object is iterable\n    if (!Array.isArray(mergedCodeObj[key])) {\n      console.warn(\"Error: Code Object is not an array\");\n      console.log(mergedCodeObj[key]);\n      continue;\n    }\n\n    for (const arrayObj of mergedCodeObj[key]) {\n      if (\"name\" in arrayObj) {\n        if (foundKeys.includes(arrayObj.name)) {\n          mergedCodeObj[key] = mergedCodeObj[key].filter(\n            (obj: any) => obj.name !== arrayObj.name\n          );\n        } else {\n          foundKeys.push(arrayObj.name);\n        }\n      } else if (\"content\" in arrayObj) {\n        if (foundKeys.includes(arrayObj.content)) {\n          mergedCodeObj[key] = mergedCodeObj[key].filter(\n            (obj: any) => obj.content !== arrayObj.content\n          );\n        } else {\n          foundKeys.push(arrayObj.content);\n        }\n      } else {\n        console.warn(\"Error: Code Object has no name or content property\");\n        continue;\n      }\n    }\n  }\n  return mergedCodeObj;\n}\n\nexport async function parseCodebase(\n  projectPath: string,\n  projectName: string\n): Promise<ProjectSummary> {\n  const projectSummary: ProjectSummary = {\n    projectName: projectName,\n    projectDescription: {} as codeSummary,\n    projectLocation: projectPath,\n    codeFiles: [],\n    ragData: [],\n    teamContext: \"\", // Placeholder, TODO==> Add support for team context\n  };\n\n  const ignorePatterns = [\n    \"node_modules/**\",\n    \"dist/**\",\n    ...(await getIgnoredFiles(projectPath)),\n  ];\n  let filePaths: string[] = [];\n\n  // Determine if the projectPath is a directory or a file\n  if (fs.lstatSync(projectPath).isDirectory()) {\n    filePaths = await glob(\"**/*.{ts,js,tsx,jsx}\", {\n      cwd: projectPath,\n      ignore: ignorePatterns,\n    }); // TODO=> Add support for way more files\n  } else {\n    const file = projectPath.split(\"/\").pop();\n    projectPath = projectPath.split(\"/\").slice(0, -1).join(\"/\");\n\n    if (!file) {\n      throw new Error(\"Invalid file path\");\n    }\n    filePaths = [file];\n  }\n\n  await glob(\"**/*.{ts,js,tsx,jsx}\", {\n    cwd: projectPath,\n    ignore: ignorePatterns,\n  }); // TODO=> Add support for way more files\n\n  for (const filePath of filePaths) {\n    console.log(`Parsing file: ${filePath}`);\n    const fullFilePath = `${projectPath}/${filePath}`;\n\n    const fileLanguage = await infer(\n      getLanguageTypeFromFile(fullFilePath),\n      \"TEXT STRING\",\n      \"language\",\n      false,\n      undefined,\n      undefined,\n      llmToUse\n    );\n    console.log(\"fileLanguage\", fileLanguage.language);\n    const codeFileSummary: CodeFileSummary = {\n      fileName: filePath,\n      fileLocation: fullFilePath,\n      codeSummary: {} as codeSummary, // Placeholder, will be updated later\n      language: fileLanguage.language || \"Unknown\",\n      executionFlow: [], // Placeholder, will be updated later\n      codeObjects: {} as CodeObject, // Placeholder, will be updated later\n    };\n    let currentLine = 0;\n\n    if ((await isFileTooLarge(fullFilePath, 750, breakNum)) == true) {\n      // 750KB is the default limit\n      // Handle large files by breaking into chunks and processing separately\n      const fileContent = await readFile(fullFilePath, \"utf-8\");\n      const codeChunks = breakCodeIntoChunks(fileContent, breakNum); // 1000 tokens per chunk\n      const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {\n        const lines = chunk.split(\"\\n\");\n        return {\n          start: currentLine,\n          end: currentLine + lines.length,\n        };\n      };\n      console.log(\"Code broken into codeChunks length =\", codeChunks.length);\n      for (const [index, chunk] of codeChunks.entries()) {\n        console.log(\n          \"Processing chunk:\",\n          index + 1,\n          \"of \",\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 241,
                "codeChunkLineEnd": 384,
                "codeObjects": {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getIgnoredFiles",
                            "type": "function",
                            "description": "Reads and returns a list of file patterns to ignore based on .gitignore and .fofoignore files in various paths.",
                            "codeSnippet": "async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }",
                            "codeLine": 88,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "The path of the project to check for ignore files.",
                                    "example": "/path/to/project"
                                }
                            ],
                            "functionReturns": {
                                "name": "ignorePatterns",
                                "type": "string[]",
                                "description": "An array of file patterns to ignore.",
                                "example": [
                                    "node_modules",
                                    "dist"
                                ]
                            }
                        },
                        {
                            "name": "getFileSizeInKB",
                            "type": "function",
                            "description": "Returns the size of a file in kilobytes.",
                            "codeSnippet": "async function getFileSizeInKB(filePath: string): Promise<number> { ... }",
                            "codeLine": 123,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path of the file to check the size of.",
                                    "example": "/path/to/file.txt"
                                }
                            ],
                            "functionReturns": {
                                "name": "fileSize",
                                "type": "number",
                                "description": "The size of the file in kilobytes.",
                                "example": 1024
                            }
                        },
                        {
                            "name": "isFileTooLarge",
                            "type": "function",
                            "description": "Checks if a file is too large based on its size in kilobytes and the number of characters.",
                            "codeSnippet": "async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars: number = 300): Promise<boolean> { ... }",
                            "codeLine": 128,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false,
                            "isAsync": true,
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path of the file to check.",
                                    "example": "/path/to/file.txt"
                                },
                                {
                                    "name": "maxFileSizeKB",
                                    "type": "number",
                                    "description": "The maximum file size in kilobytes.",
                                    "example": 1024
                                },
                                {
                                    "name": "maxChars",
                                    "type": "number",
                                    "description": "The maximum number of characters allowed in the file.",
                                    "example": 300
                                }
                            ],
                            "functionReturns": {
                                "name": "isTooLarge",
                                "type": "boolean",
                                "description": "Whether the file is too large.",
                                "example": true
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "endLine",
                            "type": "variable",
                            "description": "The ending line number of the current code chunk.",
                            "codeSnippet": "const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end;",
                            "codeLine": 5,
                            "codeIndent": 8,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "chunkCodeObjects",
                            "type": "variable",
                            "description": "The code objects generated from the current code chunk.",
                            "codeSnippet": "const chunkCodeObjects = await genCodeChunkObj(projectSummary, fullFilePath, chunk);",
                            "codeLine": 7,
                            "codeIndent": 8,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ragData",
                            "type": "variable",
                            "description": "The RAG data object containing metadata and document data for the current code chunk.",
                            "codeSnippet": "const ragData: RagData = { metadata: { filename: fullFilePath, codeChunkId: index, codeChunkLineStart: currentLine, codeChunkLineEnd: endLine, codeObjects: chunkCodeObjects, codeChunkSummary: chunkCodeObjects.description, }, documentData: chunk, };",
                            "codeLine": 9,
                            "codeIndent": 8,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fileContent",
                            "type": "variable",
                            "description": "The content of the file read as a string.",
                            "codeSnippet": "const fileContent = await readFile(fullFilePath, \"utf-8\");",
                            "codeLine": 25,
                            "codeIndent": 6,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "codeObjects",
                            "type": "variable",
                            "description": "The code objects generated from the entire file content.",
                            "codeSnippet": "const codeObjects = await genCodeChunkObj(projectSummary, fullFilePath, fileContent);",
                            "codeLine": 26,
                            "codeIndent": 6,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ragData",
                            "type": "variable",
                            "description": "The RAG data object containing metadata and document data for the entire file content.",
                            "codeSnippet": "const ragData: RagData = { metadata: { filename: fullFilePath, codeChunkId: 0, codeChunkLineStart: 0, codeChunkLineEnd: 0, codeObjects: codeObjects, codeChunkSummary: codeObjects.description, }, documentData: fileContent, };",
                            "codeLine": 30,
                            "codeIndent": 6,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "codeDescription",
                            "type": "variable",
                            "description": "A string that accumulates the code summaries of all code files.",
                            "codeSnippet": "let codeDescription = '';",
                            "codeLine": 48,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "ignorePatterns",
                            "type": "variable",
                            "description": "An array of patterns to ignore when processing files.",
                            "codeSnippet": "let ignorePatterns: string[] = [];",
                            "codeLine": 74,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "basePath",
                            "type": "variable",
                            "description": "The base path of the project directory.",
                            "codeSnippet": "const basePath = projectPath.split(\"/\").slice(0, -1).join(\"/\");",
                            "codeLine": 75,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "executionPath",
                            "type": "variable",
                            "description": "The current working directory of the process.",
                            "codeSnippet": "const executionPath = process.cwd();",
                            "codeLine": 76,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "pathsToCheck",
                            "type": "variable",
                            "description": "An array of file paths to check for ignore patterns.",
                            "codeSnippet": "const pathsToCheck = [ `${basePath}/.gitignore`, `${basePath}/.fofoignore`, `${executionPath}/.gitignore`, `${executionPath}/.fofoignore`, ];",
                            "codeLine": 80,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "fofoignoreContent",
                            "type": "variable",
                            "description": "The content of the .fofoignore file read as a string.",
                            "codeSnippet": "const fofoignoreContent = await readFile( path, \"utf-8\" );",
                            "codeLine": 87,
                            "codeIndent": 8,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "gitignoreContent",
                            "type": "variable",
                            "description": "The content of the .gitignore file read as a string.",
                            "codeSnippet": "const gitignoreContent = await readFile( path, \"utf-8\" );",
                            "codeLine": 95,
                            "codeIndent": 8,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [
                        {
                            "name": "RagData",
                            "description": "Represents the structure for storing metadata and document data for a code chunk.",
                            "codeSnippet": "const ragData: RagData = { ... };",
                            "codeLine": 10,
                            "codeIndent": 8,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts"
                        }
                    ],
                    "interfaces": [],
                    "imports": [],
                    "exports": []
                }
            },
            "documentData": "          codeChunks.length,\n          \" chunks for file \",\n          filePath\n        );\n        const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end;\n\n        const chunkCodeObjects = await genCodeChunkObj(projectSummary, fullFilePath, chunk);\n\n        const ragData: RagData = {\n          metadata: {\n            filename: fullFilePath,\n            codeChunkId: index,\n            codeChunkLineStart: currentLine,\n            codeChunkLineEnd: endLine,\n            codeObjects: chunkCodeObjects,\n            codeChunkSummary: chunkCodeObjects.description,\n          },\n          documentData: chunk,\n        };\n\n        projectSummary.ragData.push(ragData);\n\n        codeFileSummary.codeObjects = mergeObjectArrays(\n          codeFileSummary.codeObjects,\n          chunkCodeObjects\n        );\n        codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\n          chunk,\n          llmToUse\n        );\n\n        await saveToVectorDatabase(projectName, chunk, ragData);\n\n        currentLine = endLine;\n      }\n    } else {\n      const fileContent = await readFile(fullFilePath, \"utf-8\");\n      const codeObjects = await genCodeChunkObj(projectSummary, fullFilePath, fileContent);\n      // Process code objects and update projectSummary and codeFiles\n\n      // Process each chunk's code objects (update projectSummary.ragData, etc.)\n      const ragData: RagData = {\n        metadata: {\n          filename: fullFilePath,\n          codeChunkId: 0,\n          codeChunkLineStart: 0,\n          codeChunkLineEnd: 0,\n          codeObjects: codeObjects,\n          codeChunkSummary: codeObjects.description,\n        },\n        documentData: fileContent,\n      };\n\n      projectSummary.ragData.push(ragData); \n\n      await saveToVectorDatabase(projectName, fileContent, ragData);\n\n      codeFileSummary.codeObjects = mergeObjectArrays(\n        codeFileSummary.codeObjects,\n        codeObjects\n      );\n      codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\n        fileContent,\n        llmToUse\n      );\n    }\n\n    // WE need to define the overall execution flow here, with another LLM call?\n\n    projectSummary.codeFiles.push(codeFileSummary);\n  }\n\n  let codeDescription = '';\n    for (const codeFile of projectSummary.codeFiles) {\n        codeDescription += codeFile.codeSummary.goal + \"\\n\" + codeFile.codeSummary.features_functions + \"\\n\";\n    }\n  projectSummary.projectDescription = \n    await getCodeSummaryFromLLM(\n      \"Summaries of Code Files: \\n\" + codeDescription,\n      llmToUse\n    )\n  \n\n  return projectSummary;\n}\n\n// Helper Functions Implementation:\nasync function getIgnoredFiles(projectPath: string): Promise<string[]> {\n  let ignorePatterns: string[] = [];\n  const basePath = projectPath.split(\"/\").slice(0, -1).join(\"/\");\n  const executionPath = process.cwd();\n\n  console.log(\"basePath\", basePath);\n  console.log(\"executionPath\", executionPath);\n\n  // CHECK for these files in order:\n  const pathsToCheck = [\n    `${basePath}/.gitignore`,\n    `${basePath}/.fofoignore`,\n    `${executionPath}/.gitignore`,\n    `${executionPath}/.fofoignore`,\n  ];\n\n  for (const path of pathsToCheck) {\n    if (path.includes(\"fofoignore\")) {\n      try {\n        const fofoignoreContent = await readFile(\n          path,\n          \"utf-8\"\n        );\n        ignorePatterns.push(...fofoignoreContent.split(\"\\n\").filter(Boolean));\n      } catch (err) {\n        // .fofoignore not found, ignore the error\n        console.warn(\"No .fofoignore file found in \" + path);\n      }\n    } else {\n      try {\n        const gitignoreContent = await readFile(\n          path,\n          \"utf-8\"\n        );\n        ignorePatterns.push(...gitignoreContent.split(\"\\n\").filter(Boolean)); // Filter out empty lines\n      } catch (err) {\n        // .gitignore not found, ignore the error\n        console.warn(\"No .gitignore file found in \" + path);\n      }\n    }\n  }\n\n  return ignorePatterns;\n}\n\nasync function getFileSizeInKB(filePath: string): Promise<number> {\n  return await stat(filePath).then((stats) => stats.size / 1024);\n}\n\nasync function isFileTooLarge(\n  filePath: string,\n  maxFileSizeKB: number,\n  maxChars: number = 300\n): Promise<boolean> {\n  // Check the amount of characters in the file content\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 3,
                "codeChunkLineStart": 384,
                "codeChunkLineEnd": 393,
                "codeObjects": {
                    "classes": [],
                    "functions": [],
                    "variables": [
                        {
                            "name": "file",
                            "type": "variable",
                            "description": "Holds the content of the file read from the filePath",
                            "codeSnippet": "const file = await readFile(filePath, \"utf-8\");",
                            "codeLine": 2,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        },
                        {
                            "name": "tooLong",
                            "type": "variable",
                            "description": "Indicates if the number of tokens in the file exceeds the maximum allowed characters",
                            "codeSnippet": "const tooLong = getTokens(file) > maxChars;",
                            "codeLine": 3,
                            "codeIndent": 2,
                            "fileName": "codeParser.ts",
                            "fileLocation": ".//src/codeParser.ts",
                            "isExported": false,
                            "isPrivate": false
                        }
                    ],
                    "types": [],
                    "interfaces": [],
                    "imports": [],
                    "exports": []
                }
            },
            "documentData": "  const file = await readFile(filePath, \"utf-8\");\n  const tooLong = getTokens(file) > maxChars;\n\n  if (tooLong === true) return true;\n\n  return await getFileSizeInKB(filePath).then((size) => size > maxFileSizeKB);\n}\n\n"
        }
    ],
    "teamContext": ""
}