{
    "projectName": "fofo-docs",
    "projectDescription": {
        "goal": "The code's goal is to handle various operations related to code file management, embedding generation, language model interaction, and vector database operations.",
        "features_functions": [
            {
                "goal": "To interact with a vector database using embeddings generated from either Google or OpenAI embedding functions.",
                "features_functions": "Loading or creating collections, saving data to the database, and searching within the database."
            },
            {
                "goal": "To provide utility functions for reading file content, breaking code into chunks, and counting tokens in a string."
            },
            {
                "goal": "To provide metadata descriptions for various code elements including variables, types, interfaces, comments, imports, and exports.",
                "features_functions": "Detailed descriptions for different code elements such as variables, types, interfaces, comments, imports, and exports. The `getLanguageTypeFromFile` function infers the programming language from the file path."
            },
            {
                "goal": "To define TypeScript interfaces and types for summarizing and managing details about code files and their components within a project.",
                "features_functions": "Definitions for types ('CodeObjectType', 'CodeObjects'), and interfaces ('ProjectSummary', 'models', 'modelServiceConfig', 'RagData', 'codeSummary', 'CodeFileSummary', 'ExecutionFlow', 'FunctionParameter', 'FunctionReturn', 'CodeObject') to structure information about various elements of a codebase such as project details, model configurations, code summaries, file summaries, code execution flow, function parameters and returns, and individual code objects."
            },
            {
                "goal": "To replace placeholders in a template with actual values, call an AI API to process the template, handle potential rate limiting, and enhance the response with file path information."
            },
            {
                "goal": "To generate documentation for a codebase using FoFo Docs.",
                "features_functions": [
                    "Imports `commander` for CLI commands and options management.",
                    "Imports `parseCodebase` and `generateDocumentation` functions from external modules.",
                    "Defines a CLI program named 'fofodocs' that includes options for specifying input and output paths, test mode, and generating from a JSON file.",
                    "Implements functionality to parse the codebase and generate documentation, with additional options to generate documentation directly from a JSON file.",
                    "Includes error handling for file existence, directory creation, and documentation generation failures.",
                    "Logs progress and completion status to the console, along with the total time taken."
                ]
            },
            {
                "goal": "To process code files, generate summaries using language models, and save relevant data to a vector database while handling ignored files and checking file sizes.",
                "features_functions": [
                    "Processing code objects from each chunk and updating project summary.",
                    "Merging array of code objects.",
                    "Generating code summary from a language model (LLM).",
                    "Saving data to a vector database.",
                    "Reading file content asynchronously.",
                    "Generating code chunk objects.",
                    "Fetching ignored files from `.gitignore` and `.fofoignore` files.",
                    "Calculating file size in kilobytes.",
                    "Checking if a file is too large based on size and character count."
                ]
            }
        ]
    },
    "projectLocation": "./",
    "codeFiles": [
        {
            "fileName": "src/vectorDB.ts",
            "fileLocation": ".//src/vectorDB.ts",
            "codeSummary": {
                "goal": "The code's goal is to interact with a vector database using embeddings generated from either Google or OpenAI embedding functions. It includes functionalities for loading or creating collections, saving data to the database, and searching within the database.",
                "features_functions": {
                    "imports": [
                        "ProjectSummary",
                        "RagData",
                        "dotenv/config",
                        "ChromaClient",
                        "GoogleGenerativeAiEmbeddingFunction",
                        "OpenAIEmbeddingFunction",
                        "Collection"
                    ],
                    "environment_variables": [
                        "API_PASS",
                        "API_USER",
                        "GEMINI_KEY",
                        "API_URL",
                        "EMBEDDER_MODE",
                        "OPENAI_API_KEY",
                        "OPENAI_ORG_ID"
                    ],
                    "functions": {
                        "load_create_collection": "Loads an existing collection or creates a new one if it doesn't exist.",
                        "saveToVectorDatabase": "Saves code and associated metadata to the vector database.",
                        "searchRAG": "Searches the vector database using a query string and returns the relevant data."
                    },
                    "error_handling": "Checks and alerts for missing environment variables, handles errors gracefully during client operations.",
                    "embedding_modes": {
                        "default": "GCP",
                        "options": [
                            "GCP",
                            "OpenAI"
                        ]
                    }
                }
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [
                    {
                        "name": "ChromaClient",
                        "type": "class",
                        "description": "Represents a client for interacting with the Chroma database.",
                        "codeSnippet": "import { ChromaClient, ... } from 'chromadb'",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "subObjects": []
                    },
                    {
                        "name": "GoogleGenerativeAiEmbeddingFunction",
                        "type": "class",
                        "description": "Represents an embedding function using Google Generative AI.",
                        "codeSnippet": "import { ..., GoogleGenerativeAiEmbeddingFunction, ... } from 'chromadb'",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "subObjects": []
                    },
                    {
                        "name": "OpenAIEmbeddingFunction",
                        "type": "class",
                        "description": "Represents an embedding function using OpenAI.",
                        "codeSnippet": "import { ..., OpenAIEmbeddingFunction, ... } from 'chromadb'",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "subObjects": []
                    },
                    {
                        "name": "Collection",
                        "type": "class",
                        "description": "Represents a collection in the Chroma database.",
                        "codeSnippet": "import { ..., Collection } from 'chromadb'",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "subObjects": []
                    }
                ],
                "functions": [
                    {
                        "name": "load_create_collection",
                        "type": "function",
                        "description": "Loads an existing collection or creates a new one if it doesn't exist, using the project name.",
                        "codeSnippet": "export async function load_create_collection(projectName:string): Promise<Collection|void> { ... }",
                        "codeLine": 48,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": "./src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project for which to load or create a collection.",
                                "example": "exampleProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "collection",
                            "type": "Collection|void",
                            "description": "The loaded or newly created collection.",
                            "example": "collection"
                        }
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "function",
                        "description": "Saves the provided code and associated RAG data to the vector database under the specified project name.",
                        "codeSnippet": "export async function saveToVectorDatabase(projectName:string, code: string, ragData:RagData): Promise<boolean> { ... }",
                        "codeLine": 82,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": "./src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project to which the data will be saved.",
                                "example": "exampleProject"
                            },
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be saved in the vector database.",
                                "example": "exampleCode"
                            },
                            {
                                "name": "ragData",
                                "type": "RagData",
                                "description": "The RAG data associated with the code.",
                                "example": "exampleRagData"
                            }
                        ],
                        "functionReturns": {
                            "name": "result",
                            "type": "boolean",
                            "description": "Returns true if the data was saved successfully, otherwise false.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "searchRAG",
                        "type": "function",
                        "description": "Searches the vector database for RAG data using a search string, within the context of a specified project.",
                        "codeSnippet": "export async function searchRAG(projectName:string, searchString: string): Promise<RagData> { ... }",
                        "codeLine": 120,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": "./src/vectorDB.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project in which to perform the search.",
                                "example": "exampleProject"
                            },
                            {
                                "name": "searchString",
                                "type": "string",
                                "description": "The search string used to query the vector database.",
                                "example": "exampleSearch"
                            }
                        ],
                        "functionReturns": {
                            "name": "ragData",
                            "type": "RagData",
                            "description": "The resulting RAG data from the search query.",
                            "example": "{}"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "apiPass",
                        "type": "variable",
                        "description": "Environment variable for API password.",
                        "codeSnippet": "const apiPass = process.env.API_PASS || '';",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "apiUser",
                        "type": "variable",
                        "description": "Environment variable for API user.",
                        "codeSnippet": "const apiUser = process.env.API_USER || '';",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "geminiKey",
                        "type": "variable",
                        "description": "Environment variable for Gemini Key.",
                        "codeSnippet": "const geminiKey = process.env.GEMINI_KEY || '';",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "apiURL",
                        "type": "variable",
                        "description": "Environment variable for API URL.",
                        "codeSnippet": "const apiURL = process.env.API_URL || '';",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "embedderMode",
                        "type": "variable",
                        "description": "Environment variable for embedder mode, defaults to 'GCP'.",
                        "codeSnippet": "const embedderMode = process.env.EMBEDDER_MODE || 'GCP';",
                        "codeLine": 17,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "embedder",
                        "type": "variable",
                        "description": "Variable to hold the embedding function based on embedder mode.",
                        "codeSnippet": "let embedder:any|undefined=undefined;",
                        "codeLine": 19,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "chromaSettings",
                        "type": "variable",
                        "description": "Configuration settings for ChromaClient, set to undefined.",
                        "codeSnippet": "const chromaSettings = undefined;",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "client",
                        "type": "variable",
                        "description": "Instance of ChromaClient initialized with chromaSettings.",
                        "codeSnippet": "const client = new ChromaClient(chromaSettings);",
                        "codeLine": 38,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "name",
                        "type": "variable",
                        "description": "Name of the collection used within load_create_collection function.",
                        "codeSnippet": "const name = projectName;",
                        "codeLine": 42,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "collection",
                        "type": "variable",
                        "description": "Variable to hold the Collection instance within load_create_collection function.",
                        "codeSnippet": "let collection:Collection|void;",
                        "codeLine": 43,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "hb",
                        "type": "variable",
                        "description": "Variable to hold the result of the client's heartbeat check.",
                        "codeSnippet": "const hb = await client.heartbeat().catch((err:any) => {",
                        "codeLine": 45,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "bOK",
                        "type": "variable",
                        "description": "Boolean flag indicating success or failure within saveToVectorDatabase function.",
                        "codeSnippet": "let bOK = true;",
                        "codeLine": 70,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "meta",
                        "type": "variable",
                        "description": "RagData metadata cast to any type within saveToVectorDatabase function.",
                        "codeSnippet": "const meta = ragData.metadata as any;",
                        "codeLine": 72,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "filename",
                        "type": "variable",
                        "description": "Variable to hold the filename extracted from metadata within saveToVectorDatabase function.",
                        "codeSnippet": "const filename = meta.filename;",
                        "codeLine": 74,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "embeddings",
                        "type": "variable",
                        "description": "Generated embeddings for the code within saveToVectorDatabase function.",
                        "codeSnippet": "const embeddings = await embedder.generate([code]);",
                        "codeLine": 78,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "res",
                        "type": "variable",
                        "description": "Result of adding data to the collection within saveToVectorDatabase function.",
                        "codeSnippet": "const res = await collection.add({",
                        "codeLine": 87,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "searchEmbeddings",
                        "type": "variable",
                        "description": "Generated embeddings for the search string within searchRAG function.",
                        "codeSnippet": "const searchEmbeddings = await embedder.generate([searchString]);",
                        "codeLine": 108,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "searchResults",
                        "type": "variable",
                        "description": "Results of the search query within searchRAG function.",
                        "codeSnippet": "const searchResults = await collection.query({queryEmbeddings: searchEmbeddings});",
                        "codeLine": 109,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "ragData",
                        "type": "variable",
                        "description": "RAG data object to be returned within searchRAG function.",
                        "codeSnippet": "const ragData = {",
                        "codeLine": 115,
                        "codeIndent": 1,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts",
                        "isExported": false,
                        "isPrivate": true
                    }
                ],
                "types": [
                    {
                        "name": "ProjectSummary",
                        "description": "Represents a summary of a project, imported from the 'objectSchemas' module.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "RagData",
                        "description": "Represents RAG (Retrieval-Augmented Generation) data, imported from the 'objectSchemas' module.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "ChromaClient",
                        "description": "Represents the client for interacting with Chroma database.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from 'chromadb';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "GoogleGenerativeAiEmbeddingFunction",
                        "description": "Represents the embedding function for Google Generative AI.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from 'chromadb';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "OpenAIEmbeddingFunction",
                        "description": "Represents the embedding function for OpenAI.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from 'chromadb';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "Collection",
                        "description": "Represents a collection in Chroma database.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from 'chromadb';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ],
                "interfaces": [],
                "comments": [
                    {
                        "content": "Check to see if any of the environment variables are missing",
                        "type": "comment",
                        "codeLine": 12,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "content": "const chromaSettings = { path: apiURL, \"auth\": { provider: \"basic\", credentials: `${apiUser}:${apiPass}` } }",
                        "type": "comment",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "ProjectSummary, RagData",
                        "type": "import",
                        "description": "Imports ProjectSummary and RagData from the local module objectSchemas.",
                        "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports and configures the dotenv package which loads environment variables from a .env file.",
                        "codeSnippet": "import 'dotenv/config';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection",
                        "type": "import",
                        "description": "Imports ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, and Collection from the chromadb package.",
                        "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from 'chromadb';",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "load_create_collection",
                        "type": "export",
                        "description": "Asynchronous function that loads or creates a collection in the Chroma database based on the given project name.",
                        "codeSnippet": "export async function load_create_collection(projectName:string): Promise<Collection|void> { ... }",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "export",
                        "description": "Asynchronous function that saves code and RAG data to the vector database under a given project name.",
                        "codeSnippet": "export async function saveToVectorDatabase(projectName:string, code: string, ragData:RagData): Promise<boolean> { ... }",
                        "codeLine": 72,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "export",
                        "description": "Asynchronous function that searches for RAG data in the vector database using the provided project name and search string.",
                        "codeSnippet": "export async function searchRAG(projectName:string, searchString: string): Promise<RagData> { ... }",
                        "codeLine": 108,
                        "codeIndent": 0,
                        "fileName": "vectorDB.ts",
                        "fileLocation": ".//src/vectorDB.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/shared.ts",
            "fileLocation": ".//src/shared.ts",
            "codeSummary": {
                "goal": "The goal of the code is to provide utility functions for reading file content, breaking code into chunks, and counting tokens in a string.",
                "features_functions": {
                    "getFileContentLen": "Asynchronously reads the contents of a file and returns the length of the content.",
                    "breakCodeIntoChunks": "Splits a string of code into smaller chunks based on a specified token size.",
                    "getTokens": "Counts and returns the number of tokens (words) in a given string."
                }
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "getFileContentLen",
                        "type": "function",
                        "description": "Asynchronous function to get the length of file content.",
                        "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "Path to the file",
                                "example": "/path/to/file.txt"
                            }
                        ],
                        "functionReturns": {
                            "name": "length",
                            "type": "Promise<number>",
                            "description": "Returns a promise that resolves to the length of the file content.",
                            "example": 1024
                        }
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "function",
                        "description": "Function to break code into chunks based on chunk size.",
                        "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code to be broken into chunks.",
                                "example": "const a = 1; const b = 2;"
                            },
                            {
                                "name": "chunkSize",
                                "type": "number",
                                "description": "The maximum token count for each chunk.",
                                "example": 100
                            }
                        ],
                        "functionReturns": {
                            "name": "chunks",
                            "type": "string[]",
                            "description": "Returns an array of code chunks.",
                            "example": [
                                "const a = 1;",
                                "const b = 2;"
                            ]
                        }
                    },
                    {
                        "name": "getTokens",
                        "type": "function",
                        "description": "Function to get the number of tokens in the code.",
                        "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length }",
                        "codeLine": 31,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "code",
                                "type": "string",
                                "description": "The code whose tokens are to be counted.",
                                "example": "const a = 1; const b = 2;"
                            }
                        ],
                        "functionReturns": {
                            "name": "tokenCount",
                            "type": "number",
                            "description": "Returns the number of tokens in the code.",
                            "example": 6
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "codeByLine",
                        "type": "variable",
                        "description": "Array of strings split by newline from the input code.",
                        "codeSnippet": "const codeByLine = code.split('\\n');",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chunks",
                        "type": "variable",
                        "description": "Array to store the code chunks.",
                        "codeSnippet": "const chunks = [];",
                        "codeLine": 12,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentChunk",
                        "type": "variable",
                        "description": "Current chunk of code being processed.",
                        "codeSnippet": "let currentChunk = '';",
                        "codeLine": 13,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "currentChunkTokenCount",
                        "type": "variable",
                        "description": "Token count for the current chunk.",
                        "codeSnippet": "let currentChunkTokenCount = 0;",
                        "codeLine": 14,
                        "codeIndent": 1,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "lineTokenCount",
                        "type": "variable",
                        "description": "Token count for the current line.",
                        "codeSnippet": "const lineTokenCount = line.split(/\\s+/).length;",
                        "codeLine": 18,
                        "codeIndent": 2,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [],
                "interfaces": [],
                "comments": [
                    {
                        "content": "Approximate token count by splitting on whitespace",
                        "type": "comment",
                        "codeLine": 14,
                        "codeIndent": 8,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "readFile",
                        "type": "import",
                        "description": "Imports the readFile function from the 'fs/promises' module to enable asynchronous file reading.",
                        "codeSnippet": "import { readFile } from 'fs/promises';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "getFileContentLen",
                        "type": "function",
                        "description": "Asynchronously returns the length of content of a file given its file path.",
                        "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> { return await readFile(filePath, 'utf-8').then(content => content.length); }",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "function",
                        "description": "Divides code into chunks of a specific size by line count.",
                        "codeSnippet": "export function breakCodeIntoChunks(code: string, chunkSize: number): string[] { const codeByLine = code.split('\\n'); const chunks = []; let currentChunk = ''; let currentChunkTokenCount = 0; for (const line of codeByLine) { const lineTokenCount = line.split(/\\s+/).length; if (currentChunkTokenCount + lineTokenCount <= chunkSize) { currentChunk += line + '\\n'; currentChunkTokenCount += lineTokenCount; } else { chunks.push(currentChunk); currentChunk = line + '\\n'; currentChunkTokenCount = lineTokenCount; } } if (currentChunk) { chunks.push(currentChunk); } return chunks; }",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "function",
                        "description": "Returns the count of tokens in a string of code.",
                        "codeSnippet": "export function getTokens(code: string): number { return code.split(' ').length; }",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "shared.ts",
                        "fileLocation": ".//src/shared.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/prompt.ts",
            "fileLocation": ".//src/prompt.ts",
            "codeSummary": {
                "goal": "The goal of the code is to provide metadata descriptions for various code elements including variables, types, interfaces, comments, imports, and exports. Additionally, it contains a function to guess the programming language based on the file path.",
                "features_functions": "This code provides detailed descriptions for different code elements such as variables, types, interfaces, comments, imports, and exports. The getLanguageTypeFromFile function infers the programming language from the file path."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "generalPrompt",
                        "type": "function",
                        "description": "A function to generate a JSON object response format prompt given various inputs.",
                        "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... }",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "The context of the project and team",
                                "example": ""
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Previously parsed relevant code",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path of the code snippet",
                                "example": ""
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code objects to identify",
                                "example": ""
                            }
                        ],
                        "functionReturns": {
                            "name": "returnString",
                            "type": "string",
                            "description": "Returns a template string for generating the JSON object",
                            "example": ""
                        }
                    },
                    {
                        "name": "classesPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying classes in a code snippet.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 32,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "classes"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying functions in a code snippet.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 35,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying variables in a code snippet.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 38,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "variables"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "typesPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying types in a code snippet.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "types"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying interfaces in a code snippet.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 44,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "interfaces"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "commentsPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying comments in a code snippet.",
                        "codeSnippet": "export const commentsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'comments');",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "comments"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "importsPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying imports in a code snippet.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 50,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "imports"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "function",
                        "description": "Generates prompt for identifying exports in a code snippet.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 53,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "context",
                                "type": "string",
                                "description": "Context information for the prompt",
                                "example": "Project and team context"
                            },
                            {
                                "name": "relevantCode",
                                "type": "string",
                                "description": "Relevant code for context",
                                "example": ""
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "File path of the code snippet",
                                "example": "./src/prompt.ts"
                            },
                            {
                                "name": "codeSnippet",
                                "type": "string",
                                "description": "The actual code snippet to analyze",
                                "example": ""
                            },
                            {
                                "name": "type",
                                "type": "CodeObjects",
                                "description": "The type of code object to identify",
                                "example": "exports"
                            }
                        ],
                        "functionReturns": {
                            "name": "returnVal1",
                            "type": "string",
                            "description": "Generated prompt",
                            "example": ""
                        }
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "function",
                        "description": "Guesses the programming language based on the file name and path.",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}\n    \n    Please respond with JUST the language name. For example: JavaScript\n    `\n\n}",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The file path to guess the programming language from.",
                                "example": "/path/to/file.js"
                            }
                        ],
                        "functionReturns": {
                            "name": "guessedLanguage",
                            "type": "string",
                            "description": "The guessed programming language.",
                            "example": "JavaScript"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "codeSummary",
                        "type": "variable",
                        "description": "A constant storing the template for creating a summary in markdown format",
                        "codeSnippet": "export const codeSummary = `...`;",
                        "codeLine": 6,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "generalPrompt",
                        "type": "variable",
                        "description": "A function that generates a prompt template based on given context, relevant code, file path, code snippet, and type",
                        "codeSnippet": "const generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => { ... };",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileName",
                        "type": "variable",
                        "description": "A constant holding the file name extracted from the given file path",
                        "codeSnippet": "const fileName = filePath.split('/').pop();",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "classesPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for classes.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for functions.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 31,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for variables.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "typesPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for types.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 35,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for interfaces.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 37,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "commentsPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for comments.",
                        "codeSnippet": "export const commentsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'comments');",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "importsPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for imports.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "variable",
                        "description": "A constant that holds a function call to generalPrompt for exports.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "filePath",
                        "type": "string",
                        "description": "Path of the file",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { ... }",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "CodeObjects",
                        "description": "An imported type used by the generalPrompt function.",
                        "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ],
                "interfaces": [],
                "comments": [
                    {
                        "content": "// export const promptTemplate = `",
                        "type": "comment",
                        "codeLine": 27,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// You will be asked to provide a JSON object that contains the identified code objects in the code snippet attached at the bottom of this request.",
                        "type": "comment",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// ## Context",
                        "type": "comment",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Project and Team Context: ",
                        "type": "comment",
                        "codeLine": 30,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// ## Previously Parsed Code",
                        "type": "comment",
                        "codeLine": 31,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Relevant Code:",
                        "type": "comment",
                        "codeLine": 32,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// ## Task",
                        "type": "comment",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// In the following code snippet, please identify all of the following:",
                        "type": "comment",
                        "codeLine": 34,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Classes",
                        "type": "comment",
                        "codeLine": 35,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Functions",
                        "type": "comment",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Variables",
                        "type": "comment",
                        "codeLine": 37,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Types",
                        "type": "comment",
                        "codeLine": 38,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Interfaces",
                        "type": "comment",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Comments",
                        "type": "comment",
                        "codeLine": 40,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Imports",
                        "type": "comment",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// - Exports",
                        "type": "comment",
                        "codeLine": 42,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// ## Response Format",
                        "type": "comment",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// Respond ONLY with a JSON object containing the identified code objects and their descriptions. Here is an example of the required format:",
                        "type": "comment",
                        "codeLine": 44,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"classes\": [",
                        "type": "comment",
                        "codeLine": 46,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"name\": \"ClassName\",",
                        "type": "comment",
                        "codeLine": 48,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"type\": \"class\",",
                        "type": "comment",
                        "codeLine": 49,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"description\": \"Description of the class\",",
                        "type": "comment",
                        "codeLine": 50,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"codeSnippet\": \"class ClassName { ... }\",",
                        "type": "comment",
                        "codeLine": 51,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"codeLine\": 10,",
                        "type": "comment",
                        "codeLine": 52,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"codeIndent\": 0,",
                        "type": "comment",
                        "codeLine": 53,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"subObjects\": []",
                        "type": "comment",
                        "codeLine": 56,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"functions\": [",
                        "type": "comment",
                        "codeLine": 59,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"name\": \"functionName\",",
                        "type": "comment",
                        "codeLine": 61,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"type\": \"function\",",
                        "type": "comment",
                        "codeLine": 62,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"description\": \"Description of the function\",",
                        "type": "comment",
                        "codeLine": 63,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"codeSnippet\": \"function functionName() { ... }\",",
                        "type": "comment",
                        "codeLine": 64,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"codeLine\": 20,",
                        "type": "comment",
                        "codeLine": 65,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"codeIndent\": 2,",
                        "type": "comment",
                        "codeLine": 66,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"functionParameters\": [",
                        "type": "comment",
                        "codeLine": 69,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"name\": \"param1\",",
                        "type": "comment",
                        "codeLine": 71,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"type\": \"string\",",
                        "type": "comment",
                        "codeLine": 72,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"description\": \"Description of the parameter\",",
                        "type": "comment",
                        "codeLine": 73,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"example\": \"exampleValue\"",
                        "type": "comment",
                        "codeLine": 74,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "content": "// \"functionReturns\": {",
                        "type": "comment",
                        "codeLine": 77,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "CodeObjects",
                        "type": "import",
                        "description": "Importing the CodeObjects definition from the objectSchemas module.",
                        "codeSnippet": "import { CodeObjects } from \"./objectSchemas\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts"
                    },
                    {
                        "name": "importName",
                        "type": "import",
                        "description": "Description of the import prompt for CodeObjects",
                        "codeSnippet": "import importName from 'module';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": "./src/prompt.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "codeSummary",
                        "type": "export",
                        "description": "Constant export holding a multiline template string intended to guide how to create a summary of the code.",
                        "codeSnippet": "export const codeSummary = `Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n\n##Execution Flow\n\n1. The app... etc\n`",
                        "codeLine": 6,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "classesPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying class objects in the provided code.",
                        "codeSnippet": "export const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');",
                        "codeLine": 37,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying function objects in the provided code.",
                        "codeSnippet": "export const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying variable objects in the provided code.",
                        "codeSnippet": "export const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "typesPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying type objects in the provided code.",
                        "codeSnippet": "export const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying interface objects in the provided code.",
                        "codeSnippet": "export const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');",
                        "codeLine": 45,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "commentsPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying comment objects in the provided code.",
                        "codeSnippet": "export const commentsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'comments');",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "importsPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying import objects in the provided code.",
                        "codeSnippet": "export const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');",
                        "codeLine": 49,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "export",
                        "description": "Function that generates a prompt for identifying export objects in the provided code.",
                        "codeSnippet": "export const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');",
                        "codeLine": 51,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "export",
                        "description": "A function that guesses the programming language based on file name and path.",
                        "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => { ... }",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "prompt.ts",
                        "fileLocation": ".//src/prompt.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/objectSchemas.ts",
            "fileLocation": ".//src/objectSchemas.ts",
            "codeSummary": {
                "goal": "The goal of the code is to define TypeScript interfaces and types for summarizing and managing details about code files and their components within a project.",
                "features_functions": "The code includes definitions for types ('CodeObjectType', 'CodeObjects'), and interfaces ('ProjectSummary', 'models', 'modelServiceConfig', 'RagData', 'codeSummary', 'CodeFileSummary', 'ExecutionFlow', 'FunctionParameter', 'FunctionReturn', 'CodeObject') to structure information about various elements of a codebase such as project details, model configurations, code summaries, file summaries, code execution flow, function parameters and returns, and individual code objects."
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [],
                "variables": [
                    {
                        "name": "CodeObjectType",
                        "type": "type",
                        "description": "Union type for different types of code objects.",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "CodeObjects",
                        "type": "type",
                        "description": "Union type for different collections of code objects.",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'comments' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "interface",
                        "description": "Interface representing the summary of a project.",
                        "codeSnippet": "export interface ProjectSummary { ... }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "models",
                        "type": "interface",
                        "description": "Interface representing a model object.",
                        "codeSnippet": "export interface models { ... }",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "interface",
                        "description": "Interface for configuring model services.",
                        "codeSnippet": "export interface modelServiceConfig { ... }",
                        "codeLine": 14,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "RagData",
                        "type": "interface",
                        "description": "Interface representing RAG data.",
                        "codeSnippet": "export interface RagData { ... }",
                        "codeLine": 18,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "codeSummary",
                        "type": "interface",
                        "description": "Interface for code summary information.",
                        "codeSnippet": "export interface codeSummary { ... }",
                        "codeLine": 26,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "interface",
                        "description": "Interface summarizing the details of a code file.",
                        "codeSnippet": "export interface CodeFileSummary { ... }",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "ExecutionFlow",
                        "type": "interface",
                        "description": "Interface representing the execution flow of the code.",
                        "codeSnippet": "export interface ExecutionFlow { ... }",
                        "codeLine": 35,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "FunctionParameter",
                        "type": "interface",
                        "description": "Interface describing a function parameter.",
                        "codeSnippet": "export interface FunctionParameter { ... }",
                        "codeLine": 42,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "FunctionReturn",
                        "type": "interface",
                        "description": "Interface describing a function's return value.",
                        "codeSnippet": "export interface FunctionReturn { ... }",
                        "codeLine": 47,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "CodeObject",
                        "type": "interface",
                        "description": "Interface representing a code object.",
                        "codeSnippet": "export interface CodeObject { ... }",
                        "codeLine": 51,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "CodeObjectTypes",
                        "type": "type",
                        "description": "Union type for properties of a CodeObject.",
                        "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                        "codeLine": 61,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts",
                        "isExported": true,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "CodeObjectType",
                        "description": "Type defining various code object categories including class, function, variable, type, comment, import, export, interface, constructor",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "description": "Type defining collections of various code objects such as classes, functions, variables, types, comments, imports, exports, interfaces, fileName, fileLocation",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'comments' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "description": "Interface describing a project, including project name, description, location, code files, RAG data, and team context",
                        "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; }",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "models",
                        "description": "Interface describing a model with its name and model object",
                        "codeSnippet": "export interface models { name: string, model: any, }",
                        "codeLine": 11,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "description": "Interface describing the configuration for model services including models and optional endpoint",
                        "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?:string }",
                        "codeLine": 14,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "RagData",
                        "description": "Interface describing RAG data including metadata, optional embeddings, and document data",
                        "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string|number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; documentData: any }",
                        "codeLine": 18,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "codeSummary",
                        "description": "Interface defining a summary of code with goal and features/functions",
                        "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, }",
                        "codeLine": 25,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "description": "Interface describing a summary of a code file including file name, location, code summary, language, execution flow, and code objects",
                        "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; }",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ExecutionFlow",
                        "description": "Interface defining the execution flow of a step in the code including step number, description, importance, code snippet, line, indent, file name, and location",
                        "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; }",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionParameter",
                        "description": "Interface defining a function parameter with name, type, description, and example",
                        "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; }",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionReturn",
                        "description": "Interface defining a function return with type, description, and example",
                        "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; }",
                        "codeLine": 48,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObject",
                        "description": "Interface defining a code object with various properties including name, type, description, code snippet, line, indent, file name, location, sub-objects, parent object, function parameters, function returns, and boolean properties indicating if it is exported, a function, a class, private, or async",
                        "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?:string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; }",
                        "codeLine": 53,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjectTypes",
                        "description": "Type defining various properties of a CodeObject including name, type, description, code snippet, line, indent, file name, location, sub-objects, parent object, function parameters, function returns, and boolean properties",
                        "codeSnippet": "export type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync';",
                        "codeLine": 69,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "ProjectSummary",
                        "type": "interface",
                        "description": "An interface describing the summary of a project, including the project name, description, location, related code files, RAG data, and team context.",
                        "codeSnippet": "export interface ProjectSummary {\n    projectName: string;\n    projectDescription: codeSummary\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "models",
                        "type": "interface",
                        "description": "An interface describing a model object containing a name and a model of any type.",
                        "codeSnippet": "export interface models {\n    name: string,\n    model: any,\n}",
                        "codeLine": 13,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "interface",
                        "description": "An interface for model service configuration, including an array of models and an optional endpoint.",
                        "codeSnippet": "export interface modelServiceConfig {\n    models: models[],\n    endpoint?:string \n}",
                        "codeLine": 17,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "interface",
                        "description": "An interface representing RAG (Retrieve And Generate) data, including metadata, embeddings, and document data.",
                        "codeSnippet": "export interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "interface",
                        "description": "An interface describing a summary of code-related goals and features/functions.",
                        "codeSnippet": "export interface codeSummary {\n    goal: string,\n    features_functions: string,\n  }",
                        "codeLine": 32,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "interface",
                        "description": "An interface summarizing the details of a code file, including file name, location, code summary, language, execution flow, and code objects.",
                        "codeSnippet": "export interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: codeSummary;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject;\n}",
                        "codeLine": 36,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ExecutionFlow",
                        "type": "interface",
                        "description": "An interface representing the steps in the execution flow of a code, with detail of each step, its description, importance, associated code snippet, line number, indent level, file name, and location.",
                        "codeSnippet": "export interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionParameter",
                        "type": "interface",
                        "description": "An interface representing the parameters of a function, including their name, type, description, and an example.",
                        "codeSnippet": "export interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}",
                        "codeLine": 51,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionReturn",
                        "type": "interface",
                        "description": "An interface for representing the return type of a function, along with its description and an example.",
                        "codeSnippet": "export interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}",
                        "codeLine": 57,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "interface",
                        "description": "An interface representing a code object, including its name, type, description, code snippet, line, indent, file name, location, content, subobjects, parent object, function parameters, function returns, and flags indicating its properties like isExported, isFunction, isClass, isPrivate, isAsync.",
                        "codeSnippet": "export interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    description: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    content?:string;\n    fileName: string;\n    fileLocation: string;\n    subObjects?: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}",
                        "codeLine": 63,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ],
                "comments": [],
                "imports": [],
                "exports": [
                    {
                        "name": "CodeObjectType",
                        "type": "export",
                        "description": "Type defining code object types such as 'class', 'function', etc.",
                        "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "export",
                        "description": "Type defining collections of code objects",
                        "codeSnippet": "export type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'comments' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "export",
                        "description": "Interface for project summary information",
                        "codeSnippet": "export interface ProjectSummary { projectName: string; projectDescription: codeSummary projectLocation: string; codeFiles: CodeFileSummary[]; ragData: RagData[]; teamContext: string; };",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "models",
                        "type": "export",
                        "description": "Interface for models information",
                        "codeSnippet": "export interface models { name: string, model: any, };",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "export",
                        "description": "Interface for model service configuration",
                        "codeSnippet": "export interface modelServiceConfig { models: models[], endpoint?: string };",
                        "codeLine": 13,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "export",
                        "description": "Interface for RagData information",
                        "codeSnippet": "export interface RagData { metadata: { filename: string; codeChunkId: string | number; codeChunkLineStart: number; codeChunkLineEnd: number; codeObjects: CodeObject; codeChunkSummary: string; }; embeddings?: number[][]; // Example: Embeddings could be an array of numbers documentData: any };",
                        "codeLine": 17,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "export",
                        "description": "Interface for code summary",
                        "codeSnippet": "export interface codeSummary { goal: string, features_functions: string, };",
                        "codeLine": 26,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "export",
                        "description": "Interface for code file summary",
                        "codeSnippet": "export interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: ExecutionFlow[]; codeObjects: CodeObject; };",
                        "codeLine": 29,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "ExecutionFlow",
                        "type": "export",
                        "description": "Interface for execution flow steps",
                        "codeSnippet": "export interface ExecutionFlow { step: number; stepDescription: string; bImportant: boolean; codeSnippet: string; codeLine: number; codeIndent: number; fileName: string; fileLocation: string; };",
                        "codeLine": 37,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionParameter",
                        "type": "export",
                        "description": "Interface for function parameter details",
                        "codeSnippet": "export interface FunctionParameter { name: string; type: string; description: string; example: string; };",
                        "codeLine": 45,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "FunctionReturn",
                        "type": "export",
                        "description": "Interface for function return details",
                        "codeSnippet": "export interface FunctionReturn { type: string; description: string; example: string; };",
                        "codeLine": 50,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "export",
                        "description": "Interface for code object details",
                        "codeSnippet": "export interface CodeObject { name: string; type: CodeObjectType; description: string; codeSnippet: string; codeLine: number; codeIndent: number; content?: string; fileName: string; fileLocation: string; subObjects?: CodeObject[]; parentObject?: CodeObject; functionParameters?: FunctionParameter[]; functionReturns?: FunctionReturn; isExported: boolean; isFunction: boolean; isClass: boolean; isPrivate: boolean; isAsync: boolean; };",
                        "codeLine": 55,
                        "codeIndent": 0,
                        "fileName": "objectSchemas.ts",
                        "fileLocation": ".//src/objectSchemas.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/llmInterface.ts",
            "fileLocation": ".//src/llmInterface.ts",
            "codeSummary": {
                "goal": "The goal of the code is to replace placeholders in a template with actual values, call an AI API to process the template, handle potential rate limiting, and enhance the response with file path information.",
                "features_functions": {
                    "replace_placeholders": "Replaces placeholders in a string with provided values (teamContext, code, filePath).",
                    "getFileNameFromPath": "Extracts the file name from a given file path.",
                    "call_API": "Calls an AI API with specific parameters and handles any errors that occur.",
                    "rate_limit_handling": "Waits for 30 seconds and retries the API call if a rate limit error is encountered.",
                    "enhance_response": "Adds file name and file path to the response if they are missing."
                }
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [
                    {
                        "name": "Ollama",
                        "type": "class",
                        "description": "Class representing the OLLAMA settings.",
                        "codeSnippet": "class Ollama { ... }",
                        "codeLine": 18,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "subObjects": []
                    },
                    {
                        "name": "OpenAI",
                        "type": "class",
                        "description": "Class representing the OpenAI settings.",
                        "codeSnippet": "class OpenAI { ... }",
                        "codeLine": 19,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "subObjects": []
                    },
                    {
                        "name": "VertexAI",
                        "type": "class",
                        "description": "Class representing the Vertex AI settings.",
                        "codeSnippet": "class VertexAI { ... }",
                        "codeLine": 33,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "subObjects": []
                    }
                ],
                "functions": [
                    {
                        "name": "getModelBackend",
                        "type": "function",
                        "description": "Returns the backend type (OLLAMA, VERTEX, or OPENAI) for the selected model.",
                        "codeSnippet": "const getModelBackend = (selectedModel: string) => {\nconst model = MODEL_MODES.find((m) => m.model === selectedModel);\nif (model) {\nreturn model.backend as llm_modes;\n}\nthrow new Error(\"Model not found\");\n};",
                        "codeLine": 64,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "selectedModel",
                                "type": "string",
                                "description": "The model name to find its backend.",
                                "example": "gpt-4o"
                            }
                        ],
                        "functionReturns": {
                            "name": "backend",
                            "type": "llm_modes",
                            "description": "The backend associated with the selected model.",
                            "example": "OLLAMA"
                        }
                    },
                    {
                        "name": "validateJSON",
                        "type": "function",
                        "description": "Checks if a string is a valid JSON.",
                        "codeSnippet": "function validateJSON(jsonString: string): boolean {\ntry {\nJSON.parse(jsonString);\nreturn true;\n} catch (e) {\nconsole.error(e);",
                        "codeLine": 141,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "jsonString",
                                "type": "string",
                                "description": "The string to be validated as JSON.",
                                "example": "{\"key\": \"value\"}"
                            }
                        ],
                        "functionReturns": {
                            "name": "isValid",
                            "type": "boolean",
                            "description": "True if the string is a valid JSON, false otherwise.",
                            "example": "true"
                        }
                    },
                    {
                        "name": "fixJSON",
                        "type": "function",
                        "description": "Attempts to repair a given JSON string using 'jsonrepair'. Throws an error if it fails.",
                        "codeSnippet": "function fixJSON(jsonString: string): string { ... }",
                        "codeLine": 4,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "jsonString",
                                "type": "string",
                                "description": "The JSON string to be repaired.",
                                "example": "{\"key\": value}"
                            }
                        ],
                        "functionReturns": {
                            "name": "repairedJSONString",
                            "type": "string",
                            "description": "The repaired JSON string.",
                            "example": "{\"key\": \"value\"}"
                        }
                    },
                    {
                        "name": "parseYaml",
                        "type": "function",
                        "description": "Parses a YAML string into a JavaScript object.",
                        "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                        "codeLine": 11,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "yamlString",
                                "type": "string",
                                "description": "The YAML string to be parsed.",
                                "example": "key: value"
                            }
                        ],
                        "functionReturns": {
                            "name": "parsedObject",
                            "type": "any",
                            "description": "The resulting JavaScript object from parsing the YAML string.",
                            "example": "{\"key\": \"value\"}"
                        }
                    },
                    {
                        "name": "parseText",
                        "type": "function",
                        "description": "Converts a text string into a JSON object with a specified key.",
                        "codeSnippet": "export function parseText(text: string, resKey = 'response'): any { ... }",
                        "codeLine": 20,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "text",
                                "type": "string",
                                "description": "The text to be converted to a JSON object.",
                                "example": "Example text"
                            },
                            {
                                "name": "resKey",
                                "type": "string",
                                "description": "The key for the resulting JSON object. Default is 'response'.",
                                "example": "response"
                            }
                        ],
                        "functionReturns": {
                            "name": "jsonObject",
                            "type": "any",
                            "description": "The resulting JSON object.",
                            "example": "{\"response\": \"Example text\"}"
                        }
                    },
                    {
                        "name": "wait",
                        "type": "function",
                        "description": "Asynchronously waits for a specified number of milliseconds.",
                        "codeSnippet": "async function wait(ms: number) { ... }",
                        "codeLine": 28,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "ms",
                                "type": "number",
                                "description": "The number of milliseconds to wait.",
                                "example": 1000
                            }
                        ],
                        "functionReturns": {
                            "name": "promise",
                            "type": "Promise<void>",
                            "description": "A promise that resolves after the specified number of milliseconds.",
                            "example": "Promise that resolves after 1000 ms"
                        }
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "async function",
                        "description": "Fetches a code summary from an LLM given the code to summarize and the model to use.",
                        "codeSnippet": "export async function getCodeSummaryFromLLM(codeToSummarize: string, model: string = textModel): Promise<codeSummary> { ... }",
                        "codeLine": 60,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "codeToSummarize",
                                "type": "string",
                                "description": "The code block that needs to be summarized",
                                "example": "function example() { console.log('example'); }"
                            },
                            {
                                "name": "model",
                                "type": "string",
                                "description": "The model to use for summarization",
                                "example": "textModel"
                            }
                        ],
                        "functionReturns": {
                            "name": "codeSummary",
                            "type": "codeSummary",
                            "description": "Summary of the provided code block",
                            "example": "An object describing the goal and features/functions of the code block"
                        }
                    },
                    {
                        "name": "getFileNameFromPath",
                        "type": "function",
                        "description": "Extracts the file name from a given file path.",
                        "codeSnippet": "const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";",
                        "codeLine": 7,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "path",
                                "type": "string",
                                "description": "The file path from which to extract the file name.",
                                "example": "/path/to/file.ts"
                            }
                        ],
                        "functionReturns": {
                            "name": "fileName",
                            "type": "string",
                            "description": "The extracted file name.",
                            "example": "file.ts"
                        }
                    },
                    {
                        "name": "infer",
                        "type": "function",
                        "description": "Calls the AI API with the given parameters to infer a response.",
                        "codeSnippet": "const response = await infer(prompt, \"JSON object\", undefined, true, true, { fileLocation: filePath, fileName: fileName }, model).catch((error) => { console.error(\"Error calling API:\", error); return { error: error }; });",
                        "codeLine": 13,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "prompt",
                                "type": "string",
                                "description": "The prompt to send to the AI API.",
                                "example": "Generate a JSON object."
                            },
                            {
                                "name": "responseType",
                                "type": "string",
                                "description": "Expected type of the response.",
                                "example": "JSON object"
                            },
                            {
                                "name": "otherParams",
                                "type": "any",
                                "description": "Additional optional parameters for the API call.",
                                "example": "undefined"
                            },
                            {
                                "name": "param1",
                                "type": "boolean",
                                "description": "A boolean example parameter.",
                                "example": "true"
                            },
                            {
                                "name": "param2",
                                "type": "boolean",
                                "description": "A boolean example parameter.",
                                "example": "true"
                            },
                            {
                                "name": "context",
                                "type": "object",
                                "description": "An object containing the context for the API call.",
                                "example": "{ fileLocation: '/src/llmInterface.ts', fileName: 'llmInterface.ts' }"
                            },
                            {
                                "name": "model",
                                "type": "any",
                                "description": "The AI model to use for the inference.",
                                "example": "model"
                            }
                        ],
                        "functionReturns": {
                            "name": "response",
                            "type": "any",
                            "description": "The response from the AI API.",
                            "example": "{ error: { message: 'Some error' } }"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "retries",
                        "type": "variable",
                        "description": "Variable to keep track of the number of retries.",
                        "codeSnippet": "let retries = 0;",
                        "codeLine": 35,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endpoints",
                        "type": "variable",
                        "description": "Object containing endpoint URLs for different services.",
                        "codeSnippet": "const endpoints = {\n  OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\",\n};",
                        "codeLine": 38,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "MODEL_MODES",
                        "type": "variable",
                        "description": "Array containing information about different model modes.",
                        "codeSnippet": "const MODEL_MODES = [\n  {\n    name: \"codeqwen:7b-code-v1.5-q8_0\",\n    model: \"codeqwen:7b-code-v1.5-q8_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"qwen:32b-text-v1.5-q4_0\",\n    model: \"qwen:32b-text-v1.5-q4_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"gpt-4o\",\n    model: \"gpt-4o\",\n    backend: \"OPENAI\"\n  },\n  {\n    name: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    model: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    model: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"phi3\",\n    model: \"phi3\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"dolphin-llama3:8b-v2.9-fp16\",\n    model: \"dolphin-llama3:8b-v2.9-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"codechat-bison\",\n    model: \"codechat-bison\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"codechat-bison-32k\",\n    model: \"codechat-bison-32k\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-flash-preview-0514\",\n    model: \"gemini-1.5-flash-preview-0514\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-pro-preview-0514\",\n    model: \"gemini-1.5-pro-preview-0514\",\n    backend: \"VERTEX\",\n  },\n];",
                        "codeLine": 44,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "openai",
                        "type": "variable",
                        "description": "Instance of OpenAI class initialized with organization ID and API key.",
                        "codeSnippet": "const openai = new OpenAI({\n  organization: process.env.OPENAI_ORG_ID,\n  apiKey: process.env.OPENAI_API_KEY\n});",
                        "codeLine": 75,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "ollama",
                        "type": "variable",
                        "description": "Instance of Ollama class initialized with a host URL.",
                        "codeSnippet": "const ollama = new Ollama({ host: endpoints.OLLAMA });",
                        "codeLine": 81,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "project",
                        "type": "variable",
                        "description": "String containing the name of the project.",
                        "codeSnippet": "const project = \"sweet-papa-technologies\";",
                        "codeLine": 85,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "location",
                        "type": "variable",
                        "description": "String containing the location setting, specifically 'us-central1'.",
                        "codeSnippet": "const location = \"us-central1\";",
                        "codeLine": 86,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "textModel",
                        "type": "variable",
                        "description": "String containing the name of the text model used in VertexAI.",
                        "codeSnippet": "const textModel = \"gemini-1.5-flash-preview-0514\";",
                        "codeLine": 87,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "textModelAdvanced",
                        "type": "variable",
                        "description": "String containing the name of the advanced text model used in VertexAI.",
                        "codeSnippet": "const textModelAdvanced = \"gemini-1.5-pro-preview-0514\";",
                        "codeLine": 88,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "vertexAI",
                        "type": "variable",
                        "description": "Instance of VertexAI class initialized with project and location settings.",
                        "codeSnippet": "const vertexAI = new VertexAI({ project: project, location: location });",
                        "codeLine": 91,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "safetySettings",
                        "type": "variable",
                        "description": "Array containing safety settings for the generative model.",
                        "codeSnippet": "const safetySettings = [\n  {\n    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_UNSPECIFIED,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n];",
                        "codeLine": 93,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "generativeModel",
                        "type": "variable",
                        "description": "Instance of a generative model using the textModel and safetySettings in VertexAI.",
                        "codeSnippet": "const generativeModel = vertexAI.getGenerativeModel({\n  model: textModel,\n  safetySettings: safetySettings,\n});",
                        "codeLine": 106,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "generateModelAdv",
                        "type": "variable",
                        "description": "Instance of a generative model using the textModelAdvanced and safetySettings in VertexAI.",
                        "codeSnippet": "const generateModelAdv = vertexAI.getGenerativeModel({\n  model: textModelAdvanced,\n  safetySettings: safetySettings,\n});",
                        "codeLine": 110,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "generativeModelPreview",
                        "type": "variable",
                        "description": "Instance of a generative model using the textModel in VertexAI for preview.",
                        "codeSnippet": "const generativeModelPreview = vertexAI.getGenerativeModel({\n  model: textModel,\n});",
                        "codeLine": 114,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "jsonString",
                        "type": "parameter",
                        "description": "Input JSON string to be repaired.",
                        "codeSnippet": "function fixJSON(jsonString: string): string {",
                        "codeLine": 4,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "yamlString",
                        "type": "parameter",
                        "description": "Input YAML string to be parsed.",
                        "codeSnippet": "export function parseYaml(yamlString: string): any {",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "text",
                        "type": "parameter",
                        "description": "Input text string to be parsed.",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any {",
                        "codeLine": 20,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "resKey",
                        "type": "parameter",
                        "description": "Key for the response object.",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any {",
                        "codeLine": 20,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "ms",
                        "type": "parameter",
                        "description": "Input number of milliseconds to wait.",
                        "codeSnippet": "async function wait(ms: number) {",
                        "codeLine": 27,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "resolve",
                        "type": "parameter",
                        "description": "Parameter for resolving the promise after the timeout.",
                        "codeSnippet": "return new Promise((resolve) => setTimeout(resolve, ms));",
                        "codeLine": 28,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "responseMode",
                        "type": "parameter",
                        "description": "Mode of the response to be returned, either JSON object, YAML object, or TEXT STRING.",
                        "codeSnippet": "responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",",
                        "codeLine": 32,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "responseKey",
                        "type": "parameter",
                        "description": "Optional key for the response object.",
                        "codeSnippet": "responseKey?: string,",
                        "codeLine": 33,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "bPro",
                        "type": "parameter",
                        "description": "Boolean flag to indicate professional mode.",
                        "codeSnippet": "bPro = false,",
                        "codeLine": 34,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "bRetry",
                        "type": "parameter",
                        "description": "Boolean flag to indicate if retry mechanism should be enabled.",
                        "codeSnippet": "bRetry = true,",
                        "codeLine": 35,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "supplementalData",
                        "type": "parameter",
                        "description": "Optional additional data to inform the inference.",
                        "codeSnippet": "supplementalData?: any,",
                        "codeLine": 36,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "model",
                        "type": "parameter",
                        "description": "Model to be used for the inference.",
                        "codeSnippet": "model: string = textModel",
                        "codeLine": 37,
                        "codeIndent": 1,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "modelBackend",
                        "type": "variable",
                        "description": "Determines the backend to be used based on the provided model.",
                        "codeSnippet": "const modelBackend: llm_modes = getModelBackend(model);",
                        "codeLine": 39,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "promptResponseInstructions",
                        "type": "variable",
                        "description": "Instructions to be appended to the prompt based on the response mode.",
                        "codeSnippet": "const promptResponseInstructions = `Please respond with a ${responseMode} containing your answer. ${responseMode !== \"TEXT STRING\" ? `Please properly format and escape your output, as I will need to parse your response.` : \"\"} ${responseKey ? `The key for the response should be ${responseKey}.` : \"\"}\n\n`;",
                        "codeLine": 42,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "promptCharLen",
                        "type": "variable",
                        "description": "Length of the prompt string in characters.",
                        "codeSnippet": "const promptCharLen = prompt.length;",
                        "codeLine": 50,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "promptLen",
                        "type": "variable",
                        "description": "Length of the prompt string in tokens.",
                        "codeSnippet": "const promptLen = getTokens(prompt);",
                        "codeLine": 51,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "promptNew",
                        "type": "variable",
                        "description": "The updated prompt string based on response mode.",
                        "codeSnippet": "let promptNew = prompt;",
                        "codeLine": 57,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "startTime",
                        "type": "variable",
                        "description": "Start time for inference processing.",
                        "codeSnippet": "const startTime = Date.now();",
                        "codeLine": 67,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "ollamaResponse",
                        "type": "variable",
                        "description": "Stores the response from Ollama model.",
                        "codeSnippet": "const ollamaResponse = await ollama.generate({",
                        "codeLine": 78,
                        "codeIndent": 3,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "request",
                        "type": "constant",
                        "description": "An object containing the contents being sent in the request.",
                        "codeSnippet": "const request = { contents: [{ role: \"user\", parts: [{ text: promptNew }] }] };",
                        "codeLine": 4,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "genFunction",
                        "type": "variable",
                        "description": "A function variable that determines which model generation function to use.",
                        "codeSnippet": "let genFunction = generativeModel;",
                        "codeLine": 7,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "result",
                        "type": "constant",
                        "description": "The result of the content generation from the generative model function.",
                        "codeSnippet": "const result = await genFunction.generateContent(request);",
                        "codeLine": 11,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "completion",
                        "type": "constant",
                        "description": "The completion object returned from OpenAI's chat completion API.",
                        "codeSnippet": "const completion = await openai.chat.completions.create({...});",
                        "codeLine": 38,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "endTime",
                        "type": "constant",
                        "description": "The timestamp when execution ended.",
                        "codeSnippet": "const endTime = Date.now();",
                        "codeLine": 49,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "totalTime",
                        "type": "constant",
                        "description": "The total time taken for execution, calculated as the difference between endTime and startTime.",
                        "codeSnippet": "const totalTime = endTime - startTime;",
                        "codeLine": 50,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "bFixed",
                        "type": "variable",
                        "description": "A flag that indicates if the JSON response has been fixed.",
                        "codeSnippet": "let bFixed = false;",
                        "codeLine": 59,
                        "codeIndent": 6,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "res",
                        "type": "constant",
                        "description": "The parsed JSON object from the response.",
                        "codeSnippet": "const res = JSON.parse(response);",
                        "codeLine": 82,
                        "codeIndent": 6,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "newData",
                        "type": "variable",
                        "description": "Holds the first element of the response array.",
                        "codeSnippet": "const newData = res[0];",
                        "codeLine": 5,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "keys",
                        "type": "variable",
                        "description": "Holds the keys of the newData object.",
                        "codeSnippet": "const keys = Object.keys(newData);",
                        "codeLine": 8,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "expectedKeys",
                        "type": "variable",
                        "description": "An array of expected keys in the CodeObjects.",
                        "codeSnippet": "const expectedKeys: CodeObjects[] = [\n            \"classes\",\n            \"functions\",\n            \"variables\",\n            \"types\",\n            \"interfaces\",\n            \"comments\",\n            \"imports\",\n            \"exports\"\n          ];",
                        "codeLine": 10,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fixedData",
                        "type": "variable",
                        "description": "An object initialized as 'any' type to hold fixed data.",
                        "codeSnippet": "const fixedData = {} as any;",
                        "codeLine": 19,
                        "codeIndent": 12,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "question",
                        "type": "variable",
                        "description": "A template question used for summarizing code.",
                        "codeSnippet": "const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \n  Please respond with a JSON object as follows:\n  {\n    \"goal\": \"The goal of the code\",\n    \"features_functions\": \"Any relevant features\",\n  }\n\n  ### Code To Sumnarize:\n  ${codeToSummarize}\n  `",
                        "codeLine": 48,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeSummary",
                        "type": "variable",
                        "description": "Holds the result of the inference call summarizing the code.",
                        "codeSnippet": "const codeSummary = await infer(\n    question,\n    \"JSON object\",\n    undefined,\n    false,\n    undefined,\n    undefined,\n    model\n  );",
                        "codeLine": 58,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "relevantCode",
                        "type": "variable",
                        "description": "Holds 400 characters of relevant code from a project.",
                        "codeSnippet": "const relevantCode = await searchRAG(projectContext.projectName, code); // Placeholder, implement searchRAG function",
                        "codeLine": 6,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "r",
                        "type": "variable",
                        "description": "Holds a substring of the relevant code (up to 400 characters).",
                        "codeSnippet": "const r =\n    relevantCode.documentData.length > 400\n      ? relevantCode.documentData.substring(0, 400)\n      : relevantCode.documentData;",
                        "codeLine": 7,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "getFileNameFromPath",
                        "type": "function",
                        "description": "Function to extract the file name from a given file path",
                        "codeSnippet": "const getFileNameFromPath = (path: string) => path.split('/').pop() || '';",
                        "codeLine": 7,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileName",
                        "type": "variable",
                        "description": "Variable to store the extracted file name from the given file path",
                        "codeSnippet": "const fileName = getFileNameFromPath(filePath);",
                        "codeLine": 8,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "response",
                        "type": "variable",
                        "description": "Variable to store the response from the AI API call",
                        "codeSnippet": "const response = await infer(prompt, 'JSON object', undefined, true, true, { fileLocation: filePath, fileName: fileName }, model).catch((error) => { console.error('Error calling API:', error); return { error: error }; });",
                        "codeLine": 12,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeObjects",
                        "type": "variable",
                        "description": "Variable to store the parsed and validated response from the AI API call",
                        "codeSnippet": "let codeObjects: any = response;",
                        "codeLine": 25,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "FunctionDeclarationSchemaType",
                        "description": "Imported type from @google-cloud/vertexai, likely used to type functions declarations.",
                        "codeSnippet": "import { FunctionDeclarationSchemaType, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmBlockThreshold",
                        "description": "Imported type from @google-cloud/vertexai, used to define thresholds for blocking harmful content.",
                        "codeSnippet": "import { ... HarmBlockThreshold, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmCategory",
                        "description": "Imported type from @google-cloud/vertexai, used to categorize types of harmful content.",
                        "codeSnippet": "import { ... HarmCategory, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "any",
                        "description": "A type indicating any value, used for the error object in the catch block.",
                        "codeSnippet": "catch (error: any) {",
                        "codeLine": 8,
                        "codeIndent": 6,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "description": "A union type representing different categories of code components.",
                        "codeSnippet": "const expectedKeys: CodeObjects[] = [",
                        "codeLine": 12,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "description": "An interface or type representation presumably used to summarize details of a project.",
                        "codeSnippet": "projectContext: ProjectSummary,",
                        "codeLine": 75,
                        "codeIndent": 3,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "codeSummary",
                        "description": "A type presumably representing the summarized details of a code block.",
                        "codeSnippet": "): Promise<codeSummary> {",
                        "codeLine": 61,
                        "codeIndent": 3,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "FunctionDeclarationSchemaType",
                        "type": "interface",
                        "description": "Interface imported from @google-cloud/vertexai, which is likely used for defining function declaration schema types.",
                        "codeSnippet": "import { FunctionDeclarationSchemaType } from '@google-cloud/vertexai';",
                        "codeLine": 18,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmBlockThreshold",
                        "type": "interface",
                        "description": "Interface imported from @google-cloud/vertexai, used to define the thresholds for harm categories.",
                        "codeSnippet": "import { HarmBlockThreshold } from '@google-cloud/vertexai';",
                        "codeLine": 19,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmCategory",
                        "type": "interface",
                        "description": "Interface imported from @google-cloud/vertexai, used to define harm categories for safety settings.",
                        "codeSnippet": "import { HarmCategory } from '@google-cloud/vertexai';",
                        "codeLine": 20,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "VertexAI",
                        "type": "interface",
                        "description": "Interface imported from @google-cloud/vertexai used for Vertex AI functionalities.",
                        "codeSnippet": "import { VertexAI } from '@google-cloud/vertexai';",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "interface",
                        "description": "An interface that contains various code-related keys such as classes, functions, variables, etc.",
                        "codeSnippet": "interface CodeObjects { classes: string[]; functions: string[]; variables: string[]; types: string[]; interfaces: string[]; comments: string[]; imports: string[]; exports: string[]; }",
                        "codeLine": 13,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "comments": [
                    {
                        "content": " Adjust path as needed",
                        "type": "comment",
                        "codeLine": 8,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " Model Service Modes:",
                        "type": "comment",
                        "codeLine": 24,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " OpenAI Settings",
                        "type": "comment",
                        "codeLine": 74,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " OLLAMA Settings",
                        "type": "comment",
                        "codeLine": 80,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " Works with 24GB GPU - RTX 4090",
                        "type": "comment",
                        "codeLine": 82,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " Vertex Settings:",
                        "type": "comment",
                        "codeLine": 85,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " General Functions",
                        "type": "comment",
                        "codeLine": 148,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Convert YAML file into a proper JSON object",
                        "type": "comment",
                        "codeLine": 10,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Convert text into a proper JSON object",
                        "type": "comment",
                        "codeLine": 19,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Prompt: ",
                        "type": "comment",
                        "codeLine": 47,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " BASED on the model passed, we will call the appropriate endpoints, etc:",
                        "type": "comment",
                        "codeLine": 55,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": " const contextLength = promptLen > 1000 ? 32000 : 4096;",
                        "type": "comment",
                        "codeLine": 61,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "PRint the total time in seconds, truncated to 2 decimal places",
                        "type": "comment",
                        "codeLine": 52,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Retrying since JSON output was not correct, here is what we got:",
                        "type": "comment",
                        "codeLine": 112,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "if (\"classes\" in res[0] === false) {",
                        "type": "comment",
                        "codeLine": 2,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "console.warn(\"This object does not look correct!\");",
                        "type": "comment",
                        "codeLine": 3,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "console.warn(res);",
                        "type": "comment",
                        "codeLine": 4,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "We should check that the fixed JSON object has the same amount of keys as our interface for the object:",
                        "type": "comment",
                        "codeLine": 7,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "This object does not look correct! Attempting to fix:",
                        "type": "comment",
                        "codeLine": 17,
                        "codeIndent": 12,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "This looks like a fixed JSON object, but it is empty!",
                        "type": "comment",
                        "codeLine": 39,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Returning error message as JSON -- Please Try Again",
                        "type": "comment",
                        "codeLine": 47,
                        "codeIndent": 6,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Take 400 characters of relevant code",
                        "type": "comment",
                        "codeLine": 66,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Add team context",
                        "type": "comment",
                        "codeLine": 2,
                        "codeIndent": 21,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "2. Call AI API",
                        "type": "comment",
                        "codeLine": 10,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Error calling API:",
                        "type": "comment",
                        "codeLine": 21,
                        "codeIndent": 16,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "IF too many request or rate limit has been hit, we wait 30 seconds and try again",
                        "type": "comment",
                        "codeLine": 25,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "Rate Limit Hit, waiting 30 seconds...",
                        "type": "comment",
                        "codeLine": 28,
                        "codeIndent": 10,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "3. Parse and Validate Response",
                        "type": "comment",
                        "codeLine": 37,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "content": "4. Enhance with filePath",
                        "type": "comment",
                        "codeLine": 40,
                        "codeIndent": 2,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "jsonrepair",
                        "type": "import",
                        "description": "A function used to repair JSON strings.",
                        "codeSnippet": "import jsonrepair from 'jsonrepair';",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "yaml",
                        "type": "import",
                        "description": "A library used to load YAML formatted strings.",
                        "codeSnippet": "import * as yaml from 'yaml';",
                        "codeLine": 15,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "llm_modes",
                        "type": "import",
                        "description": "Types related to language model modes.",
                        "codeSnippet": "import { llm_modes } from 'llmModes';",
                        "codeLine": 39,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getModelBackend",
                        "type": "import",
                        "description": "Function used to get the model backend.",
                        "codeSnippet": "import { getModelBackend } from 'modelBackend';",
                        "codeLine": 40,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "textModel",
                        "type": "import",
                        "description": "The default text model to be used.",
                        "codeSnippet": "import { textModel } from 'textModels';",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "textModelAdvanced",
                        "type": "import",
                        "description": "An advanced text model to be used.",
                        "codeSnippet": "import { textModelAdvanced } from 'textModels';",
                        "codeLine": 42,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "vertexWAIT",
                        "type": "import",
                        "description": "Time to wait for vertex model.",
                        "codeSnippet": "import { vertexWAIT } from 'config';",
                        "codeLine": 43,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "ollama",
                        "type": "import",
                        "description": "Ollama library to generate responses.",
                        "codeSnippet": "import * as ollama from 'ollama';",
                        "codeLine": 88,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "systemPrompt",
                        "type": "import",
                        "description": "System prompt configuration.",
                        "codeSnippet": "import { systemPrompt } from 'prompts';",
                        "codeLine": 89,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "parseYaml",
                        "type": "import",
                        "description": "Importing the parseYaml function from a module.",
                        "codeSnippet": "import { parseYaml } from 'yaml';",
                        "codeLine": 108,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "import",
                        "description": "Importing the ProjectSummary type from a module.",
                        "codeSnippet": "import { ProjectSummary } from './types';",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "import",
                        "description": "Importing the searchRAG function from a module.",
                        "codeSnippet": "import { searchRAG } from './ragSearch';",
                        "codeLine": 16,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts"
                    },
                    {
                        "name": "wait",
                        "type": "import",
                        "description": "Utility function to wait for a specified duration",
                        "codeSnippet": "await wait(30000);",
                        "codeLine": 24,
                        "codeIndent": 4,
                        "fileName": "llmInterface.ts",
                        "fileLocation": "./src/llmInterface.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "CodeObject",
                        "type": "named export",
                        "description": "Named export from objectSchemas.",
                        "codeSnippet": "import { CodeObject, ... } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "CodeObjectType",
                        "type": "named export",
                        "description": "Named export from objectSchemas.",
                        "codeSnippet": "import { ..., CodeObjectType, ... } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "named export",
                        "description": "Named export from objectSchemas.",
                        "codeSnippet": "import { ..., CodeObjects, ... } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "named export",
                        "description": "Named export from objectSchemas.",
                        "codeSnippet": "import { ..., ProjectSummary, ... } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "named export",
                        "description": "Named export from objectSchemas.",
                        "codeSnippet": "import { ..., codeSummary, ... } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "modelServiceConfig",
                        "type": "named export",
                        "description": "Named export from objectSchemas.",
                        "codeSnippet": "import { ..., modelServiceConfig } from \"./objectSchemas\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "searchRAG",
                        "type": "named export",
                        "description": "Named export from vectorDB.",
                        "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "FunctionDeclarationSchemaType",
                        "type": "named export",
                        "description": "Named export from vertexai.",
                        "codeSnippet": "import { ..., FunctionDeclarationSchemaType, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmBlockThreshold",
                        "type": "named export",
                        "description": "Named export from vertexai.",
                        "codeSnippet": "import { ..., HarmBlockThreshold, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "HarmCategory",
                        "type": "named export",
                        "description": "Named export from vertexai.",
                        "codeSnippet": "import { ..., HarmCategory, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "VertexAI",
                        "type": "named export",
                        "description": "Named export from vertexai.",
                        "codeSnippet": "import { ..., VertexAI, ... } from \"@google-cloud/vertexai\";",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "parseYaml",
                        "type": "export",
                        "description": "Function to convert a YAML string into a JSON object",
                        "codeSnippet": "export function parseYaml(yamlString: string): any { ... }",
                        "codeLine": 12,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "parseText",
                        "type": "export",
                        "description": "Function to convert text into a JSON object using a specified response key",
                        "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any { ... }",
                        "codeLine": 21,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "infer",
                        "type": "export",
                        "description": "Asynchronous function to infer responses using different models and formats",
                        "codeSnippet": "export async function infer(...) { ... }",
                        "codeLine": 27,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "named export",
                        "description": "Asynchronously generates a summary for the provided code using a machine learning model.",
                        "codeSnippet": "export async function getCodeSummaryFromLLM(codeToSummarize: string, model: string = textModel): Promise<codeSummary> { ... }",
                        "codeLine": 60,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    },
                    {
                        "name": "wait",
                        "type": "function",
                        "description": "Utility function to wait for specified milliseconds.",
                        "codeSnippet": "export function wait(ms: number) { ... }",
                        "codeLine": 45,
                        "codeIndent": 0,
                        "fileName": "llmInterface.ts",
                        "fileLocation": ".//src/llmInterface.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/index.ts",
            "fileLocation": ".//src/index.ts",
            "codeSummary": {
                "goal": "The goal of the code is to generate documentation for a codebase using FoFo Docs.",
                "features_functions": [
                    "Imports `commander` for CLI commands and options management.",
                    "Imports `parseCodebase` and `generateDocumentation` functions from external modules.",
                    "Defines a CLI program named 'fofodocs' that includes options for specifying input and output paths, test mode, and generating from a JSON file.",
                    "Implements functionality to parse the codebase and generate documentation, with additional options to generate documentation directly from a JSON file.",
                    "Includes error handling for file existence, directory creation, and documentation generation failures.",
                    "Logs progress and completion status to the console, along with the total time taken."
                ]
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [
                    {
                        "name": "Command",
                        "type": "class",
                        "description": "Class imported from the 'commander' library to handle command-line interfaces.",
                        "codeSnippet": "import { Command } from \"commander\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "subObjects": []
                    }
                ],
                "functions": [
                    {
                        "name": "action",
                        "type": "function",
                        "description": "Async function called when the command is executed. Handles documentation generation for the given project.",
                        "codeSnippet": ".action(async (projectName, options) => { ... })",
                        "codeLine": 19,
                        "codeIndent": 2,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "Name of the project",
                                "example": "myProject"
                            },
                            {
                                "name": "options",
                                "type": "object",
                                "description": "Options provided to the command",
                                "example": "{ input: './src', output: './output', test: 'false', generateFromFile: 'file.json' }"
                            }
                        ],
                        "functionReturns": {
                            "name": "void",
                            "type": "void",
                            "description": "No return value",
                            "example": "N/A"
                        }
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "function",
                        "description": "Generates documentation from a given JSON file or parsed codebase.",
                        "codeSnippet": "const bGenerated = await generateDocumentation(outputDir, null, jsonFile);",
                        "codeLine": 53,
                        "codeIndent": 8,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "outputDir",
                                "type": "string",
                                "description": "The output directory for the generated documentation",
                                "example": "./output"
                            },
                            {
                                "name": "parsedCodebase",
                                "type": "object",
                                "description": "Parsed codebase object",
                                "example": "parsedCodebase"
                            },
                            {
                                "name": "jsonFile",
                                "type": "string",
                                "description": "Path to the JSON file to generate documentation from",
                                "example": "./docs.json"
                            }
                        ],
                        "functionReturns": {
                            "name": "boolean",
                            "type": "boolean",
                            "description": "Indicates whether the documentation generation was successful",
                            "example": "true"
                        }
                    },
                    {
                        "name": "parseCodebase",
                        "type": "function",
                        "description": "Parses the provided codebase to extract relevant information for documentation.",
                        "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                        "codeLine": 75,
                        "codeIndent": 8,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "Path to the project codebase",
                                "example": "./src"
                            },
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "Name of the project",
                                "example": "myProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "parsedCodebase",
                            "type": "object",
                            "description": "An object representing the parsed codebase",
                            "example": "parsedCodebase"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "program",
                        "type": "variable",
                        "description": "An instance of Command from the commander library, used to configure command-line options.",
                        "codeSnippet": "const program = new Command();",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "bTestMode",
                        "type": "variable",
                        "description": "A boolean value indicating whether the script is running in test mode.",
                        "codeSnippet": "const bTestMode = options.test;",
                        "codeLine": 26,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectPath",
                        "type": "variable",
                        "description": "The path to the codebase to be documented, specified by the user.",
                        "codeSnippet": "const projectPath = options.input;",
                        "codeLine": 27,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "outputDir",
                        "type": "variable",
                        "description": "The output directory where documentation will be generated.",
                        "codeSnippet": "const outputDir = options.output;",
                        "codeLine": 28,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "jsonFile",
                        "type": "variable",
                        "description": "The JSON file path from which the documentation will be generated if the flag is set.",
                        "codeSnippet": "const jsonFile = options.generateFromFile;",
                        "codeLine": 29,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "startTime",
                        "type": "variable",
                        "description": "The start time of the codebase parsing process, used to measure total execution time.",
                        "codeSnippet": "const startTime = Date.now();",
                        "codeLine": 58,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "parsedCodebase",
                        "type": "variable",
                        "description": "Holds the result of the parsed codebase from the parseCodebase function.",
                        "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                        "codeLine": 60,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "bGenerated",
                        "type": "variable",
                        "description": "A boolean value indicating whether the documentation generation was successful.",
                        "codeSnippet": "const bGenerated = await generateDocumentation(outputDir, parsedCodebase);",
                        "codeLine": 65,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "endTime",
                        "type": "variable",
                        "description": "The end time of the entire process, used to calculate total execution time.",
                        "codeSnippet": "const endTime = Date.now();",
                        "codeLine": 80,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "totalTime",
                        "type": "variable",
                        "description": "The total time taken for the documentation generation process in seconds.",
                        "codeSnippet": "const totalTime = endTime - startTime;",
                        "codeLine": 81,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "Command",
                        "description": "The primary class used to create command-line programs.",
                        "codeSnippet": "import { Command } from \"commander\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    }
                ],
                "interfaces": [],
                "comments": [
                    {
                        "content": "Generate documentation from JSON file ONLY if flag is set",
                        "type": "comment",
                        "codeLine": 29,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "content": "Check if JSON file exists",
                        "type": "comment",
                        "codeLine": 32,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "content": "Check if output directory exists, if not create it",
                        "type": "comment",
                        "codeLine": 39,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "content": "Generate documentation",
                        "type": "comment",
                        "codeLine": 51,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "content": "1. Parse Codebase",
                        "type": "comment",
                        "codeLine": 66,
                        "codeIndent": 4,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "content": "2. Generate Documentation",
                        "type": "comment",
                        "codeLine": 73,
                        "codeIndent": 6,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "Command",
                        "type": "import",
                        "description": "Command class imported from the 'commander' module",
                        "codeSnippet": "import { Command } from \"commander\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "parseCodebase",
                        "type": "import",
                        "description": "parseCodebase function imported from the './codeParser' module",
                        "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                        "codeLine": 2,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "import",
                        "description": "generateDocumentation function imported from the './documentationGenerator' module",
                        "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    },
                    {
                        "name": "fs",
                        "type": "import",
                        "description": "Importing the 'fs' module, which provides an API for interacting with the file system",
                        "codeSnippet": "import fs from \"fs\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "program",
                        "type": "default",
                        "description": "The main Command program configured for generating documentation using FoFo Docs",
                        "codeSnippet": "export default program;",
                        "codeLine": 105,
                        "codeIndent": 0,
                        "fileName": "index.ts",
                        "fileLocation": ".//src/index.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/documentationGenerator.ts",
            "fileLocation": ".//src/documentationGenerator.ts",
            "codeSummary": {
                "goal": "The code aims to generate documentation for a project, including creating necessary directories and handling JSON context files.",
                "features_functions": {
                    "generateCodeObjectContent": "Formats various aspects of a code object (like isPrivate, isAsync, codeSnippet, functionParameters, functionReturns, subObjects) into a string with markdown formatting.",
                    "getEmoji": "Maps a given type string to an appropriate emoji for visual representation.",
                    "capitalizeFirstLetter": "Capitalizes the first letter of a provided string.",
                    "generateDocumentation": {
                        "description": "Generates documentation by creating directories, checking write permissions, and saving the project context to a JSON file, then parsing it to create markdown documentation.",
                        "features": [
                            "Handles file system operations (creating directories, checking write permissions).",
                            "Saves and reads project context from a JSON file.",
                            "Generates markdown documentation from the project context."
                        ]
                    }
                }
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "jsonToMarkdown",
                        "type": "function",
                        "description": "Converts a JSON project summary into Markdown format and writes it to specified output folder.",
                        "codeSnippet": "function jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) { ... }",
                        "codeLine": 10,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "The summary of the project to be converted into Markdown",
                                "example": "exampleProjectSummary"
                            },
                            {
                                "name": "outputFolder",
                                "type": "string",
                                "description": "The output folder where the Markdown files will be saved",
                                "example": "exampleOutputFolder"
                            }
                        ],
                        "functionReturns": {
                            "name": "undefined",
                            "type": "void",
                            "description": "This function does not return a value",
                            "example": "null"
                        }
                    },
                    {
                        "name": "generateCodeObjectContent",
                        "type": "function",
                        "description": "Generates formatted content for a code object based on its properties and indentation level.",
                        "codeSnippet": "function generateCodeObjectContent(codeObject: CodeObject, indent: number): string { ... }",
                        "codeLine": 78,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "codeObject",
                                "type": "CodeObject",
                                "description": "The code object to be formatted",
                                "example": "exampleCodeObject"
                            },
                            {
                                "name": "indent",
                                "type": "number",
                                "description": "The indentation level for nested content",
                                "example": 2
                            }
                        ],
                        "functionReturns": {
                            "name": "content",
                            "type": "string",
                            "description": "The formatted string representation of the code object",
                            "example": "formattedContent"
                        }
                    },
                    {
                        "name": "getEmoji",
                        "type": "function",
                        "description": "Returns the corresponding emoji for a given string type.",
                        "codeSnippet": "function getEmoji(type: string): string { ... }",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "type",
                                "type": "string",
                                "description": "The type for which the corresponding emoji is required.",
                                "example": "functions"
                            }
                        ],
                        "functionReturns": {
                            "name": "emoji",
                            "type": "string",
                            "description": "The corresponding emoji for the given type.",
                            "example": "🔧"
                        }
                    },
                    {
                        "name": "capitalizeFirstLetter",
                        "type": "function",
                        "description": "Capitalizes the first letter of a given string.",
                        "codeSnippet": "function capitalizeFirstLetter(string: string): string { ... }",
                        "codeLine": 24,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "string",
                                "type": "string",
                                "description": "The string to capitalize.",
                                "example": "example"
                            }
                        ],
                        "functionReturns": {
                            "name": "capitalizedString",
                            "type": "string",
                            "description": "The input string with its first letter capitalized.",
                            "example": "Example"
                        }
                    },
                    {
                        "name": "generateDocumentation",
                        "type": "function",
                        "description": "Generates documentation for the project and saves the project context as a JSON file.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "folderPath",
                                "type": "string",
                                "description": "The path to the folder where the documentation should be generated.",
                                "example": "./docs"
                            },
                            {
                                "name": "projectContext",
                                "type": "ProjectSummary | null",
                                "description": "The project summary context to be documented.",
                                "example": "null"
                            },
                            {
                                "name": "jsonFile",
                                "type": "string",
                                "description": "Optional path to the JSON file where the project context should be saved.",
                                "example": "projectContext.json"
                            }
                        ],
                        "functionReturns": {
                            "name": "success",
                            "type": "boolean",
                            "description": "Indicates whether the documentation generation was successful.",
                            "example": "true"
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "timestamp",
                        "type": "variable",
                        "description": "A timestamp string created from the current date",
                        "codeSnippet": "const timestamp = new Date().toISOString().replace(/[:.]/g, '-');",
                        "codeLine": 10,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "projectFolder",
                        "type": "variable",
                        "description": "The path of the project folder combining output folder and timestamp-ed project name",
                        "codeSnippet": "const projectFolder = path.join(outputFolder, `${projectSummary.projectName}-${timestamp}`);",
                        "codeLine": 11,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "toc",
                        "type": "variable",
                        "description": "An array to store table of contents entries",
                        "codeSnippet": "const toc: string[] = [];",
                        "codeLine": 14,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "fileName",
                        "type": "variable",
                        "description": "The name of a file with .md extension",
                        "codeSnippet": "const fileName = `${file.fileName}.md`;",
                        "codeLine": 23,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "filePath",
                        "type": "variable",
                        "description": "The complete path of the markdown file in the project folder",
                        "codeSnippet": "const filePath = path.join(projectFolder, fileName);",
                        "codeLine": 24,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "fileContent",
                        "type": "variable",
                        "description": "The content of a markdown file that includes summary and TOC",
                        "codeSnippet": "let fileContent = `# ${file.fileName}\\n`;",
                        "codeLine": 25,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "sectionLinks",
                        "type": "variable",
                        "description": "An array to store links to different sections of the markdown file",
                        "codeSnippet": "const sectionLinks: string[] = [];",
                        "codeLine": 35,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "sectionContent",
                        "type": "variable",
                        "description": "An object to store content for different sections such as classes, functions, etc.",
                        "codeSnippet": "const sectionContent = {\n    classes: '',\n    functions: '',\n    variables: '',\n    types: '',\n    comments: '',\n    imports: '',\n    exports: '',\n    interfaces: ''\n};",
                        "codeLine": 37,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "fileFolder",
                        "type": "variable",
                        "description": "The directory path of the file",
                        "codeSnippet": "const fileFolder = path.dirname(filePath);",
                        "codeLine": 66,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "tocPath",
                        "type": "variable",
                        "description": "The path for the Table of Contents file (README.md)",
                        "codeSnippet": "const tocPath = path.join(projectFolder, 'README.md');",
                        "codeLine": 75,
                        "codeIndent": 1,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "content",
                        "type": "variable",
                        "description": "Holds the content being generated for the documentation.",
                        "codeSnippet": "content += `\n${indentation}- **Private:** ${codeObject.isPrivate !== undefined ? codeObject.isPrivate : 'Not Available'}`;",
                        "codeLine": 2,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "indentation",
                        "type": "variable",
                        "description": "Determines the indentation level for the generated content.",
                        "codeSnippet": "content += `\n${indentation}- **Private:** ${codeObject.isPrivate !== undefined ? codeObject.isPrivate : 'Not Available'}`;",
                        "codeLine": 2,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "projectContext",
                        "type": "variable",
                        "description": "Holds the project context information for generating the documentation.",
                        "codeSnippet": "function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                        "codeLine": 69,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "jsonFile",
                        "type": "variable",
                        "description": "Optional parameter to specify the JSON file path for saving the project context.",
                        "codeSnippet": "function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {",
                        "codeLine": 69,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": true,
                        "isPrivate": false
                    },
                    {
                        "name": "timeStamp",
                        "type": "variable",
                        "description": "Holds the current timestamp formatted for file naming.",
                        "codeSnippet": "const timeStamp = new Date().toISOString().replace(/[:.]/g, '-');",
                        "codeLine": 98,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "model",
                        "type": "variable",
                        "description": "Holds the model name from the environment variable or defaults to 'ml'.",
                        "codeSnippet": "const model = process.env.LLM_TO_USE || 'ml';",
                        "codeLine": 99,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "projectContextPath",
                        "type": "variable",
                        "description": "Determines the file path for saving the project context JSON file.",
                        "codeSnippet": "const projectContextPath = path.join(folderPath, `projectContext-${timeStamp}-${model}.json`);",
                        "codeLine": 100,
                        "codeIndent": 8,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts",
                        "isExported": false,
                        "isPrivate": true
                    }
                ],
                "types": [
                    {
                        "name": "CodeObject",
                        "description": "A structure describing code objects within the project.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "CodeObjectType",
                        "description": "A structure defining the different types of code objects.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "sectionContent",
                        "description": "An object organizing different sections of content for code files.",
                        "codeSnippet": "const sectionContent = {\n    classes: '',\n    functions: '',\n    variables: '',\n    types: '',\n    comments: '',\n    imports: '',\n    exports: '',\n    interfaces: ''\n};",
                        "codeLine": 49,
                        "codeIndent": 2,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "CodeObject",
                        "type": "interface",
                        "description": "Represents a generic code object used within the project.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "interface",
                        "description": "Describes the summary structure of a project including its details.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "CodeObjectType",
                        "type": "interface",
                        "description": "Defines the different types of code objects that can exist.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "comments": [
                    {
                        "content": "// Process Code Files",
                        "type": "comment",
                        "codeLine": 22,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "content": "Using Backup Directory",
                        "type": "comment",
                        "codeLine": 67,
                        "codeIndent": 12,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "content": "Backup Directory does not exist. We could not make it!",
                        "type": "comment",
                        "codeLine": 75,
                        "codeIndent": 16,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "content": " Check to make sure the filepath is writeable before proceeding",
                        "type": "comment",
                        "codeLine": 80,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "content": " Save projectContext to a JSON file",
                        "type": "comment",
                        "codeLine": 90,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "content": " parse the context file, etc.",
                        "type": "comment",
                        "codeLine": 116,
                        "codeIndent": 4,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "{ CodeObject, ProjectSummary, CodeObjectType }",
                        "type": "import",
                        "description": "Imports CodeObject, ProjectSummary, and CodeObjectType from the objectSchemas module.",
                        "codeSnippet": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";",
                        "codeLine": 1,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    },
                    {
                        "name": "\"dotenv/config\"",
                        "type": "import",
                        "description": "Imports and configures dotenv to load environment variables from a .env file.",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "generateDocumentation",
                        "type": "export",
                        "description": "An asynchronous function to generate documentation for the project.",
                        "codeSnippet": "export async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> { ... }",
                        "codeLine": 41,
                        "codeIndent": 0,
                        "fileName": "documentationGenerator.ts",
                        "fileLocation": ".//src/documentationGenerator.ts"
                    }
                ]
            }
        },
        {
            "fileName": "src/codeParser.ts",
            "fileLocation": ".//src/codeParser.ts",
            "codeSummary": {
                "goal": "The goal of the code block is to process code files, generate summaries using language models, and save relevant data to a vector database while handling ignored files and checking file sizes.",
                "features_functions": [
                    "Processing code objects from each chunk and updating project summary.",
                    "Merging array of code objects.",
                    "Generating code summary from a language model (LLM).",
                    "Saving data to a vector database.",
                    "Reading file content asynchronously.",
                    "Generating code chunk objects.",
                    "Fetching ignored files from `.gitignore` and `.fofoignore` files.",
                    "Calculating file size in kilobytes.",
                    "Checking if a file is too large based on size and character count."
                ]
            },
            "language": "TypeScript",
            "executionFlow": [],
            "codeObjects": {
                "classes": [],
                "functions": [
                    {
                        "name": "genCodeChunkObj",
                        "type": "async function",
                        "description": "Generates a chunk object containing code objects for a given code chunk in a file.",
                        "codeSnippet": "async function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{ ... }",
                        "codeLine": 28,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectSummary",
                                "type": "ProjectSummary",
                                "description": "Summary of the project including team context.",
                                "example": "{ teamContext: 'Team A', project: 'Project X' }"
                            },
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path of the file being processed.",
                                "example": "\"./src/codeParser.ts\""
                            },
                            {
                                "name": "chunk",
                                "type": "string",
                                "description": "A code chunk to be processed.",
                                "example": "\"function foo() { ... }\""
                            }
                        ],
                        "functionReturns": {
                            "name": "chunkCodeObjects",
                            "type": "Promise<CodeObject>",
                            "description": "Promise that resolves to an object containing identified code objects in the chunk.",
                            "example": "{ functions: [], classes: [], ... }"
                        }
                    },
                    {
                        "name": "mergeObjectArrays",
                        "type": "function",
                        "description": "Merges arrays within an incoming code object into the existing code object and removes duplicates.",
                        "codeSnippet": "export function mergeObjectArrays(codeObjArray: CodeObject, newCodeObj: any): CodeObject { ... }",
                        "codeLine": 72,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": false,
                        "functionParameters": [
                            {
                                "name": "codeObjArray",
                                "type": "CodeObject",
                                "description": "Existing code object array to be merged.",
                                "example": "{ functions: [], classes: [], ... }"
                            },
                            {
                                "name": "newCodeObj",
                                "type": "any",
                                "description": "New code object array to merge into the existing array.",
                                "example": "{ functions: [], classes: [], ... }"
                            }
                        ],
                        "functionReturns": {
                            "name": "mergedCodeObj",
                            "type": "CodeObject",
                            "description": "Merged code object after removing duplicates.",
                            "example": "{ functions: [], classes: [], ... }"
                        }
                    },
                    {
                        "name": "parseCodebase",
                        "type": "function",
                        "description": "Parses the codebase to generate a summary of the project.",
                        "codeSnippet": "export async function parseCodebase(projectPath: string, projectName: string): Promise<ProjectSummary> { ... }",
                        "codeLine": 32,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": true,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "The path to the project to be parsed.",
                                "example": "/path/to/project"
                            },
                            {
                                "name": "projectName",
                                "type": "string",
                                "description": "The name of the project.",
                                "example": "MyProject"
                            }
                        ],
                        "functionReturns": {
                            "name": "projectSummary",
                            "type": "ProjectSummary",
                            "description": "A summary of the project with metadata and analysis.",
                            "example": {
                                "projectName": "MyProject",
                                "projectDescription": {},
                                "projectLocation": "/path/to/project",
                                "codeFiles": [],
                                "ragData": [],
                                "teamContext": ""
                            }
                        }
                    },
                    {
                        "name": "getIgnoredFiles",
                        "type": "function",
                        "description": "Retrieves a list of ignored files based on various .gitignore and .fofoignore files in specified paths.",
                        "codeSnippet": "async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }",
                        "codeLine": 73,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "projectPath",
                                "type": "string",
                                "description": "The base path of the project.",
                                "example": "/user/project/"
                            }
                        ],
                        "functionReturns": {
                            "name": "ignorePatterns",
                            "type": "Promise<string[]>",
                            "description": "A promise that resolves to an array of ignore patterns extracted from .gitignore and .fofoignore files.",
                            "example": "[\"node_modules/\", \".env\"]"
                        }
                    },
                    {
                        "name": "getFileSizeInKB",
                        "type": "function",
                        "description": "Calculates the file size in kilobytes for a given file path.",
                        "codeSnippet": "async function getFileSizeInKB(filePath: string): Promise<number> { ... }",
                        "codeLine": 118,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path to the file.",
                                "example": "/user/project/file.txt"
                            }
                        ],
                        "functionReturns": {
                            "name": "fileSize",
                            "type": "Promise<number>",
                            "description": "A promise that resolves to the file size in kilobytes.",
                            "example": "4.5"
                        }
                    },
                    {
                        "name": "isFileTooLarge",
                        "type": "function",
                        "description": "Determines if a file exceeds the specified file size or character limit.",
                        "codeSnippet": "async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars: number = 300): Promise<boolean> { ... }",
                        "codeLine": 123,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false,
                        "isAsync": true,
                        "functionParameters": [
                            {
                                "name": "filePath",
                                "type": "string",
                                "description": "The path to the file.",
                                "example": "/user/project/file.txt"
                            },
                            {
                                "name": "maxFileSizeKB",
                                "type": "number",
                                "description": "The maximum allowed file size in kilobytes.",
                                "example": 512
                            },
                            {
                                "name": "maxChars",
                                "type": "number",
                                "description": "The maximum allowed number of characters in the file content (default is 300).",
                                "example": 300
                            }
                        ],
                        "functionReturns": {
                            "name": "isTooLarge",
                            "type": "Promise<boolean>",
                            "description": "A promise that resolves to true if the file exceeds the specified size or character limit, otherwise false.",
                            "example": true
                        }
                    }
                ],
                "variables": [
                    {
                        "name": "breakNum",
                        "type": "variable",
                        "description": "Number of tokens to break the chunks into, fetched from environment variable or defaults to 400.",
                        "codeSnippet": "const breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;",
                        "codeLine": 30,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "objectKeys",
                        "type": "variable",
                        "description": "Keys of code objects that are processed in the code chunk.",
                        "codeSnippet": "const objectKeys: CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'comments', 'imports', 'exports'];",
                        "codeLine": 36,
                        "codeIndent": 1,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "chunkCodeObjectsAny",
                        "type": "variable",
                        "description": "Temporary storage for code objects identified in a code chunk.",
                        "codeSnippet": "const chunkCodeObjectsAny = {} as any;",
                        "codeLine": 37,
                        "codeIndent": 1,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "promptTemplate",
                        "type": "variable",
                        "description": "Template for generating LLM prompts, which will be filled based on the type of code object being processed.",
                        "codeSnippet": "let promptTemplate = '';",
                        "codeLine": 39,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "ignorePatterns",
                        "type": "variable",
                        "description": "Patterns to ignore files/directories while parsing.",
                        "codeSnippet": "const ignorePatterns = [",
                        "codeLine": 33,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "filePaths",
                        "type": "variable",
                        "description": "Array of file paths to be processed.",
                        "codeSnippet": "let filePaths: string[] = [];",
                        "codeLine": 38,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "file",
                        "type": "variable",
                        "description": "File name extracted from the project path.",
                        "codeSnippet": "const file = projectPath.split(\"/\").pop();",
                        "codeLine": 49,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fullFilePath",
                        "type": "variable",
                        "description": "Full path of the file being processed.",
                        "codeSnippet": "const fullFilePath = `${projectPath}/${filePath}`;",
                        "codeLine": 66,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "fileLanguage",
                        "type": "variable",
                        "description": "Language type inferred from the file.",
                        "codeSnippet": "const fileLanguage = await infer(",
                        "codeLine": 69,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeChunks",
                        "type": "variable",
                        "description": "Array of code chunks split from the file content.",
                        "codeSnippet": "const codeChunks = breakCodeIntoChunks(fileContent, breakNum); // 1000 tokens per chunk",
                        "codeLine": 89,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "getCurrentLineEndLineBasedOnChunk",
                        "type": "variable",
                        "description": "Function to get the start and end lines of the current chunk.",
                        "codeSnippet": "const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {",
                        "codeLine": 90,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": true
                    },
                    {
                        "name": "endLine",
                        "type": "variable",
                        "description": "End line number of the current chunk.",
                        "codeSnippet": "const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end;",
                        "codeLine": 103,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "chunk",
                        "type": "variable",
                        "description": "Individual chunk of code being processed",
                        "codeSnippet": "documentData: chunk,",
                        "codeLine": 10,
                        "codeIndent": 10,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    },
                    {
                        "name": "codeObjects",
                        "type": "variable",
                        "description": "Chunk of code objects generated for a file",
                        "codeSnippet": "const codeObjects = await genCodeChunkObj(projectSummary, fullFilePath, fileContent);",
                        "codeLine": 28,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts",
                        "isExported": false,
                        "isPrivate": false
                    }
                ],
                "types": [
                    {
                        "name": "CodeObjects",
                        "description": "Array of code objects categorized by type.",
                        "codeSnippet": "import { ..., CodeObjects, ... } from \"./objectSchemas\";",
                        "codeLine": 6,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "codeSummary",
                        "description": "An alias for the overall summary and metadata about the project's code.",
                        "codeSnippet": "type codeSummary = {};",
                        "codeLine": 53,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "interfaces": [
                    {
                        "name": "ProjectSummary",
                        "type": "interface",
                        "description": "Represents the summary of a project, including its name, description, location, code files, RAG data, and team context.",
                        "codeSnippet": "interface ProjectSummary { projectName: string; projectDescription: codeSummary; projectLocation: string; codeFiles: string[]; ragData: RagData[]; teamContext: string; }",
                        "codeLine": 25,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeFileSummary",
                        "type": "interface",
                        "description": "Represents the summary of a code file, including its name, location, summary, language, execution flow, and code objects.",
                        "codeSnippet": "interface CodeFileSummary { fileName: string; fileLocation: string; codeSummary: codeSummary; language: string; executionFlow: string[]; codeObjects: CodeObject; }",
                        "codeLine": 59,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "interface",
                        "description": "Represents RAG (Risk Assessment Grid) data, containing metadata for the code chunk.",
                        "codeSnippet": "interface RagData { metadata: { filename: string; codeChunkId: number; codeChunkLineStart: number; codeChunkLineEnd: number; } }",
                        "codeLine": 100,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "comments": [
                    {
                        "content": " Process each chunk's code objects (update projectSummary.ragData, etc.)",
                        "type": "comment",
                        "codeLine": 18,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": " We need to merge our incoming codeObj's key-array pairs with the existing codeObjArray",
                        "type": "comment",
                        "codeLine": 82,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": " If the key already exists, we need to merge the arrays",
                        "type": "comment",
                        "codeLine": 83,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": " If the key does not exist, we need to add it to the codeObjArray",
                        "type": "comment",
                        "codeLine": 84,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": " Delete any duplicate code objects:",
                        "type": "comment",
                        "codeLine": 95,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": " Make sure the key object is iterable",
                        "type": "comment",
                        "codeLine": 98,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "Placeholder, TODO==> Add support for team context",
                        "type": "comment",
                        "codeLine": 39,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "Determine if the projectPath is a directory or a file",
                        "type": "comment",
                        "codeLine": 46,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "750KB is the default limit",
                        "type": "comment",
                        "codeLine": 75,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "Handle large files by breaking into chunks and processing separately",
                        "type": "comment",
                        "codeLine": 76,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// Process code objects and update projectSummary and codeFiles",
                        "type": "comment",
                        "codeLine": 17,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// Process each chunk's code objects (update projectSummary.ragData, etc.)",
                        "type": "comment",
                        "codeLine": 19,
                        "codeIndent": 6,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// WE need to define the overall execution flow here, with another LLM call?",
                        "type": "comment",
                        "codeLine": 39,
                        "codeIndent": 4,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// Helper Functions Implementation:",
                        "type": "comment",
                        "codeLine": 59,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// CHECK for these files in order:",
                        "type": "comment",
                        "codeLine": 69,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// .fofoignore not found, ignore the error",
                        "type": "comment",
                        "codeLine": 81,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// .gitignore not found, ignore the error",
                        "type": "comment",
                        "codeLine": 92,
                        "codeIndent": 8,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// Filter out empty lines",
                        "type": "comment",
                        "codeLine": 90,
                        "codeIndent": 10,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "content": "// Check the amount of characters in the file content",
                        "type": "comment",
                        "codeLine": 109,
                        "codeIndent": 2,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "imports": [
                    {
                        "name": "CodeFileSummary",
                        "type": "import",
                        "description": "Imports the 'CodeFileSummary' type from the './objectSchemas' module",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeObject",
                        "type": "import",
                        "description": "Imports the 'CodeObject' type from the './objectSchemas' module",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "CodeObjects",
                        "type": "import",
                        "description": "Imports the 'CodeObjects' type from the './objectSchemas' module",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "ProjectSummary",
                        "type": "import",
                        "description": "Imports the 'ProjectSummary' type from the './objectSchemas' module",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "RagData",
                        "type": "import",
                        "description": "Imports the 'RagData' type from the './objectSchemas' module",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "codeSummary",
                        "type": "import",
                        "description": "Imports the 'codeSummary' function from the './objectSchemas' module",
                        "codeSnippet": "import { CodeFileSummary, CodeObject, CodeObjects, ProjectSummary, RagData, codeSummary } from \"./objectSchemas\";",
                        "codeLine": 3,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "infer",
                        "type": "import",
                        "description": "Imports the 'infer' function from the './llmInterface' module",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "callLLM",
                        "type": "import",
                        "description": "Imports the 'callLLM' function from the './llmInterface' module",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getCodeSummaryFromLLM",
                        "type": "import",
                        "description": "Imports the 'getCodeSummaryFromLLM' function from the './llmInterface' module",
                        "codeSnippet": "import { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";",
                        "codeLine": 4,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getLanguageTypeFromFile",
                        "type": "import",
                        "description": "Imports the 'getLanguageTypeFromFile' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "classesPrompt",
                        "type": "import",
                        "description": "Imports the 'classesPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "functionsPrompt",
                        "type": "import",
                        "description": "Imports the 'functionsPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "variablesPrompt",
                        "type": "import",
                        "description": "Imports the 'variablesPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "typesPrompt",
                        "type": "import",
                        "description": "Imports the 'typesPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "interfacesPrompt",
                        "type": "import",
                        "description": "Imports the 'interfacesPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "commentsPrompt",
                        "type": "import",
                        "description": "Imports the 'commentsPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "importsPrompt",
                        "type": "import",
                        "description": "Imports the 'importsPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "exportsPrompt",
                        "type": "import",
                        "description": "Imports the 'exportsPrompt' function from the './prompt' module",
                        "codeSnippet": "import { getLanguageTypeFromFile, classesPrompt, functionsPrompt, variablesPrompt, typesPrompt, interfacesPrompt, commentsPrompt, importsPrompt, exportsPrompt } from \"./prompt\";",
                        "codeLine": 5,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "saveToVectorDatabase",
                        "type": "import",
                        "description": "Imports the 'saveToVectorDatabase' function from the './vectorDB' module",
                        "codeSnippet": "import { saveToVectorDatabase } from \"./vectorDB\";",
                        "codeLine": 6,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "breakCodeIntoChunks",
                        "type": "import",
                        "description": "Imports the 'breakCodeIntoChunks' function from the './shared' module",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getFileContentLen",
                        "type": "import",
                        "description": "Imports the 'getFileContentLen' function from the './shared' module",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getTokens",
                        "type": "import",
                        "description": "Imports the 'getTokens' function from the './shared' module",
                        "codeSnippet": "import { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";",
                        "codeLine": 7,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "dotenv/config",
                        "type": "import",
                        "description": "Imports the 'dotenv/config' module to load environment variables",
                        "codeSnippet": "import \"dotenv/config\";",
                        "codeLine": 9,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ],
                "exports": [
                    {
                        "name": "mergeObjectArrays",
                        "type": "export",
                        "description": "This function merges incoming CodeObject arrays with existing ones by combining arrays with the same keys and ensuring no duplicates.",
                        "codeSnippet": "export function mergeObjectArrays(\n  codeObjArray: CodeObject,\n  newCodeObj: any\n): CodeObject {",
                        "codeLine": 61,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "parseCodebase",
                        "type": "export",
                        "description": "Asynchronous function to parse the codebase and return a project summary.",
                        "codeSnippet": "export async function parseCodebase(\n  projectPath: string,\n  projectName: string\n): Promise<ProjectSummary> {",
                        "codeLine": 25,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getIgnoredFiles",
                        "type": "function",
                        "description": "Asynchronously retrieves a list of ignored file patterns from .gitignore and .fofoignore files.",
                        "codeSnippet": "export async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }",
                        "codeLine": 83,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "getFileSizeInKB",
                        "type": "function",
                        "description": "Asynchronously gets the size of a specified file in kilobytes.",
                        "codeSnippet": "export async function getFileSizeInKB(filePath: string): Promise<number> { ... }",
                        "codeLine": 116,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    },
                    {
                        "name": "isFileTooLarge",
                        "type": "function",
                        "description": "Asynchronously checks if a file exceeds a given size and character limit.",
                        "codeSnippet": "export async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars: number = 300): Promise<boolean> { ... }",
                        "codeLine": 121,
                        "codeIndent": 0,
                        "fileName": "codeParser.ts",
                        "fileLocation": ".//src/codeParser.ts"
                    }
                ]
            }
        }
    ],
    "ragData": [
        {
            "metadata": {
                "filename": ".//src/vectorDB.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 136
            },
            "documentData": "import { ProjectSummary, RagData } from \"./objectSchemas\";\nimport 'dotenv/config'\nimport { ChromaClient, GoogleGenerativeAiEmbeddingFunction, OpenAIEmbeddingFunction, Collection } from 'chromadb'\n\nconst apiPass = process.env.API_PASS || ''\nconst apiUser = process.env.API_USER || ''\nconst geminiKey = process.env.GEMINI_KEY || ''\nconst apiURL = process.env.API_URL || ''\n\n// Check to see if any of the environment variables are missing\nif (!apiPass || !apiUser || !geminiKey || !apiURL) {\n    console.error('Missing environment variables - Please check your .env file')\n    process.exit(1)\n}\n\nconst embedderMode = process.env.EMBEDDER_MODE || 'GCP'\n\nlet embedder:any|undefined=undefined\n\nswitch (embedderMode) {\n    case 'GCP':\n        embedder = new GoogleGenerativeAiEmbeddingFunction({googleApiKey: geminiKey})\n        break\n    case 'OpenAI':\n        embedder = new OpenAIEmbeddingFunction({openai_api_key: process.env.OPENAI_API_KEY || '', openai_organization_id: process.env.OPENAI_ORG_ID || ''})\n        break\n    default:\n        embedder = new GoogleGenerativeAiEmbeddingFunction({googleApiKey: geminiKey})\n}\n\n\n// const chromaSettings = {\n//     path: apiURL,\n//       \"auth\": {\n//           provider: \"basic\", credentials: `${apiUser}:${apiPass}`\n//           }\n//     }\n\nconst chromaSettings = undefined\n\nconst client = new ChromaClient(chromaSettings);\n\n\n\nexport async function load_create_collection(projectName:string): Promise<Collection|void> {\n\n    const name = projectName\n    let collection:Collection|void\n\n    const hb = await client.heartbeat().catch((err:any) => {\n        console.log('Error connecting to database')\n        console.error(err)\n    })\n\n    console.log('Heartbeat for Database:')\n    console.log(hb)\n\n    try {\n        collection = await client.getCollection({name:name, embeddingFunction: embedder})\n        if (collection instanceof Collection && 'name' in collection) {\n            return collection\n        }\n    } catch (err) {\n        console.log('Collection not found, creating collection')\n    }\n\n\n\n    collection = await client.createCollection({name: name, embeddingFunction: embedder}).catch((err:any) => {\n        console.log('Error creating collection')\n        console.error(err)\n    })\n\n    return collection\n}\n\n\nexport async function saveToVectorDatabase(projectName:string, code: string, ragData:RagData): Promise<boolean> {\n    let bOK = true\n\n    const meta = ragData.metadata as any\n\n    const filename = meta.filename\n\n    delete meta.codeObjects\n\n\n    const collection = await load_create_collection(`${projectName}`)\n\n    const embeddings = await embedder.generate([code])\n    console.log(embeddings)\n\n    if (!collection) {\n        console.error('Error creating collection')\n        return false\n    }\n\n    const res = await collection.add({\n        ids: [`${projectName}-${filename}-${ragData.metadata.codeChunkId}`],\n        documents: [\n            code\n        ],\n        embeddings: embeddings,\n        metadatas: [meta]\n    })\n\n    console.log('Saved to Vector Database:')\n    console.log(res)\n    \n    return true\n}\nexport async function searchRAG(projectName:string, searchString: string): Promise<RagData> {\n\n    const collection = await load_create_collection(projectName)\n    if (!collection) {\n        console.error('Error creating collection')\n        return {} as RagData\n    }\n    const searchEmbeddings = await embedder.generate([searchString])\n    const searchResults = await collection.query({queryEmbeddings: searchEmbeddings})\n\n    console.log('Search Results for RAG:')\n    console.log(searchResults)\n\n    const ragData = {\n        metadata: searchResults.metadatas[0] as any || {},\n        embeddings : searchResults.embeddings?[0] as any : {},\n        documentData: searchResults.documents[0] as any || []\n    }\n\n    console.log('RAG Data:')\n    console.log(ragData)\n\n    return ragData\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/shared.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0
            },
            "documentData": "import { readFile } from 'fs/promises';\n\n\nexport async function getFileContentLen(filePath: string): Promise<number> {\n    return await readFile(filePath, 'utf-8').then(content => content.length);\n}\n\nexport function breakCodeIntoChunks(code: string, chunkSize: number): string[] {\n    const codeByLine = code.split('\\n');\n    const chunks = [];\n    let currentChunk = '';\n    let currentChunkTokenCount = 0;\n\n    for (const line of codeByLine) {\n        const lineTokenCount = line.split(/\\s+/).length; // Approximate token count by splitting on whitespace\n\n        if (currentChunkTokenCount + lineTokenCount <= chunkSize) {\n            currentChunk += line + '\\n';\n            currentChunkTokenCount += lineTokenCount;\n        } else {\n            chunks.push(currentChunk);\n            currentChunk = line + '\\n';\n            currentChunkTokenCount = lineTokenCount;\n        }\n    }\n\n    if (currentChunk) {\n        chunks.push(currentChunk);\n    }\n\n    return chunks;\n}\n\nexport function getTokens(code: string): number {\n    return code.split(' ').length\n}"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 133
            },
            "documentData": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\\n\\n1. The app... etc\n`\nimport { CodeObjects } from \"./objectSchemas\";\nconst generalPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => {\n    const fileName = filePath.split('/').pop();\n    return`\nYou will be asked to provide a JSON object that contains the identified ${type} objects in the code snippet attached at the bottom of this request.\n\n## Context\n- Project and Team Context: \n${context}\n\n## Previously Parsed Code\n- Relevant Code:\n${relevantCode}\n\n## Task\nIn the following code snippet, please identify all of the ${type} objects.\n\n## Response Format\nRespond ONLY with a JSON object containing the identified ${type} objects and their descriptions. Here is an example of the required format:\n\n${type === 'classes' ? `\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"type\": \"class\",\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"subObjects\": []\n        }\n    ]\n}` : type === 'functions' ? `\n{\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"type\": \"function\",\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"isExported\": false,\n            \"isPrivate\": false,\n            \"isAsync\": false\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"name\": \"returnVal1\",\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ]\n}` : type === 'variables' ? `\n{\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"type\": \"variable\",\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n            \"isExported\": false,\n            \"isPrivate\": false\n        }\n    ]\n}` : type === 'types' ? `\n{\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'interfaces' ? `\n{\n    \"interfaces\": [\n        {\n            \"name\": \"InterfaceName\",\n            \"type\": \"interface\",\n            \"description\": \"Description of the interface\",\n            \"codeSnippet\": \"interface InterfaceName { ... }\",\n            \"codeLine\": 65,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'comments' ? `\n{\n    \"comments\": [\n        {\n            \"content\": \"This is a comment\",\n            type: \"comment\",\n            \"codeLine\": 50,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\"\n        }\n    ]\n}` : type === 'imports' ? `\n{\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"type\": \"import\",\n"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 133,
                "codeChunkLineEnd": 238
            },
            "documentData": "            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\",\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : type === 'exports' ? `\n{\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"type\": \"export\",\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"${fileName}\",\n            \"fileLocation\": \"${filePath}\",\n        }\n    ]\n}` : ''\n}\n\n## Code Snippet for file: ${fileName}\n- File Path: ${filePath}\n${codeSnippet}\n`}\n\nexport const classesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'classes');\n\nexport const functionsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'functions');\n\nexport const variablesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'variables');\n\nexport const typesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'types');\n\nexport const interfacesPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'interfaces');\n\nexport const commentsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'comments');\n\nexport const importsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'imports');\n\nexport const exportsPrompt = (context: string, relevantCode: string, filePath: string, codeSnippet: string, type: CodeObjects) => generalPrompt(context, relevantCode, filePath, codeSnippet, 'exports');\n\n// export const promptTemplate = `\n// You will be asked to provide a JSON object that contains the identified code objects in the code snippet attached at the bottom of this request.\n\n// ## Context\n// - Project and Team Context: \n// <supplemental context>\n\n// ## Previously Parsed Code\n// - Relevant Code:\n// <relevant code>\n\n// ## Task\n// In the following code snippet, please identify all of the following:\n// - Classes\n// - Functions\n// - Variables\n// - Types\n// - Interfaces\n// - Comments\n// - Imports\n// - Exports\n\n// ## Response Format\n// Respond ONLY with a JSON object containing the identified code objects and their descriptions. Here is an example of the required format:\n\n// {\n//     \"classes\": [\n//         {\n//             \"name\": \"ClassName\",\n//             \"type\": \"class\",\n//             \"description\": \"Description of the class\",\n//             \"codeSnippet\": \"class ClassName { ... }\",\n//             \"codeLine\": 10,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//             \"subObjects\": []\n//         }\n//     ],\n//     \"functions\": [\n//         {\n//             \"name\": \"functionName\",\n//             \"type\": \"function\",\n//             \"description\": \"Description of the function\",\n//             \"codeSnippet\": \"function functionName() { ... }\",\n//             \"codeLine\": 20,\n//             \"codeIndent\": 2,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//             \"functionParameters\": [\n//                 {\n//                     \"name\": \"param1\",\n//                     \"type\": \"string\",\n//                     \"description\": \"Description of the parameter\",\n//                     \"example\": \"exampleValue\"\n//                 }\n//             ],\n//             \"functionReturns\": {\n"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 238,
                "codeChunkLineEnd": 333
            },
            "documentData": "//                 \"name\": \"returnVal1\",\n//                 \"type\": \"string\",\n//                 \"description\": \"Description of the return value\",\n//                 \"example\": \"exampleReturn\"\n//             }\n//         }\n//     ],\n//     \"variables\": [\n//         {\n//             \"name\": \"variableName\",\n//             \"type\": \"variable\",\n//             \"description\": \"Description of the variable\",\n//             \"codeSnippet\": \"let variableName = ...;\",\n//             \"codeLine\": 30,\n//             \"codeIndent\": 2,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//         }\n//     ],\n//     \"types\": [\n//         {\n//             \"name\": \"TypeName\",\n//             \"description\": \"Description of the type\",\n//             \"codeSnippet\": \"type TypeName = ...;\",\n//             \"codeLine\": 40,\n//             \"codeIndent\": 2,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//         }\n//     ],\n//     \"interfaces\": [\n//         {\n//             \"name\": \"InterfaceName\",\n//             \"type\": \"interface\",\n//             \"description\": \"Description of the interface\",\n//             \"codeSnippet\": \"interface InterfaceName { ... }\",\n//             \"codeLine\": 65,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//         }\n//     ],\n//     \"comments\": [\n//         {\n//             \"content\": \"This is a comment\",\n//             type: \"comment\",\n//             \"codeLine\": 50,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\"\n//         }\n//     ],\n//     \"imports\": [\n//         {\n//             \"name\": \"importName\",\n//             \"type\": \"import\",\n//             \"description\": \"Description of the import\",\n//             \"codeSnippet\": \"import importName from 'module';\",\n//             \"codeLine\": 60,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//         }\n//     ],\n//     \"exports\": [\n//         {\n//             \"name\": \"exportName\",\n//             \"type\": \"export\",\n//             \"description\": \"Description of the export\",\n//             \"codeSnippet\": \"export { exportName };\",\n//             \"codeLine\": 70,\n//             \"codeIndent\": 0,\n//             \"fileName\": \"${fileName}\",\n//             \"fileLocation\": \"${filePath}\",\n//         }\n//     ]    \n// }\n\n// ## Code Snippet\n// - File Path: <file path>\n// <code snippet>\n// `;\n\n\n\n\nexport const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}\n    \n    Please respond with JUST the language name. For example: JavaScript\n    `\n\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/objectSchemas.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 0
            },
            "documentData": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';\nexport type CodeObjects = 'classes' | 'functions' | 'variables' | 'types' | 'comments' | 'imports' | 'exports' | 'interfaces' | 'fileName' | 'fileLocation'\n\nexport interface ProjectSummary {\n    projectName: string;\n    projectDescription: codeSummary\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}\n\nexport interface models {\n    name: string,\n    model: any,\n}\nexport interface modelServiceConfig {\n    models: models[],\n    endpoint?:string \n}\n\nexport interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}\n\nexport interface codeSummary {\n    goal: string,\n    features_functions: string,\n  }\nexport interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: codeSummary;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject;\n}\n\nexport interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}\n\nexport interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    description: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    content?:string;\n    fileName: string;\n    fileLocation: string;\n    subObjects?: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}\n\nexport type CodeObjectTypes = 'name' | 'type' | 'description' | 'codeSnippet' | 'codeLine' | 'codeIndent' | 'fileName' | 'fileLocation' | 'subObjects' | 'parentObject' | 'functionParameters' | 'functionReturns' | 'isExported' | 'isFunction' | 'isClass' | 'isPrivate' | 'isAsync'"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 166
            },
            "documentData": "import {\n  CodeObject,\n  CodeObjectType,\n  CodeObjects,\n  ProjectSummary,\n  codeSummary,\n  modelServiceConfig,\n} from \"./objectSchemas\"; // Adjust path as needed\nimport { searchRAG } from \"./vectorDB\";\nimport yaml from \"js-yaml\";\nimport { jsonrepair } from \"jsonrepair\";\nimport { Ollama } from \"ollama\";\nimport OpenAI from \"openai\";\n\n\nimport \"dotenv/config\";\n\nimport {\n  FunctionDeclarationSchemaType,\n  HarmBlockThreshold,\n  HarmCategory,\n  VertexAI,\n} from \"@google-cloud/vertexai\";\nimport { getTokens } from \"./shared\";\n\nlet retries = 0;\n\n// Model Service Modes:\nconst endpoints = {\n  OLLAMA: process.env.OLLAMA_SERVER_URL || \"http://infinity.local:11434\",\n};\nconst systemPrompt =\n  \"You are a developer A.I. that summarizes and analyzes code. Please answer all questions asked of you exactly as presented.\";\n\nconst MODEL_MODES = [\n  {\n    name: \"codeqwen:7b-code-v1.5-q8_0\",\n    model: \"codeqwen:7b-code-v1.5-q8_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"qwen:32b-text-v1.5-q4_0\",\n    model: \"qwen:32b-text-v1.5-q4_0\",\n    backend: \"OLLAMA\"\n  },\n  {\n    name: \"gpt-4o\",\n    model: \"gpt-4o\",\n    backend: \"OPENAI\"\n  },\n  {\n    name: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    model: \"phi3:3.8b-mini-instruct-4k-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    model: \"llama3-gradient:8b-instruct-1048k-q6_K\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"phi3\",\n    model: \"phi3\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"dolphin-llama3:8b-v2.9-fp16\",\n    model: \"dolphin-llama3:8b-v2.9-fp16\",\n    backend: \"OLLAMA\",\n  },\n  {\n    name: \"codechat-bison\",\n    model: \"codechat-bison\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"codechat-bison-32k\",\n    model: \"codechat-bison-32k\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-flash-preview-0514\",\n    model: \"gemini-1.5-flash-preview-0514\",\n    backend: \"VERTEX\",\n  },\n  {\n    name: \"gemini-1.5-pro-preview-0514\",\n    model: \"gemini-1.5-pro-preview-0514\",\n    backend: \"VERTEX\",\n  },\n];\n\nconst getModelBackend = (selectedModel: string) => {\n  const model = MODEL_MODES.find((m) => m.model === selectedModel);\n  if (model) {\n    return model.backend as llm_modes;\n  }\n  throw new Error(\"Model not found\");\n};\n\ntype llm_modes = \"OLLAMA\" | \"VERTEX\" | \"OPENAI\";\n\n// OpenAI Settings\nconst openai = new OpenAI({\n  organization: process.env.OPENAI_ORG_ID,\n  apiKey: process.env.OPENAI_API_KEY\n});\n\n// OLLAMA Settings\nconst ollama = new Ollama({ host: endpoints.OLLAMA });\nconst contextLength = 32000; // Works with 24GB GPU - RTX 4090\n\n// Vertex Settings:\nconst project = \"sweet-papa-technologies\";\nconst location = \"us-central1\";\nconst textModel = \"gemini-1.5-flash-preview-0514\";\nconst textModelAdvanced = \"gemini-1.5-pro-preview-0514\t\";\nconst vertexWAIT = 5000;\n\nconst vertexAI = new VertexAI({ project: project, location: location });\n\nconst safetySettings = [\n  {\n    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n  {\n    category: HarmCategory.HARM_CATEGORY_UNSPECIFIED,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n  },\n];\n\nconst generativeModel = vertexAI.getGenerativeModel({\n  model: textModel,\n  safetySettings: safetySettings,\n});\n\nconst generateModelAdv = vertexAI.getGenerativeModel({\n  model: textModelAdvanced,\n  safetySettings: safetySettings,\n});\n\nconst generativeModelPreview = vertexAI.getGenerativeModel({\n  model: textModel,\n});\n\n// General Functions\nfunction validateJSON(jsonString: string): boolean {\n  try {\n    JSON.parse(jsonString);\n    return true;\n  } catch (e) {\n    console.error(e);\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 166,
                "codeChunkLineEnd": 285
            },
            "documentData": "    return false;\n  }\n}\n\nfunction fixJSON(jsonString: string): string {\n  try {\n    return jsonrepair(jsonString);\n  } catch (e) {\n    throw new Error(\"Unable to fix JSON\");\n  }\n}\n\nexport function parseYaml(yamlString: string): any {\n  // Convert YAML file into a proper JSON object\n  try {\n    const obj = yaml.load(yamlString) as any;\n    return obj as any;\n  } catch (e: any) {\n    console.log(e);\n    throw new Error(\"Invalid YAML object\");\n  }\n}\n\nexport function parseText(text: string, resKey = \"response\"): any {\n  // Convert text into a proper JSON object\n  const obj = {} as any;\n  obj[resKey] = text;\n  return obj;\n}\n\nasync function wait(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function infer(\n  prompt: string,\n  responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",\n  responseKey?: string,\n  bPro = false,\n  bRetry = true,\n  supplementalData?: any,\n  model: string = textModel\n): Promise<any> {\n  const modelBackend:llm_modes = getModelBackend(model);\n\n  console.log(\"====> Model Backend:\", modelBackend);\n\n  if (modelBackend === \"VERTEX\") {\n    if (model !== textModel && model !== textModelAdvanced) {\n      console.log(\"Waiting 1 second...\");\n      await wait(1000);\n    } else {\n      console.log(\"Waiting 5 seconds...\");\n      await wait(vertexWAIT);\n    }\n  }\n\n  const promptResponseInstructions = `Please respond with a ${responseMode} containing your answer. ${\n    responseMode !== \"TEXT STRING\"\n      ? `Please properly format and escape your output, as I will need to parse your response.`\n      : \"\"\n  }${\n    responseKey ? `The key for the response should be ${responseKey}.` : \"\"\n  }\\n\\n`;\n\n  if (responseMode !== \"TEXT STRING\" && responseKey) {\n    console.warn(\n      \"responseKey is only applicable for TEXT STRING responseMode. Ignoring responseKey.\"\n    );\n  }\n\n  prompt = prompt.trim();\n  prompt = promptResponseInstructions + prompt;\n\n  const promptCharLen = prompt.length;\n  const promptLen = getTokens(prompt);\n\n  console.log(`Prompt: ${promptCharLen} Characters`);\n  console.log(`Prompt: ${promptLen} Tokens`);\n\n  let promptNew = prompt;\n\n  if (responseMode === \"JSON object\") {\n    promptNew = `\n    In your response, PLEASE BE SURE TO FORMAT YOUR RESPONSE AS A PARSE-ABLE JSON OBJECT.\n    This means that your response keys and values should be properly formatted and escaped.\n\n    ${prompt}\n    `;\n  }\n\n  let response = \"\";\n\n  const startTime = Date.now();\n\n  // BASED on the model passed, we will call the appropriate endpoints, etc:\n\n  if (modelBackend === \"OLLAMA\") {\n    //\n\n    // const contextLength = promptLen > 1000 ? 32000 : 4096;\n\n    const ollamaResponse = await ollama.generate({\n      model: model,\n      prompt: promptNew,\n      stream: false,\n      system: systemPrompt,\n      options: {\n        // temperature: 0.3,\n        // top_p: 0.95,\n        // top_k: 0.95,\n        num_ctx: contextLength,\n      },\n    });\n    console.log(ollamaResponse.response.length);\n    response = ollamaResponse.response;\n  } else if (modelBackend === \"VERTEX\") {\n    //\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 285,
                "codeChunkLineEnd": 409
            },
            "documentData": "    const request = {\n      contents: [{ role: \"user\", parts: [{ text: promptNew }] }],\n    };\n\n    let genFunction = generativeModel;\n    if (bPro === true) {\n      genFunction = generateModelAdv;\n    }\n\n    const result = await genFunction.generateContent(request);\n\n    try {\n      response = result.response.candidates?.[0].content?.parts[0].text || \"\";\n    } catch (error: any) {\n      console.error(\"Error parsing response from Gemini:\", error);\n      console.debug(\"Prompt to Gemini:\", promptNew);\n\n      if (typeof result === \"string\") {\n        console.log(\n          \"Response from Gemini:\",\n          \"Response is a string, but not a valid JSON object\"\n        );\n        console.log(result);\n      } else {\n        console.log(\n          \"Response from Gemini - String-y-fied:\",\n          JSON.stringify(result)\n        );\n      }\n\n      if (bRetry == true || retries < 3) {\n        retries += 1;\n        console.log(\"Retrying since there was an error\");\n        return await infer(\n          promptNew,\n          responseMode,\n          responseKey,\n          bPro,\n          false,\n          supplementalData,\n          model\n        );\n      }\n    }\n  } else if (modelBackend === \"OPENAI\") {\n    const completion = await openai.chat.completions.create({\n      messages: [{ role: \"system\", content: systemPrompt },\n      { role: \"user\", content: promptNew}\n      ],\n      model: model,\n    });\n  \n    console.log(completion.choices[0]);\n    response = completion.choices[0].message.content || \"\";\n\n    if (response === \"\") {\n      console.error(\"Empty response from OpenAI\");\n      console.error(completion);\n    }\n  }\n  else {\n    console.error(\"Unknown Model Backend\");\n  }\n\n  const endTime = Date.now();\n  const totalTime = endTime - startTime;\n\n  // PRint the total time in seconds, truncated to 2 decimal places\n  console.log(`Total Time: ${totalTime / 1000}s`);\n\n  if (typeof response !== \"string\") {\n    throw new Error(\"Invalid response from LLM\");\n  }\n\n  if (responseMode === \"JSON object\") {\n    response = response.replace(\"```json\", \"\").replace(\"```\", \"\").trim();\n\n    let bFixed = false;\n    if (validateJSON(response) === true) {\n      console.log(\"Valid JSON:\");\n    } else {\n      console.error(\"Invalid JSON, attempting to fix:\");\n      try {\n        const fixedJson = fixJSON(response);\n        console.log(\"Fixed JSON:\", fixedJson);\n        response = fixedJson;\n        bFixed = true;\n      } catch (error: any) {\n        console.error(\"Error fixing JSON:\", error.message);\n\n        if (bRetry == true || retries < 3) {\n          retries += 1;\n          console.log(\n            \"Retrying since JSON output was not correct, here is what we got:\"\n          );\n\n          console.log(`\\n\\nBAD JSON\\n${response}\\n\\n`);\n\n          return await infer(\n            promptNew,\n            responseMode,\n            responseKey,\n            bPro,\n            false,\n            supplementalData,\n            model\n          );\n        }\n\n        console.warn(\"Returning error message as JSON -- Please Try Again\");\n        return { error: error, original: response } as any;\n      }\n    }\n\n    try {\n      const res = JSON.parse(response);\n\n      if (bFixed == true) {\n        console.debug(\"JSON was fixed! Checking that everything else is OK now.\");\n\n        // Check if Object malformed into an Array some how...\n        if (Array.isArray(res) === true && res.length >= 1) {\n          console.log(\"This looks like a fixed JSON object!\");\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 3,
                "codeChunkLineStart": 409,
                "codeChunkLineEnd": 527
            },
            "documentData": "          // if (\"classes\" in res[0] === false) {\n          //   console.warn(\"This object does not look correct!\");\n          //   console.warn(res);\n          // }\n\n          const newData = res[0];\n\n          // We should check that the fixed JSON object has the same amount of keys as our interface for the object:\n          const keys = Object.keys(newData);\n\n          const expectedKeys: CodeObjects[] = [\n            \"classes\",\n            \"functions\",\n            \"variables\",\n            \"types\",\n            \"interfaces\",\n            \"comments\",\n            \"imports\",\n            \"exports\"\n          ];\n\n          if (keys.length < expectedKeys.length) {\n            console.warn(\n              \"This object does not look correct! Attempting to fix:\"\n            );\n\n            const fixedData = {} as any;\n            for (const key of expectedKeys) {\n              if (key in newData) {\n                fixedData[key] = newData[key];\n              } else {\n                if (key === \"fileName\") {\n                  fixedData[key] = supplementalData.fileName || \"unknown\";\n                }\n                if (key === \"fileLocation\") {\n                  fixedData[key] = supplementalData.fileLocation || \"unknown\";\n                }\n                if (key !== \"fileName\" && key !== \"fileLocation\") {\n                  fixedData[key] = [];\n                }\n              }\n            }\n          }\n\n          console.log(\"JSON should be fixed now...\");\n\n          return res[0];\n        } else if (Array.isArray(res) === true) {\n          console.log(\"This looks like a fixed JSON object, but it is empty!\");\n          console.warn(res);\n        }\n      }\n\n      return res;\n    } catch (e: any) {\n      console.error(\"Error parsing JSON:\", e);\n      console.warn(\"Returning error message as JSON -- Please Try Again\");\n      return { error: e, original: response } as any;\n    }\n\n  } else if (responseMode === \"YAML object\") {\n    response = response.replace(\"```yaml\", \"\").replace(\"```\", \"\").trim();\n    const res = parseYaml(response);\n    return res;\n  } else {\n    return parseText(response, responseKey);\n  }\n}\n\nexport async function getCodeSummaryFromLLM(\n  codeToSummarize: string,\n  model: string = textModel\n): Promise<codeSummary> {\n  const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \n  Please respond with a JSON object as follows:\n  {\n    \"goal\": \"The goal of the code\",\n    \"features_functions\": \"Any relevant features\",\n  }\n\n  ### Code To Sumnarize:\n  ${codeToSummarize}\n  `\n  const codeSummary = await infer(\n    question,\n    \"JSON object\",\n    undefined,\n    false,\n    undefined,\n    undefined,\n    model\n  );\n  return codeSummary;\n}\n\nexport async function callLLM(\n  promptTemplate: string,\n  projectContext: ProjectSummary,\n  code: string,\n  filePath: string,\n  bRAG = false,\n  model: string = textModel\n): Promise<any> {\n  if (bRAG === true) {\n    // Take 400 characters of relevant code\n    const relevantCode = await searchRAG(projectContext.projectName, code); // Placeholder, implement searchRAG function\n    const r =\n      relevantCode.documentData.length > 400\n        ? relevantCode.documentData.substring(0, 400)\n        : relevantCode.documentData;\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", r); // Not implemented yet, placeholder for RAG\n  } else {\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");\n  }\n\n  // 1. Prepare Prompt\n  const prompt = promptTemplate\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 4,
                "codeChunkLineStart": 527,
                "codeChunkLineEnd": 577
            },
            "documentData": "    .replace(\"<supplemental context>\", projectContext.teamContext) // Add team context\n    .replace(\"<code snippet>\", code)\n    .replace(\"<file path>\", filePath);\n\n  const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";\n  const fileName = getFileNameFromPath(filePath);\n\n  // 2. Call AI API\n  const response = await infer(\n    prompt,\n    \"JSON object\",\n    undefined,\n    true,\n    true,\n    {\n      fileLocation: filePath,\n      fileName: fileName,\n    },\n    model\n  ).catch((error) => {\n    console.error(\"Error calling API:\", error);\n    return { error: error };\n  });\n\n  // IF too many request or rate limit has been hit, we wait 30 seconds and try again\n  if (response.error && response.error.code === 429) {\n    console.log(\"Rate Limit Hit, waiting 30 seconds...\");\n    await wait(30000);\n    return await callLLM(\n      promptTemplate,\n      projectContext,\n      code,\n      filePath,\n      bRAG,\n      model\n    );\n  }\n\n  // 3. Parse and Validate Response\n  let codeObjects: any = response;\n\n  // 4. Enhance with filePath\n  if (!codeObjects.fileName) codeObjects.fileName = fileName;\n\n  if (!codeObjects.fileLocation) codeObjects.fileLocation = filePath;\n\n  return codeObjects;\n}\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/index.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 109
            },
            "documentData": "import { Command } from \"commander\";\nimport { parseCodebase } from \"./codeParser\";\nimport { generateDocumentation } from \"./documentationGenerator\";\nimport fs from \"fs\";\n\nconst program = new Command();\n\nprogram\n  .name(\"fofodocs\")\n  .description(\"Generate documentation for your codebase using FoFo Docs\")\n  .version(\"1.0.0\")\n  .argument(\"<project_name>\", \"Name of your project\")\n  .option(\n    \"-i, --input <path>\",\n    \"Path to your codebase (default: current directory)\",\n    \".\"\n  )\n  .option(\n    \"-o, --output <path>\",\n    \"Path to output documentation (default: ./output)\",\n    \"./output\"\n  )\n  .option(\"-t, --test <bool>\", \"Run in Test Mode\", \"false\")\n  .option(\"-g, --generateFromFile <path>\", \"Generate MD documentation from JSON file\")\n  .action(async (projectName, options) => {\n    console.log(\n      `FoFo Docs is generating documentation for project: ${projectName}`\n    );\n\n    const bTestMode = options.test;\n    const projectPath = options.input;\n    const outputDir = options.output;\n    const jsonFile = options.generateFromFile;\n\n    // Generate documentation from JSON file ONLY if flag is set\n    if (jsonFile) {\n      console.log(\"Generating documentation from JSON file:\", jsonFile);\n\n      // Check if JSON file exists\n      if (!fs.existsSync(jsonFile)) {\n        console.error(\"JSON file does not exist!\");\n        return;\n      }\n\n      // Check if output directory exists, if not create it\n      if (!fs.existsSync(outputDir)) {\n        try {\n          fs.mkdirSync(outputDir, {\n            recursive: true,\n          });\n        } catch (err) {\n          console.error(err);\n          throw new Error(\"Error creating output directory\");\n        }\n      }\n\n      // Generate documentation\n      \n      try {\n        const bGenerated = await generateDocumentation(outputDir, null, jsonFile);\n        if (!bGenerated) {\n          console.error(\"Documentation generation failed!\");\n          return;\n        }\n      } catch (error) {\n        console.error(\"Error during documentation generation:\", error);\n        if (!bTestMode) {\n          process.exit(1);\n        }\n        return;\n      }\n      console.log(\"Documentation generation complete!\");\n      return;\n    }\n\n    // 1. Parse Codebase\n    const startTime = Date.now();\n    try {\n      const parsedCodebase = await parseCodebase(projectPath, projectName);\n      parsedCodebase.projectName = projectName;\n\n      // 2. Generate Documentation\n      const bGenerated = await generateDocumentation(\n        outputDir,\n        parsedCodebase        \n      );\n\n      if (!bGenerated) {\n        console.error(\"Documentation generation failed!\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error during documentation generation:\", error);\n      if (!bTestMode) {\n        process.exit(1);\n      }\n      return;\n    }\n\n    console.log(\"Documentation generation complete!\");\n    const endTime = Date.now();\n    const totalTime = endTime - startTime;\n    console.log(`Total Time: ${totalTime / 1000}s`);\n    \n  });\n\nprogram.parse();\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 121
            },
            "documentData": "import { CodeObject, ProjectSummary, CodeObjectType } from \"./objectSchemas\";\nimport fs from 'fs';\nimport path from 'path';\nimport \"dotenv/config\";\n\nconst backupDirectory = path.join(__dirname, 'backup');\n\nfunction jsonToMarkdown(projectSummary: ProjectSummary, outputFolder: string) {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const projectFolder = path.join(outputFolder, `${projectSummary.projectName}-${timestamp}`);\n    fs.mkdirSync(projectFolder, { recursive: true });\n\n    const toc: string[] = [];\n    \n    toc.push(`# ${projectSummary.projectName}`);\n    toc.push(`\\n## Project Description\\n${projectSummary.projectDescription.goal}`);\n    toc.push(`\\n## Features and Functions\\n${projectSummary.projectDescription.features_functions}`);\n    toc.push(`\\n## Team Context\\n${projectSummary.teamContext}`);\n    toc.push(`\\n## Table of Contents\\n`);\n\n    // Process Code Files\n    projectSummary.codeFiles.forEach(file => {\n        const fileName = `${file.fileName}.md`;\n        const filePath = path.join(projectFolder, fileName);\n        toc.push(`\\n- [${file.fileName}](./${fileName})`);\n\n        let fileContent = `# ${file.fileName}\\n`;\n        fileContent += `\\n**Summary:** ${file.codeSummary.goal}\\n`;\n        fileContent += `\\n- **File Location:** ${file.fileLocation}`;\n        fileContent += `\\n- **Language:** ${file.language}`;\n        fileContent += `\\n## Table of Contents\\n`;\n\n        const sectionLinks: string[] = [];\n\n        const sectionContent = {\n            classes: '',\n            functions: '',\n            variables: '',\n            types: '',\n            comments: '',\n            imports: '',\n            exports: '',\n            interfaces: ''\n        };\n\n        Object.keys(file.codeObjects).forEach(key => {\n            const baseObject = file.codeObjects as any;\n            const obj = baseObject[key] as any[];\n            console.log(obj)\n            obj.forEach((codeObject: CodeObject) => {\n                const content = generateCodeObjectContent(codeObject, 0);\n                switch (codeObject.type) {\n                    case 'class':\n                        sectionContent.classes += content;\n                        break;\n                    case 'function':\n                        sectionContent.functions += content;\n                        break;\n                    case 'variable':\n                        sectionContent.variables += content;\n                        break;\n                    case 'type':\n                        sectionContent.types += content;\n                        break;\n                    // case 'comment':\n                    //     sectionContent.comments += content;\n                    //     break;\n                    case 'import':\n                        sectionContent.imports += content;\n                        break;\n                    case 'export':\n                        sectionContent.exports += content;\n                        break;\n                    case 'interface':\n                        sectionContent.interfaces += content;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n\n        for (const [section, content] of Object.entries(sectionContent)) {\n            if (content) {\n                const emoji = getEmoji(section);\n                const sectionString = `${section}`\n                const sectionTitle = `## ${sectionString}\\n${emoji} **${sectionString.toUpperCase()}**`;\n                fileContent += `${sectionTitle}\\n${content}\\n`;\n                sectionLinks.push(`- [${sectionString}](#${sectionString})`);\n            }\n        }\n\n        fileContent = fileContent.replace('## Table of Contents\\n', `## Table of Contents\\n${sectionLinks.join('\\n')}\\n`);\n\n        // Make sure the folder path for the file exists\n        const fileFolder = path.dirname(filePath);\n\n        try {\n            fs.mkdirSync(fileFolder, { recursive: true });\n        } catch (err) {\n            console.error(`Error creating folder for ${file.fileName}`);\n        }\n\n        fs.writeFileSync(filePath, fileContent);\n    });\n\n    // Write TOC\n    const tocPath = path.join(projectFolder, 'README.md');\n    fs.writeFileSync(tocPath, toc.join('\\n'));\n}\n\nfunction generateCodeObjectContent(codeObject: CodeObject, indent: number): string {\n    const indentation = '  '.repeat(indent);\n\n    let content = `\\n${indentation}### ${codeObject.name || 'Other Details'} - [${(codeObject.type || 'Undefined').toUpperCase()}]`;\n    content += `\\n${indentation}- **Description:** ${codeObject.description || 'undefined'}`;\n    content += `\\n${indentation}- **Line:** ${codeObject.codeLine !== undefined ? codeObject.codeLine : 'undefined'}`;\n    content += `\\n${indentation}- **Indent:** ${codeObject.codeIndent !== undefined ? codeObject.codeIndent : 'undefined'}`;\n    content += `\\n${indentation}- **Location:** ${codeObject.fileName || 'undefined'} (${codeObject.fileLocation || 'undefined'})`;\n    content += `\\n${indentation}- **Exported:** ${codeObject.isExported !== undefined ? codeObject.isExported : 'Not Available'}`;\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 121,
                "codeChunkLineEnd": 243
            },
            "documentData": "    content += `\\n${indentation}- **Private:** ${codeObject.isPrivate !== undefined ? codeObject.isPrivate : 'Not Available'}`;\n    content += `\\n${indentation}- **Async:** ${codeObject.isAsync !== undefined ? codeObject.isAsync : 'Not Available'}\\n\\n`;\n    content += `\\n${indentation}**Code Snippet:**\\n\\`\\`\\`\\n${codeObject.codeSnippet || codeObject.content}\\n\\`\\`\\``;\n\n    if (codeObject.functionParameters && codeObject.functionParameters.length > 0) {\n        content += `\\n${indentation}###### Function Parameters:`;\n        codeObject.functionParameters.forEach(param => {\n            content += `\\n${indentation}- **${param.name}** (${param.type}): ${param.description} \\n Example: ${param.example}`;\n        });\n    }\n\n    if (codeObject.functionReturns) {\n        content += `\\n${indentation}###### Function Returns:`;\n        content += `\\n${indentation}- **Type:** ${codeObject.functionReturns.type}`;\n        content += `\\n${indentation}- **Description:** ${codeObject.functionReturns.description}`;\n        content += `\\n${indentation}- **Example:** ${codeObject.functionReturns.example}`;\n    }\n\n    if (codeObject.subObjects && codeObject.subObjects.length > 0) {\n        content += `\\n${indentation}###### Sub Objects:`;\n        codeObject.subObjects.forEach(subObj => {\n            content += generateCodeObjectContent(subObj, indent + 1);\n        });\n    }\n\n    return content;\n}\n\nfunction getEmoji(type: string): string {\n    switch (type) {\n        case 'classes':\n            return '📘';\n        case 'functions':\n            return '🔧';\n        case 'variables':\n            return '🧮';\n        case 'types':\n            return '🏷️';\n        case 'comments':\n            return '💬';\n        case 'imports':\n            return '📥';\n        case 'exports':\n            return '📤';\n        case 'interfaces':\n            return '🌉';\n        default:\n            return '';\n    }\n}\n\nfunction capitalizeFirstLetter(string: string): string {\n    return string.charAt(0).toUpperCase + string.slice(1);\n}\n\nexport async function generateDocumentation(folderPath: string, projectContext: ProjectSummary | null = null, jsonFile?: string): Promise<boolean> {\n    if (!fs.existsSync(folderPath)) {\n        try {\n            fs.mkdirSync(folderPath, {\n                recursive: true\n            });\n        } catch (err) {\n            console.error(err);\n            console.log(\"Using Backup Directory\");\n\n            if (!fs.existsSync(backupDirectory)) {\n                fs.mkdirSync(backupDirectory, {\n                    recursive: true\n                });\n            }\n\n            if (!fs.existsSync(backupDirectory)) {\n                console.error(\"Backup Directory does not exist. We could not make it!\");\n                return false;\n            }\n\n            folderPath = backupDirectory;\n        }\n    }\n\n    // Check to make sure the filepath is writeable before proceeding\n    try {\n        fs.accessSync(folderPath, fs.constants.W_OK);\n    } catch (err) {\n        console.error(`Cannot write to ${folderPath}. Please check the path and try again.`);\n        return false;\n    }\n\n    // Save projectContext to a JSON file\n    if (!jsonFile) {\n        const timeStamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const model= process.env.LLM_TO_USE || 'ml';\n        const projectContextPath = path.join(folderPath, `projectContext-${timeStamp}-${model}.json`);\n        jsonFile = projectContextPath;\n\n        try {\n            fs.writeFileSync(jsonFile, JSON.stringify(projectContext, null, 4));\n        } catch (err) {\n            console.error(`Error writing project context to ${projectContextPath}`);\n        }\n    } else {\n        const projectContextPath = jsonFile;\n\n        if (!projectContext) {\n            try {\n                projectContext = JSON.parse(fs.readFileSync(projectContextPath, 'utf-8')) as ProjectSummary;\n            } catch (err) {\n                console.error(`Error reading project context from ${projectContextPath}`);\n            }\n        }\n    }\n\n    // parse the context file, etc.\n    if (!projectContext) {\n        console.error(`Error generating MD file. Project context is empty.`);\n        return false;\n    }\n    jsonToMarkdown(projectContext, folderPath);\n\n    return true;\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 120
            },
            "documentData": "import { glob } from \"glob\";\nimport { readFile, stat } from \"fs/promises\";\nimport {\n  CodeFileSummary,\n  CodeObject,\n  CodeObjects,\n  ProjectSummary,\n  RagData,\n  codeSummary,\n} from \"./objectSchemas\";\nimport { infer, callLLM, getCodeSummaryFromLLM } from \"./llmInterface\";\nimport { \n    getLanguageTypeFromFile, \n    classesPrompt,\n    functionsPrompt,\n    variablesPrompt,\n    typesPrompt,\n    interfacesPrompt,\n    commentsPrompt,\n    importsPrompt,\n    exportsPrompt\n } from \"./prompt\";\nimport { saveToVectorDatabase } from \"./vectorDB\";\nimport { breakCodeIntoChunks, getFileContentLen, getTokens } from \"./shared\";\nimport fs from \"fs\";\nimport \"dotenv/config\";\n\nconst llmToUse = process.env.LLM_TO_USE || undefined;\nconst breakNum = Number(process.env.MAX_TOKEN_SPLIT) || 400;\n\n\nasync function genCodeChunkObj(projectSummary:ProjectSummary, filePath:string, chunk:string):Promise<CodeObject>{\n    // Process each chunk's code objects (update projectSummary.ragData, etc.)\n    const objectKeys:CodeObjects[] = ['classes', 'functions', 'variables', 'types', 'interfaces', 'comments', 'imports', 'exports']\n    const chunkCodeObjectsAny = {} as any;\n    \n    for (const key of objectKeys) {\n\n    let promptTemplate = \"\"\n\n    switch (key) {\n        case 'classes':\n            promptTemplate = classesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'functions':\n            promptTemplate = functionsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'variables':\n            promptTemplate = variablesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'types':\n            promptTemplate = typesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'interfaces':\n            promptTemplate = interfacesPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'comments':\n            promptTemplate = commentsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'imports':\n            promptTemplate = importsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        case 'exports':\n            promptTemplate = exportsPrompt(projectSummary.teamContext, \"<relevant code>\", filePath, chunk, key)\n            break;\n        default:\n            console.error(\"Error: Invalid object key\")\n            break;\n    }\n\n    const codeObjects = await callLLM(\n        promptTemplate,\n        projectSummary,\n        chunk,\n        filePath,\n        undefined,\n        llmToUse\n      );\n\n     // insert the object into the chunkCodeObjects\n     chunkCodeObjectsAny[key] = codeObjects[key];\n    }\n\n    const chunkCodeObjects = chunkCodeObjectsAny as CodeObject;\n\n    return chunkCodeObjects;\n}\n\n\nexport function mergeObjectArrays(\n  codeObjArray: CodeObject,\n  newCodeObj: any\n): CodeObject {\n  // We need to merge our incoming codeObj's key-array pairs with the existing codeObjArray\n  // If the key already exists, we need to merge the arrays\n  // If the key does not exist, we need to add it to the codeObjArray\n  const mergedCodeObj: any = codeObjArray;\n  for (const key in newCodeObj) {\n    // if the current key is a string, skip it\n    if (typeof newCodeObj[key] === \"string\") {\n      continue;\n    }\n    if (key in mergedCodeObj) {\n      mergedCodeObj[key] = [...mergedCodeObj[key], ...newCodeObj[key]];\n    } else {\n      mergedCodeObj[key] = newCodeObj[key];\n    }\n  }\n\n  // Delete any duplicate code objects:\n  console.log(\"Deleting Duplicate Code Objects\");\n  for (const key in mergedCodeObj as CodeObject) {\n    const foundKeys: string[] = [];\n    // Make sure the key object is iterable\n    if (!Array.isArray(mergedCodeObj[key])) {\n      continue;\n    }\n    for (const arrayObj of mergedCodeObj[key]) {\n      if (\"name\" in arrayObj) {\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 120,
                "codeChunkLineEnd": 242
            },
            "documentData": "        if (foundKeys.includes(arrayObj.name)) {\n          mergedCodeObj[key] = mergedCodeObj[key].filter(\n            (obj: any) => obj.name !== arrayObj.name\n          );\n        } else {\n          foundKeys.push(arrayObj.name);\n        }\n      } else if (\"content\" in arrayObj) {\n        if (foundKeys.includes(arrayObj.content)) {\n          mergedCodeObj[key] = mergedCodeObj[key].filter(\n            (obj: any) => obj.content !== arrayObj.content\n          );\n        } else {\n          foundKeys.push(arrayObj.content);\n        }\n      } else {\n        console.warn(\"Error: Code Object has no name or content property\");\n        continue;\n      }\n    }\n  }\n  return mergedCodeObj;\n}\n\nexport async function parseCodebase(\n  projectPath: string,\n  projectName: string\n): Promise<ProjectSummary> {\n  const projectSummary: ProjectSummary = {\n    projectName: projectName,\n    projectDescription: {} as codeSummary,\n    projectLocation: projectPath,\n    codeFiles: [],\n    ragData: [],\n    teamContext: \"\", // Placeholder, TODO==> Add support for team context\n  };\n\n  const ignorePatterns = [\n    \"node_modules/**\",\n    \"dist/**\",\n    ...(await getIgnoredFiles(projectPath)),\n  ];\n  let filePaths: string[] = [];\n\n  // Determine if the projectPath is a directory or a file\n  if (fs.lstatSync(projectPath).isDirectory()) {\n    filePaths = await glob(\"**/*.{ts,js,tsx,jsx}\", {\n      cwd: projectPath,\n      ignore: ignorePatterns,\n    }); // TODO=> Add support for way more files\n  } else {\n    const file = projectPath.split(\"/\").pop();\n    projectPath = projectPath.split(\"/\").slice(0, -1).join(\"/\");\n\n    if (!file) {\n      throw new Error(\"Invalid file path\");\n    }\n    filePaths = [file];\n  }\n\n  await glob(\"**/*.{ts,js,tsx,jsx}\", {\n    cwd: projectPath,\n    ignore: ignorePatterns,\n  }); // TODO=> Add support for way more files\n\n  for (const filePath of filePaths) {\n    console.log(`Parsing file: ${filePath}`);\n    const fullFilePath = `${projectPath}/${filePath}`;\n\n    const fileLanguage = await infer(\n      getLanguageTypeFromFile(fullFilePath),\n      \"TEXT STRING\",\n      \"language\",\n      false,\n      undefined,\n      undefined,\n      llmToUse\n    );\n    console.log(\"fileLanguage\", fileLanguage.language);\n    const codeFileSummary: CodeFileSummary = {\n      fileName: filePath,\n      fileLocation: fullFilePath,\n      codeSummary: {} as codeSummary, // Placeholder, will be updated later\n      language: fileLanguage.language || \"Unknown\",\n      executionFlow: [], // Placeholder, will be updated later\n      codeObjects: {} as CodeObject, // Placeholder, will be updated later\n    };\n    let currentLine = 0;\n\n    if ((await isFileTooLarge(fullFilePath, 750, breakNum)) == true) {\n      // 750KB is the default limit\n      // Handle large files by breaking into chunks and processing separately\n      const fileContent = await readFile(fullFilePath, \"utf-8\");\n      const codeChunks = breakCodeIntoChunks(fileContent, breakNum); // 1000 tokens per chunk\n      const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {\n        const lines = chunk.split(\"\\n\");\n        return {\n          start: currentLine,\n          end: currentLine + lines.length,\n        };\n      };\n      console.log(\"Code broken into codeChunks length =\", codeChunks.length);\n      for (const [index, chunk] of codeChunks.entries()) {\n        console.log(\n          \"Processing chunk:\",\n          index + 1,\n          \"of \",\n          codeChunks.length,\n          \" chunks for file \",\n          filePath\n        );\n        const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end;\n\n        const chunkCodeObjects = await genCodeChunkObj(projectSummary, fullFilePath, chunk);\n\n        const ragData: RagData = {\n          metadata: {\n            filename: fullFilePath,\n            codeChunkId: index,\n            codeChunkLineStart: currentLine,\n            codeChunkLineEnd: endLine,\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 242,
                "codeChunkLineEnd": 379
            },
            "documentData": "            codeObjects: chunkCodeObjects,\n            codeChunkSummary: chunkCodeObjects.description,\n          },\n          documentData: chunk,\n        };\n\n        projectSummary.ragData.push(ragData);\n\n        codeFileSummary.codeObjects = mergeObjectArrays(\n          codeFileSummary.codeObjects,\n          chunkCodeObjects\n        );\n        codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\n          chunk,\n          llmToUse\n        );\n\n        await saveToVectorDatabase(projectName, chunk, ragData);\n\n        currentLine = endLine;\n      }\n    } else {\n      const fileContent = await readFile(fullFilePath, \"utf-8\");\n      const codeObjects = await genCodeChunkObj(projectSummary, fullFilePath, fileContent);\n      // Process code objects and update projectSummary and codeFiles\n\n      // Process each chunk's code objects (update projectSummary.ragData, etc.)\n      const ragData: RagData = {\n        metadata: {\n          filename: fullFilePath,\n          codeChunkId: 0,\n          codeChunkLineStart: 0,\n          codeChunkLineEnd: 0,\n          codeObjects: codeObjects,\n          codeChunkSummary: codeObjects.description,\n        },\n        documentData: fileContent,\n      };\n\n      projectSummary.ragData.push(ragData); \n\n      await saveToVectorDatabase(projectName, fileContent, ragData);\n\n      codeFileSummary.codeObjects = mergeObjectArrays(\n        codeFileSummary.codeObjects,\n        codeObjects\n      );\n      codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\n        fileContent,\n        llmToUse\n      );\n    }\n\n    // WE need to define the overall execution flow here, with another LLM call?\n\n    projectSummary.codeFiles.push(codeFileSummary);\n  }\n\n  let codeDescription = '';\n    for (const codeFile of projectSummary.codeFiles) {\n        codeDescription += codeFile.codeSummary.goal + \"\\n\" + codeFile.codeSummary.features_functions + \"\\n\";\n    }\n  projectSummary.projectDescription = \n    await getCodeSummaryFromLLM(\n      \"Summaries of Code Files: \\n\" + codeDescription,\n      llmToUse\n    )\n  \n\n  return projectSummary;\n}\n\n// Helper Functions Implementation:\nasync function getIgnoredFiles(projectPath: string): Promise<string[]> {\n  let ignorePatterns: string[] = [];\n  const basePath = projectPath.split(\"/\").slice(0, -1).join(\"/\");\n  const executionPath = process.cwd();\n\n  console.log(\"basePath\", basePath);\n  console.log(\"executionPath\", executionPath);\n\n  // CHECK for these files in order:\n  const pathsToCheck = [\n    `${basePath}/.gitignore`,\n    `${basePath}/.fofoignore`,\n    `${executionPath}/.gitignore`,\n    `${executionPath}/.fofoignore`,\n  ];\n\n  for (const path of pathsToCheck) {\n    if (path.includes(\"fofoignore\")) {\n      try {\n        const fofoignoreContent = await readFile(\n          path,\n          \"utf-8\"\n        );\n        ignorePatterns.push(...fofoignoreContent.split(\"\\n\").filter(Boolean));\n      } catch (err) {\n        // .fofoignore not found, ignore the error\n        console.warn(\"No .fofoignore file found in \" + path);\n      }\n    } else {\n      try {\n        const gitignoreContent = await readFile(\n          path,\n          \"utf-8\"\n        );\n        ignorePatterns.push(...gitignoreContent.split(\"\\n\").filter(Boolean)); // Filter out empty lines\n      } catch (err) {\n        // .gitignore not found, ignore the error\n        console.warn(\"No .gitignore file found in \" + path);\n      }\n    }\n  }\n\n  return ignorePatterns;\n}\n\nasync function getFileSizeInKB(filePath: string): Promise<number> {\n  return await stat(filePath).then((stats) => stats.size / 1024);\n}\n\nasync function isFileTooLarge(\n  filePath: string,\n  maxFileSizeKB: number,\n  maxChars: number = 300\n): Promise<boolean> {\n  // Check the amount of characters in the file content\n  const file = await readFile(filePath, \"utf-8\");\n  const tooLong = getTokens(file) > maxChars;\n\n  if (tooLong === true) return true;\n\n  return await getFileSizeInKB(filePath).then((size) => size > maxFileSizeKB);\n}\n\n"
        }
    ],
    "teamContext": ""
}