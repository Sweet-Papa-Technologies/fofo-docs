{
    "projectName": "fofo-docs",
    "projectDescription": "",
    "projectLocation": "./",
    "codeFiles": [
        {
            "fileName": "src/vectorDB.ts",
            "fileLocation": ".//src/vectorDB.ts",
            "codeSummary": {
                "summary": "The code block is incomplete. It seems to be intended to store summaries of code chunks, but it lacks any actual code summaries. To provide a useful summary, please provide the code chunks that you would like summarized.",
                "goal": "To store summaries of code chunks.",
                "features": [],
                "functions": []
            },
            "language": "language:TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "load_create_collection",
                            "description": "Loads or creates a collection in the vector database.",
                            "codeSnippet": "export async function load_create_collection(projectName:string): Promise<Collection|void> {  \n    const name = projectName  \n    let collection:Collection|void  \n    const hb = await client.heartbeat().catch((err:any) => {  \n        console.log('Error connecting to database')  \n        console.error(err)  \n    })  \n    console.log('Heartbeat for Database:')  \n    console.log(hb)  \n    try {  \n        collection = await client.getCollection({name:name, embeddingFunction: embedder})  \n        if (collection instanceof Collection && 'name' in collection) {  \n            return collection  \n        }  \n    } catch (err) {  \n        console.log('Collection not found, creating collection')  \n    }  \n    collection = await client.createCollection({name: name, embeddingFunction: embedder}).catch((err:any) => {  \n        console.log('Error creating collection')  \n        console.error(err)  \n    })  \n    return collection  \n}",
                            "codeLine": 37,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project",
                                    "example": "myProject"
                                }
                            ],
                            "functionReturns": {
                                "type": "Promise<Collection|void>",
                                "description": "The collection object if it was loaded or created successfully, otherwise void.",
                                "example": "collection object"
                            }
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "description": "Saves code and associated data to the vector database.",
                            "codeSnippet": "export async function saveToVectorDatabase(projectName:string, code: string, ragData:RagData): Promise<boolean> {  \n    let bOK = true  \n    const meta = ragData.metadata as any  \n    delete meta.codeObjects  \n    const collection = await load_create_collection(projectName)  \n    const embeddings = await embedder.generate([code])  \n    console.log(embeddings)  \n    if (!collection) {  \n        console.error('Error creating collection')  \n        return false  \n    }  \n    const res = await collection.add({  \n        ids: [`${projectName}-${ragData.metadata.codeChunkId}`],  \n        documents: [  \n            code  \n        ],  \n        embeddings: embeddings[0]  \n    }).catch((err:any) => {  \n        console.error(err)  \n        bOK = false  \n    })  \n    return bOK  \n}",
                            "codeLine": 65,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project",
                                    "example": "myProject"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to be saved",
                                    "example": "const myVar = 'hello world';"
                                },
                                {
                                    "name": "ragData",
                                    "type": "RagData",
                                    "description": "Object containing associated data",
                                    "example": "{}"
                                }
                            ],
                            "functionReturns": {
                                "type": "Promise<boolean>",
                                "description": "True if the save was successful, false otherwise",
                                "example": "true"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "apiPass",
                            "description": "Password for the API",
                            "codeSnippet": "const apiPass = process.env.API_PASS || ''",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "apiUser",
                            "description": "Username for the API",
                            "codeSnippet": "const apiUser = process.env.API_USER || ''",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "geminiKey",
                            "description": "API key for Gemini",
                            "codeSnippet": "const geminiKey = process.env.GEMINI_KEY || ''",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "apiURL",
                            "description": "URL for the API",
                            "codeSnippet": "const apiURL = process.env.API_URL || ''",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "embedder",
                            "description": "Embeddings function for Gemini",
                            "codeSnippet": "const embedder = new GoogleGenerativeAiEmbeddingFunction({googleApiKey: geminiKey})",
                            "codeLine": 16,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "chromaSettings",
                            "description": "Settings for ChromaDB",
                            "codeSnippet": "const chromaSettings = undefined",
                            "codeLine": 25,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "client",
                            "description": "ChromaDB client",
                            "codeSnippet": "const client = new ChromaClient(chromaSettings);",
                            "codeLine": 27,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "name",
                            "description": "Name of the project",
                            "codeSnippet": "const name = projectName",
                            "codeLine": 39,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "collection",
                            "description": "Collection object",
                            "codeSnippet": "let collection:Collection|void",
                            "codeLine": 40,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "hb",
                            "description": "Heartbeat response",
                            "codeSnippet": "const hb = await client.heartbeat().catch((err:any) => {  \n        console.log('Error connecting to database')  \n        console.error(err)  \n    })",
                            "codeLine": 41,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "err",
                            "description": "Error object",
                            "codeSnippet": "collection = await client.createCollection({name: name, embeddingFunction: embedder}).catch((err:any) => {  \n        console.log('Error creating collection')  \n        console.error(err)  \n    })",
                            "codeLine": 58,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "bOK",
                            "description": "Flag indicating success of save operation",
                            "codeSnippet": "let bOK = true",
                            "codeLine": 66,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "meta",
                            "description": "Metadata object",
                            "codeSnippet": "const meta = ragData.metadata as any",
                            "codeLine": 67,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "collection",
                            "description": "Collection object",
                            "codeSnippet": "const collection = await load_create_collection(projectName)",
                            "codeLine": 69,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "embeddings",
                            "description": "Embeddings for the code",
                            "codeSnippet": "const embeddings = await embedder.generate([code])",
                            "codeLine": 70,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "res",
                            "description": "Result of the add operation",
                            "codeSnippet": "const res = await collection.add({  \n        ids: [`${projectName}-${ragData.metadata.codeChunkId}`],  \n        documents: [  \n            code  \n        ],  \n        embeddings: embeddings[0]  \n    }).catch((err:any) => {  \n        console.error(err)  \n        bOK = false  \n    })",
                            "codeLine": 73,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "err",
                            "description": "Error object",
                            "codeSnippet": "res = await collection.add({  \n        ids: [`${projectName}-${ragData.metadata.codeChunkId}`],  \n        documents: [  \n            code  \n        ],  \n        embeddings: embeddings[0]  \n    }).catch((err:any) => {  \n        console.error(err)  \n        bOK = false  \n    })",
                            "codeLine": 80,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        }
                    ],
                    "types": [],
                    "comments": [
                        {
                            "content": "// Check to see if any of the environment variables are missing",
                            "codeLine": 13,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts"
                        },
                        {
                            "content": "// const chromaSettings = {  \n//     path: apiURL,  \n//       \"auth\": {  \n//           provider: \"basic\", credentials: `${apiUser}:${apiPass}`  \n//           }  \n//     }",
                            "codeLine": 19,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts"
                        },
                        {
                            "content": "// Collection not found, creating collection",
                            "codeLine": 53,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts"
                        },
                        {
                            "content": "// Error creating collection",
                            "codeLine": 57,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts"
                        },
                        {
                            "content": "// Error creating collection",
                            "codeLine": 71,
                            "codeIndent": 2,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts"
                        }
                    ],
                    "imports": [
                        {
                            "name": "ProjectSummary",
                            "description": "Type for project summary objects",
                            "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "RagData",
                            "description": "Type for RAG data objects",
                            "codeSnippet": "import { ProjectSummary, RagData } from \"./objectSchemas\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "dotenv/config",
                            "description": "Module for loading environment variables",
                            "codeSnippet": "import 'dotenv/config'",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "ChromaClient",
                            "description": "ChromaDB client class",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, CloudClient, Collection } from 'chromadb'",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "GoogleGenerativeAiEmbeddingFunction",
                            "description": "Gemini embedding function",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, CloudClient, Collection } from 'chromadb'",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "CloudClient",
                            "description": "ChromaDB cloud client class",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, CloudClient, Collection } from 'chromadb'",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "Collection",
                            "description": "ChromaDB collection class",
                            "codeSnippet": "import { ChromaClient, GoogleGenerativeAiEmbeddingFunction, CloudClient, Collection } from 'chromadb'",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "load_create_collection",
                            "description": "Exports the load_create_collection function",
                            "codeSnippet": "export async function load_create_collection(projectName:string): Promise<Collection|void> {  \n    const name = projectName  \n    let collection:Collection|void  \n    const hb = await client.heartbeat().catch((err:any) => {  \n        console.log('Error connecting to database')  \n        console.error(err)  \n    })  \n    console.log('Heartbeat for Database:')  \n    console.log(hb)  \n    try {  \n        collection = await client.getCollection({name:name, embeddingFunction: embedder})  \n        if (collection instanceof Collection && 'name' in collection) {  \n            return collection  \n        }  \n    } catch (err) {  \n        console.log('Collection not found, creating collection')  \n    }  \n    collection = await client.createCollection({name: name, embeddingFunction: embedder}).catch((err:any) => {  \n        console.log('Error creating collection')  \n        console.error(err)  \n    })  \n    return collection  \n}",
                            "codeLine": 37,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "description": "Exports the saveToVectorDatabase function",
                            "codeSnippet": "export async function saveToVectorDatabase(projectName:string, code: string, ragData:RagData): Promise<boolean> {  \n    let bOK = true  \n    const meta = ragData.metadata as any  \n    delete meta.codeObjects  \n    const collection = await load_create_collection(projectName)  \n    const embeddings = await embedder.generate([code])  \n    console.log(embeddings)  \n    if (!collection) {  \n        console.error('Error creating collection')  \n        return false  \n    }  \n    const res = await collection.add({  \n        ids: [`${projectName}-${ragData.metadata.codeChunkId}`],  \n        documents: [  \n            code  \n        ],  \n        embeddings: embeddings[0]  \n    }).catch((err:any) => {  \n        console.error(err)  \n        bOK = false  \n    })  \n    return bOK  \n}",
                            "codeLine": 65,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "vectorDB.ts",
                    "fileLocation": "src/vectorDB.ts"
                },
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "saveToVectorDB",
                            "description": "Saves data to a Vector Database.",
                            "codeSnippet": "export async function saveToVectorDB(projectName:string, documentData:string, metadata:any): Promise<boolean> {\n    const collection = await load_create_collection(projectName)\n    if (!collection) {\n        console.error('Error creating collection')\n        return false\n    }\n    const embeddings = await embedder.generate([documentData])\n    const res = await collection.upsert({\n        documents: [documentData],\n        embeddings: embeddings,\n        metadatas: [meta]\n    })\n\n    console.log('Saved to Vector Database:')\n    console.log(res)\n    \n    return true\n}",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project.",
                                    "example": "myProject"
                                },
                                {
                                    "name": "documentData",
                                    "type": "string",
                                    "description": "Data to be saved to the database.",
                                    "example": "This is the data to be saved."
                                },
                                {
                                    "name": "metadata",
                                    "type": "any",
                                    "description": "Metadata associated with the data.",
                                    "example": {
                                        "key": "value"
                                    }
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "True if data was saved successfully, false otherwise.",
                                "example": true
                            }
                        },
                        {
                            "name": "searchRAG",
                            "description": "Searches a Vector Database using a RAG approach.",
                            "codeSnippet": "export async function searchRAG(projectName:string, searchString: string): Promise<RagData> {\n\n    const collection = await load_create_collection(projectName)\n    if (!collection) {\n        console.error('Error creating collection')\n        return {} as RagData\n    }\n    const searchEmbeddings = await embedder.generate([searchString])\n    const searchResults = await collection.query({queryEmbeddings: searchEmbeddings})\n\n    console.log('Search Results for RAG:')\n    console.log(searchResults)\n\n    const ragData = {\n        metadata: searchResults.metadatas[0] as any || {},\n        embeddings : searchResults.embeddings?[0] as any : {},\n        documentData: searchResults.documents[0] as any || []\n    }\n\n    console.log('RAG Data:')\n    console.log(ragData)\n\n    return ragData\n}",
                            "codeLine": 18,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project.",
                                    "example": "myProject"
                                },
                                {
                                    "name": "searchString",
                                    "type": "string",
                                    "description": "String to search for.",
                                    "example": "This is the search string."
                                }
                            ],
                            "functionReturns": {
                                "type": "RagData",
                                "description": "Data retrieved from the database.",
                                "example": {
                                    "metadata": {
                                        "key": "value"
                                    },
                                    "embeddings": [
                                        1,
                                        2,
                                        3
                                    ],
                                    "documentData": "This is the data."
                                }
                            }
                        },
                        {
                            "name": "load_create_collection",
                            "description": "Loads an existing collection or creates a new one.",
                            "codeSnippet": "async function load_create_collection(projectName:string) {\n    try {\n        const collection = await db.collection(projectName)\n        return collection\n    } catch (error) {\n        try {\n            const collection = await db.createCollection(projectName)\n            return collection\n        } catch (error) {\n            console.error('Error creating collection', error)\n            return null\n        }\n    }\n}",
                            "codeLine": 39,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project.",
                                    "example": "myProject"
                                }
                            ],
                            "functionReturns": {
                                "type": "Collection",
                                "description": "Collection object.",
                                "example": {}
                            }
                        }
                    ],
                    "variables": [],
                    "types": [],
                    "comments": [],
                    "imports": [
                        {
                            "name": "db",
                            "description": "Database object.",
                            "codeSnippet": "import { db } from '../config/database';\nimport { embedder } from '../config/embeddings';\nimport { RagData } from '../types';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "embedder",
                            "description": "Embedding object.",
                            "codeSnippet": "import { db } from '../config/database';\nimport { embedder } from '../config/embeddings';\nimport { RagData } from '../types';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "RagData",
                            "description": "RAG Data type.",
                            "codeSnippet": "import { db } from '../config/database';\nimport { embedder } from '../config/embeddings';\nimport { RagData } from '../types';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "saveToVectorDB",
                            "description": "Saves data to a Vector Database.",
                            "codeSnippet": "export async function saveToVectorDB(projectName:string, documentData:string, metadata:any): Promise<boolean> {\n    const collection = await load_create_collection(projectName)\n    if (!collection) {\n        console.error('Error creating collection')\n        return false\n    }\n    const embeddings = await embedder.generate([documentData])\n    const res = await collection.upsert({\n        documents: [documentData],\n        embeddings: embeddings,\n        metadatas: [meta]\n    })\n\n    console.log('Saved to Vector Database:')\n    console.log(res)\n    \n    return true\n}",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        },
                        {
                            "name": "searchRAG",
                            "description": "Searches a Vector Database using a RAG approach.",
                            "codeSnippet": "export async function searchRAG(projectName:string, searchString: string): Promise<RagData> {\n\n    const collection = await load_create_collection(projectName)\n    if (!collection) {\n        console.error('Error creating collection')\n        return {} as RagData\n    }\n    const searchEmbeddings = await embedder.generate([searchString])\n    const searchResults = await collection.query({queryEmbeddings: searchEmbeddings})\n\n    console.log('Search Results for RAG:')\n    console.log(searchResults)\n\n    const ragData = {\n        metadata: searchResults.metadatas[0] as any || {},\n        embeddings : searchResults.embeddings?[0] as any : {},\n        documentData: searchResults.documents[0] as any || []\n    }\n\n    console.log('RAG Data:')\n    console.log(ragData)\n\n    return ragData\n}",
                            "codeLine": 18,
                            "codeIndent": 0,
                            "fileName": "src/vectorDB.ts",
                            "fileLocation": "/path/to/src/vectorDB.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "vectorDB.ts",
                    "fileLocation": "src/vectorDB.ts"
                }
            ]
        },
        {
            "fileName": "src/shared.ts",
            "fileLocation": ".//src/shared.ts",
            "codeSummary": {
                "summary": "The code snippet provided is incomplete and lacks context. It only shows a comment 'Summaries of Code Chunks:' without any actual code. Therefore, it's impossible to provide a summary or analyze any features or functions. Please provide the full code block for a proper analysis."
            },
            "language": "language: TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getFileContentLen",
                            "description": "Reads a file and returns the length of its content.",
                            "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> {\n    return await readFile(filePath, 'utf-8').then(content => content.length);\n}",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/shared.ts",
                            "fileLocation": null,
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path to the file to read.",
                                    "example": "/path/to/file.txt"
                                }
                            ],
                            "functionReturns": {
                                "type": "number",
                                "description": "The length of the file's content.",
                                "example": 100
                            }
                        }
                    ],
                    "variables": [],
                    "types": [],
                    "comments": [],
                    "imports": [
                        {
                            "name": "readFile",
                            "description": "Reads a file asynchronously.",
                            "codeSnippet": "import { readFile } from 'fs/promises';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/shared.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "getFileContentLen",
                            "description": "Exports the getFileContentLen function.",
                            "codeSnippet": "export async function getFileContentLen(filePath: string): Promise<number> {\n    return await readFile(filePath, 'utf-8').then(content => content.length);\n}",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/shared.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "fileName": "shared.ts",
                    "fileLocation": "src/shared.ts"
                }
            ]
        },
        {
            "fileName": "src/prompt.ts",
            "fileLocation": ".//src/prompt.ts",
            "codeSummary": {
                "summary": "The code block you provided is incomplete. It only contains a string 'Summaries of Code Chunks:' and no actual code. Please provide the code you would like me to summarize."
            },
            "language": "language: TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "codeSummary",
                            "description": "A string template defining the summary of code",
                            "codeSnippet": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\n\n1. The app... etc\n`",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "/path/to/src/prompt.ts",
                            "subObjects": [],
                            "functionParameters": [],
                            "functionReturns": {
                                "type": "string",
                                "description": "A string representing the code summary template",
                                "example": "``"
                            }
                        },
                        {
                            "name": "promptTemplate",
                            "description": "A string template defining the prompt for code analysis",
                            "codeSnippet": "export const promptTemplate = `\nYou will be asked to provide a JSON object that contains the identified code objects in the code snippet attached at the bottom of this request.\n\n--\nHere is some context about the project and team that this code is related to:\n<supplemental context>\n\n-- \nHere is some relevant Code Previously Parsed:\n<relevant code>\n\n--\nIn the following code snippet, please identify all of the following:\n- Classes\n- Functions\n- Variables\n- Types\n- Comments\n- Imports\n- Exports\n\nPlease respond with a JSON object containing the identified code objects, their descriptions. ONLY respond with this JSON object, nothing else. For example:\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ],\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"comments\": [\n        {\n            \"content\": \"This is a comment\",\n            \"codeLine\": 50,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\"\n        }\n    ],\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ]    \n}`",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "/path/to/src/prompt.ts",
                            "subObjects": [],
                            "functionParameters": [],
                            "functionReturns": {
                                "type": "string",
                                "description": "A string representing the code analysis prompt template",
                                "example": "``"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "codeSummary",
                            "description": "A string template defining the summary of code",
                            "codeSnippet": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\n\n1. The app... etc\n`",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "/path/to/src/prompt.ts",
                            "subObjects": []
                        },
                        {
                            "name": "promptTemplate",
                            "description": "A string template defining the prompt for code analysis",
                            "codeSnippet": "export const promptTemplate = `\nYou will be asked to provide a JSON object that contains the identified code objects in the code snippet attached at the bottom of this request.\n\n--\nHere is some context about the project and team that this code is related to:\n<supplemental context>\n\n-- \nHere is some relevant Code Previously Parsed:\n<relevant code>\n\n--\nIn the following code snippet, please identify all of the following:\n- Classes\n- Functions\n- Variables\n- Types\n- Comments\n- Imports\n- Exports\n\nPlease respond with a JSON object containing the identified code objects, their descriptions. ONLY respond with this JSON object, nothing else. For example:\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ],\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"comments\": [\n        {\n            \"content\": \"This is a comment\",\n            \"codeLine\": 50,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\"\n        }\n    ],\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ]    \n}`",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "/path/to/src/prompt.ts",
                            "subObjects": []
                        }
                    ],
                    "types": [],
                    "comments": [],
                    "imports": [],
                    "exports": [
                        {
                            "name": "codeSummary",
                            "description": "A string template defining the summary of code",
                            "codeSnippet": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\n\n1. The app... etc\n`",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "/path/to/src/prompt.ts",
                            "subObjects": []
                        },
                        {
                            "name": "promptTemplate",
                            "description": "A string template defining the prompt for code analysis",
                            "codeSnippet": "export const promptTemplate = `\nYou will be asked to provide a JSON object that contains the identified code objects in the code snippet attached at the bottom of this request.\n\n--\nHere is some context about the project and team that this code is related to:\n<supplemental context>\n\n-- \nHere is some relevant Code Previously Parsed:\n<relevant code>\n\n--\nIn the following code snippet, please identify all of the following:\n- Classes\n- Functions\n- Variables\n- Types\n- Comments\n- Imports\n- Exports\n\nPlease respond with a JSON object containing the identified code objects, their descriptions. ONLY respond with this JSON object, nothing else. For example:\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ],\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"comments\": [\n        {\n            \"content\": \"This is a comment\",\n            \"codeLine\": 50,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\"\n        }\n    ],\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ]    \n}`",
                            "codeLine": 10,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "/path/to/src/prompt.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "prompt.ts",
                    "fileLocation": "src/prompt.ts"
                },
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "getLanguageTypeFromFile",
                            "description": "Returns a prompt asking for the programming language based on the file name and path.",
                            "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}`\n}",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "src/prompt.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The file path to determine the language from.",
                                    "example": "/path/to/file.js"
                                }
                            ],
                            "functionReturns": {
                                "type": "string",
                                "description": "A string prompt asking for the programming language.",
                                "example": "Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    /path/to/file.js"
                            }
                        }
                    ],
                    "variables": [],
                    "types": [],
                    "comments": [],
                    "imports": [],
                    "exports": [
                        {
                            "name": "getLanguageTypeFromFile",
                            "description": "Function to return a prompt asking for the programming language based on the file name and path.",
                            "codeSnippet": "export const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}`\n}",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/prompt.ts",
                            "fileLocation": "src/prompt.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "prompt.ts",
                    "fileLocation": "src/prompt.ts"
                }
            ]
        },
        {
            "fileName": "src/objectSchemas.ts",
            "fileLocation": ".//src/objectSchemas.ts",
            "codeSummary": {
                "summary": "The code block is a JSON object with a single key-value pair. The key is 'Summaries of Code Chunks' and the value is an empty string.  This suggests that the code is intended to hold summaries of code chunks, but it is currently empty. It does not contain any functional code or features. ",
                "goal": "To store summaries of code chunks.",
                "features": [],
                "functions": []
            },
            "language": "language:TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [],
                    "variables": [],
                    "types": [
                        {
                            "name": "CodeObjectType",
                            "description": null,
                            "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "ProjectSummary",
                            "description": null,
                            "codeSnippet": "export interface ProjectSummary {\n    projectName: string;\n    projectDescription: string;\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "RagData",
                            "description": null,
                            "codeSnippet": "export interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "CodeFileSummary",
                            "description": null,
                            "codeSnippet": "export interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: string;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject[];\n}",
                            "codeLine": 23,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "ExecutionFlow",
                            "description": null,
                            "codeSnippet": "export interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}",
                            "codeLine": 30,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "FunctionParameter",
                            "description": null,
                            "codeSnippet": "export interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}",
                            "codeLine": 39,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "FunctionReturn",
                            "description": null,
                            "codeSnippet": "export interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}",
                            "codeLine": 45,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "CodeObject",
                            "description": null,
                            "codeSnippet": "export interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    objectDescription: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n    subObjects: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}",
                            "codeLine": 49,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "comments": [
                        {
                            "content": "Example: Embeddings could be an array of numbers",
                            "codeLine": 18,
                            "codeIndent": 4,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null
                        }
                    ],
                    "imports": [],
                    "exports": [
                        {
                            "name": "CodeObjectType",
                            "description": null,
                            "codeSnippet": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "ProjectSummary",
                            "description": null,
                            "codeSnippet": "export interface ProjectSummary {\n    projectName: string;\n    projectDescription: string;\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "RagData",
                            "description": null,
                            "codeSnippet": "export interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}",
                            "codeLine": 11,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "CodeFileSummary",
                            "description": null,
                            "codeSnippet": "export interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: string;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject[];\n}",
                            "codeLine": 23,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "ExecutionFlow",
                            "description": null,
                            "codeSnippet": "export interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}",
                            "codeLine": 30,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "FunctionParameter",
                            "description": null,
                            "codeSnippet": "export interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}",
                            "codeLine": 39,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "FunctionReturn",
                            "description": null,
                            "codeSnippet": "export interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}",
                            "codeLine": 45,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "CodeObject",
                            "description": null,
                            "codeSnippet": "export interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    objectDescription: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n    subObjects: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}",
                            "codeLine": 49,
                            "codeIndent": 0,
                            "fileName": "src/objectSchemas.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "fileName": "objectSchemas.ts",
                    "fileLocation": "src/objectSchemas.ts"
                }
            ]
        },
        {
            "fileName": "src/llmInterface.ts",
            "fileLocation": ".//src/llmInterface.ts",
            "codeSummary": {
                "summary": "The code snippet provided is incomplete. It only contains a string that appears to be a placeholder for code summaries. To provide a summary, please provide the actual code block you wish to analyze.",
                "goal": "N/A (due to incomplete code)",
                "features": "N/A (due to incomplete code)",
                "functions": "N/A (due to incomplete code)"
            },
            "language": "language: TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "validateJSON",
                            "description": "Validates if a given string is a valid JSON object.",
                            "codeSnippet": "function validateJSON(jsonString: string): boolean {  try {    JSON.parse(jsonString);    return true;  } catch (e) {    return false;  } }",
                            "codeLine": 19,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The string to be validated as JSON.",
                                    "example": "\"{\"key\":\"value\"}\""
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "Returns true if the string is valid JSON, false otherwise.",
                                "example": "true"
                            }
                        },
                        {
                            "name": "fixJSON",
                            "description": "Attempts to fix a malformed JSON string.",
                            "codeSnippet": "function fixJSON(jsonString: string): string {  try {    return jsonrepair(jsonString);  } catch (e) {    throw new Error('Unable to fix JSON');  } }",
                            "codeLine": 25,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The malformed JSON string.",
                                    "example": "\"{\"key\":value}\""
                                }
                            ],
                            "functionReturns": {
                                "type": "string",
                                "description": "The fixed JSON string, if successful.",
                                "example": "\"{\"key\":\"value\"}\""
                            }
                        },
                        {
                            "name": "parseYaml",
                            "description": "Parses a YAML string into a JSON object.",
                            "codeSnippet": "export function parseYaml(yamlString: string): any {  // Convert YAML file into a proper JSON object  try {    const obj = yaml.load(yamlString) as any;    return obj as any;  } catch (e: any) {    console.log(e);    throw new Error(\"Invalid YAML object\");  } }",
                            "codeLine": 50,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "yamlString",
                                    "type": "string",
                                    "description": "The YAML string to be parsed.",
                                    "example": "key: value"
                                }
                            ],
                            "functionReturns": {
                                "type": "any",
                                "description": "The parsed JSON object.",
                                "example": "{ \"key\": \"value\" }"
                            }
                        },
                        {
                            "name": "parseText",
                            "description": "Converts a text string into a JSON object with a specified key.",
                            "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any {  // Convert text into a proper JSON object  const obj =  {} as any;  obj[resKey] = text;  return obj; }",
                            "codeLine": 57,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "text",
                                    "type": "string",
                                    "description": "The text string to be converted.",
                                    "example": "This is some text."
                                },
                                {
                                    "name": "resKey",
                                    "type": "string",
                                    "description": "The key to use in the JSON object.",
                                    "example": "response"
                                }
                            ],
                            "functionReturns": {
                                "type": "any",
                                "description": "The JSON object containing the text under the specified key.",
                                "example": "{ \"response\": \"This is some text.\" }"
                            }
                        },
                        {
                            "name": "wait",
                            "description": "Pauses execution for a specified duration.",
                            "codeSnippet": "async function wait (ms: number) {  return new Promise(resolve => setTimeout(resolve, ms)); }",
                            "codeLine": 63,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "ms",
                                    "type": "number",
                                    "description": "The duration in milliseconds to pause for.",
                                    "example": "1000"
                                }
                            ],
                            "functionReturns": {
                                "type": "Promise<void>",
                                "description": "A promise that resolves after the specified duration.",
                                "example": null
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "project",
                            "description": "Google Cloud Project ID.",
                            "codeSnippet": "const project = \"sweet-papa-technologies\";",
                            "codeLine": 13,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "location",
                            "description": "Google Cloud Region.",
                            "codeSnippet": "const location = \"us-central1\";",
                            "codeLine": 14,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "textModel",
                            "description": "The name of the Gemini text model.",
                            "codeSnippet": "const textModel = \"gemini-1.5-flash-preview-0514\";",
                            "codeLine": 15,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "visionModel",
                            "description": "The name of the Gemini vision model.",
                            "codeSnippet": "const visionModel = \"gemini-1.5-pro\";",
                            "codeLine": 16,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "vertexAI",
                            "description": "VertexAI client instance.",
                            "codeSnippet": "const vertexAI = new VertexAI({ project: project, location: location });",
                            "codeLine": 18,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "generativeModel",
                            "description": "Generative text model instance.",
                            "codeSnippet": "const generativeModel = vertexAI.getGenerativeModel({  model: textModel,  // The following parameters are optional  // They can also be passed to individual content generation requests  safetySettings: [    {      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,    },  ],  generationConfig: {    // maxOutputTokens: 256  },});",
                            "codeLine": 31,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "generativeVisionModel",
                            "description": "Generative vision model instance.",
                            "codeSnippet": "const generativeVisionModel = vertexAI.getGenerativeModel({  model: visionModel,});",
                            "codeLine": 42,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "generativeModelPreview",
                            "description": "Generative text model instance (preview).",
                            "codeSnippet": "const generativeModelPreview = vertexAI.getGenerativeModel({  model: textModel,});",
                            "codeLine": 46,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "types": [],
                    "comments": [
                        {
                            "content": "Adjust path as needed",
                            "codeLine": 2,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null
                        },
                        {
                            "content": "The following parameters are optional\nThey can also be passed to individual content generation requests",
                            "codeLine": 33,
                            "codeIndent": 4,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null
                        },
                        {
                            "content": "Convert YAML file into a proper JSON object",
                            "codeLine": 51,
                            "codeIndent": 4,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null
                        },
                        {
                            "content": "Convert text into a proper JSON object",
                            "codeLine": 58,
                            "codeIndent": 4,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null
                        }
                    ],
                    "imports": [
                        {
                            "name": "CodeObject",
                            "description": "Import from objectSchemas module.",
                            "codeSnippet": "import { CodeObject, ProjectSummary } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "ProjectSummary",
                            "description": "Import from objectSchemas module.",
                            "codeSnippet": "import { CodeObject, ProjectSummary } from \"./objectSchemas\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "searchRAG",
                            "description": "Import from vectorDB module.",
                            "codeSnippet": "import { searchRAG } from \"./vectorDB\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "yaml",
                            "description": "Import yaml module.",
                            "codeSnippet": "import yaml from \"js-yaml\";",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "jsonrepair",
                            "description": "Import jsonrepair module.",
                            "codeSnippet": "import { jsonrepair } from 'jsonrepair';",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "dotenv/config",
                            "description": "Import dotenv/config module.",
                            "codeSnippet": "import \"dotenv/config\";",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "FunctionDeclarationSchemaType",
                            "description": "Import from @google-cloud/vertexai module.",
                            "codeSnippet": "import {  FunctionDeclarationSchemaType,  HarmBlockThreshold,  HarmCategory,  VertexAI,} from \"@google-cloud/vertexai\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "HarmBlockThreshold",
                            "description": "Import from @google-cloud/vertexai module.",
                            "codeSnippet": "import {  FunctionDeclarationSchemaType,  HarmBlockThreshold,  HarmCategory,  VertexAI,} from \"@google-cloud/vertexai\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "HarmCategory",
                            "description": "Import from @google-cloud/vertexai module.",
                            "codeSnippet": "import {  FunctionDeclarationSchemaType,  HarmBlockThreshold,  HarmCategory,  VertexAI,} from \"@google-cloud/vertexai\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "VertexAI",
                            "description": "Import from @google-cloud/vertexai module.",
                            "codeSnippet": "import {  FunctionDeclarationSchemaType,  HarmBlockThreshold,  HarmCategory,  VertexAI,} from \"@google-cloud/vertexai\";",
                            "codeLine": 9,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "parseYaml",
                            "description": "Export the parseYaml function.",
                            "codeSnippet": "export function parseYaml(yamlString: string): any {  // Convert YAML file into a proper JSON object  try {    const obj = yaml.load(yamlString) as any;    return obj as any;  } catch (e: any) {    console.log(e);    throw new Error(\"Invalid YAML object\");  } }",
                            "codeLine": 50,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        },
                        {
                            "name": "parseText",
                            "description": "Export the parseText function.",
                            "codeSnippet": "export function parseText(text: string, resKey = \"response\"): any {  // Convert text into a proper JSON object  const obj =  {} as any;  obj[resKey] = text;  return obj; }",
                            "codeLine": 57,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": null,
                            "subObjects": []
                        }
                    ],
                    "fileName": "llmInterface.ts",
                    "fileLocation": "src/llmInterface.ts"
                },
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "callGemini",
                            "description": "Calls the Gemini model with the provided prompt, response mode and optional response key.",
                            "codeSnippet": "export async function callGemini(\n  prompt: string,\n  responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",\n  responseKey?: string\n): Promise<any> {",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "prompt",
                                    "type": "string",
                                    "description": "The prompt to send to Gemini.",
                                    "example": "What is the meaning of life?"
                                },
                                {
                                    "name": "responseMode",
                                    "type": "\"JSON object\" | \"YAML object\" | \"TEXT STRING\"",
                                    "description": "The desired format of the response.",
                                    "example": "\"JSON object\""
                                },
                                {
                                    "name": "responseKey",
                                    "type": "string",
                                    "description": "The key to use for the response in the TEXT STRING format.",
                                    "example": "answer"
                                }
                            ],
                            "functionReturns": {
                                "type": "any",
                                "description": "The response from Gemini, in the specified format.",
                                "example": "{}"
                            }
                        },
                        {
                            "name": "validateJSON",
                            "description": "Validates if the given string is a valid JSON string.",
                            "codeSnippet": "function validateJSON(jsonString: string): boolean {",
                            "codeLine": 69,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The JSON string to validate.",
                                    "example": "{'key': 'value'}"
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "True if the string is valid JSON, false otherwise.",
                                "example": "true"
                            }
                        },
                        {
                            "name": "fixJSON",
                            "description": "Fixes the given string to make it a valid JSON string by attempting to replace invalid characters and format the string.",
                            "codeSnippet": "function fixJSON(jsonString: string): string {",
                            "codeLine": 74,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "jsonString",
                                    "type": "string",
                                    "description": "The JSON string to fix.",
                                    "example": "{'key': 'value'}"
                                }
                            ],
                            "functionReturns": {
                                "type": "string",
                                "description": "The fixed JSON string.",
                                "example": "{'key': 'value'}"
                            }
                        },
                        {
                            "name": "wait",
                            "description": "Waits for the specified duration in milliseconds.",
                            "codeSnippet": "const wait = (ms: number) => new Promise(res => setTimeout(res, ms));",
                            "codeLine": 101,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "ms",
                                    "type": "number",
                                    "description": "The duration to wait in milliseconds.",
                                    "example": "1000"
                                }
                            ],
                            "functionReturns": {
                                "type": "Promise<void>",
                                "description": "A promise that resolves after the specified duration.",
                                "example": "undefined"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "promptResponseInstructions",
                            "description": "Instructions for the Gemini model on how to format the response.",
                            "codeSnippet": "const promptResponseInstructions = `Please respond with a ${responseMode} containing your answer. ${",
                            "codeLine": 4,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "promptLen",
                            "description": "Length of the prompt.",
                            "codeSnippet": "const promptLen = prompt.length",
                            "codeLine": 17,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "request",
                            "description": "Request object to send to Gemini.",
                            "codeSnippet": "const request = {",
                            "codeLine": 20,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "startTime",
                            "description": "Start time of the Gemini call.",
                            "codeSnippet": "const startTime = Date.now();",
                            "codeLine": 26,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "result",
                            "description": "Result of the Gemini call.",
                            "codeSnippet": "const result = await generativeModel.generateContent(request);",
                            "codeLine": 27,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "endTime",
                            "description": "End time of the Gemini call.",
                            "codeSnippet": "const endTime = Date.now();",
                            "codeLine": 28,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "totalTime",
                            "description": "Total time taken for the Gemini call.",
                            "codeSnippet": "const totalTime = endTime - startTime;",
                            "codeLine": 29,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "response",
                            "description": "Response from Gemini.",
                            "codeSnippet": "let response = result.response.candidates?.[0].content?.parts[0].text || \"\";",
                            "codeLine": 38,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "res",
                            "description": "Parsed JSON response from Gemini.",
                            "codeSnippet": "const res = JSON.parse(response);",
                            "codeLine": 61,
                            "codeIndent": 4,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        },
                        {
                            "name": "wait",
                            "description": "A function to wait for a specified duration.",
                            "codeSnippet": "const wait = (ms: number) => new Promise(res => setTimeout(res, ms));",
                            "codeLine": 101,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        }
                    ],
                    "types": [],
                    "comments": [
                        {
                            "content": "Please respond with a ${responseMode} containing your answer. ${",
                            "codeLine": 4,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "responseKey is only applicable for TEXT STRING responseMode. Ignoring responseKey.",
                            "codeLine": 10,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "Wait 20 seconds before calling Gemini",
                            "codeLine": 25,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "PRint the total time in seconds, truncated to 2 decimal places",
                            "codeLine": 31,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "Waiting 15 seconds...becuase DEY DONT TRUST US YET.",
                            "codeLine": 35,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "Validates if the given string is a valid JSON string.",
                            "codeLine": 69,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "Fixes the given string to make it a valid JSON string by attempting to replace invalid characters and format the string.",
                            "codeLine": 74,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        },
                        {
                            "content": "Waits for the specified duration in milliseconds.",
                            "codeLine": 101,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts"
                        }
                    ],
                    "imports": [
                        {
                            "name": "generativeModel",
                            "description": "Generative model object from an external module.",
                            "codeSnippet": "const result = await generativeModel.generateContent(request);",
                            "codeLine": 27,
                            "codeIndent": 2,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "callGemini",
                            "description": "Exports the callGemini function.",
                            "codeSnippet": "export async function callGemini(\n  prompt: string,\n  responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",\n  responseKey?: string\n): Promise<any> {",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/llmInterface.ts",
                            "fileLocation": "/path/to/src/llmInterface.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "llmInterface.ts",
                    "fileLocation": "src/llmInterface.ts"
                },
                {
                    "error": {},
                    "original": "{\n  \"classes\": [],\n  \"functions\": [\n    {\n      \"name\": \"parseResponse\",\n      \"description\": \"Parses the response from the LLM based on the responseMode.\",\n      \"codeSnippet\": \"function parseResponse(response: string, responseMode: string, responseKey: string = 'output') {\",\n      \"codeLine\": 2,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": [],\n      \"functionParameters\": [\n        {\n          \"name\": \"response\",\n          \"type\": \"string\",\n          \"description\": \"The response from the LLM.\",\n          \"example\": \"\\\"{\\\"output\\\": \\\"Some JSON data\\\"}\\\"\"\n        },\n        {\n          \"name\": \"responseMode\",\n          \"type\": \"string\",\n          \"description\": \"The mode in which the response is expected. Can be 'JSON object', 'YAML object', or 'text'.\",\n          \"example\": \"'JSON object'\"\n        },\n        {\n          \"name\": \"responseKey\",\n          \"type\": \"string\",\n          \"description\": \"The key to access the relevant data in the JSON response.\",\n          \"example\": \"'output'\"\n        }\n      ],\n      \"functionReturns\": {\n        \"type\": \"any\",\n        \"description\": \"The parsed response data.\",\n        \"example\": \"{}\"\n      }\n    },\n    {\n      \"name\": \"getCodeSummaryFromLLM\",\n      \"description\": \"Summarizes the given code using the LLM.\",\n      \"codeSnippet\": \"export async function getCodeSummaryFromLLM(\",\n      \"codeLine\": 14,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": [],\n      \"functionParameters\": [\n        {\n          \"name\": \"codeToSummarize\",\n          \"type\": \"string\",\n          \"description\": \"The code to summarize.\",\n          \"example\": \"\\\"console.log('Hello, world!');\\\"\"\n        }\n      ],\n      \"functionReturns\": {\n        \"type\": \"Promise<string>\",\n        \"description\": \"A promise that resolves to the code summary generated by the LLM.\",\n        \"example\": \"\\\"This code prints 'Hello, world!' to the console.\\\"\"\n      }\n    },\n    {\n      \"name\": \"callLLM\",\n      \"description\": \"Calls the LLM with the provided prompt, project context, code, and file path.\",\n      \"codeSnippet\": \"export async function callLLM(\",\n      \"codeLine\": 22,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": [],\n      \"functionParameters\": [\n        {\n          \"name\": \"promptTemplate\",\n          \"type\": \"string\",\n          \"description\": \"The prompt template to use.\",\n          \"example\": \"\\\"Please analyze the code snippet below: <code snippet>\\\"\"\n        },\n        {\n          \"name\": \"projectContext\",\n          \"type\": \"ProjectSummary\",\n          \"description\": \"The summary of the project.\",\n          \"example\": \"{ projectName: \\\"My Project\\\", teamContext: \\\"This project is about ...\\\" }\"\n        },\n        {\n          \"name\": \"code\",\n          \"type\": \"string\",\n          \"description\": \"The code snippet to analyze.\",\n          \"example\": \"\\\"const myVar = 10;\\\"\"\n        },\n        {\n          \"name\": \"filePath\",\n          \"type\": \"string\",\n          \"description\": \"The path to the file containing the code.\",\n          \"example\": \"\\\"src/myFile.js\\\"\"\n        },\n        {\n          \"name\": \"bRAG\",\n          \"type\": \"boolean\",\n          \"description\": \"Whether to use RAG (Retrieval Augmented Generation) for the prompt.\",\n          \"example\": \"false\"\n        }\n      ],\n      \"functionReturns\": {\n        \"type\": \"Promise<CodeObject>\",\n        \"description\": \"A promise that resolves to the CodeObject returned by the LLM.\",\n        \"example\": \"{ fileName: \\\"myFile.js\\\", fileLocation: \\\"src/myFile.js\\\", ... }\"\n      }\n    },\n    {\n      \"name\": \"getFileNameFromPath\",\n      \"description\": \"Extracts the file name from a given path.\",\n      \"codeSnippet\": \"const getFileNameFromPath = (path: string) => path.split('/').pop() || '';\",\n      \"codeLine\": 49,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": [],\n      \"functionParameters\": [\n        {\n          \"name\": \"path\",\n          \"type\": \"string\",\n          \"description\": \"The path to the file.\",\n          \"example\": \"\\\"src/myFile.js\\\"\"\n        }\n      ],\n      \"functionReturns\": {\n        \"type\": \"string\",\n        \"description\": \"The file name extracted from the path.\",\n        \"example\": \"\\\"myFile.js\\\"\"\n      }\n    }\n  ],\n  \"variables\": [\n    {\n      \"name\": \"e\",\n      \"description\": \"Error object caught in the catch block.\",\n      \"codeSnippet\": \"} catch (e:any) {\",\n      \"codeLine\": 4,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"response\",\n      \"description\": \"The response from the LLM.\",\n      \"codeSnippet\": \"let response: string = await callGemini(prompt, 'JSON object');\",\n      \"codeLine\": 40,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"codeObjects\",\n      \"description\": \"The CodeObject returned by the LLM.\",\n      \"codeSnippet\": \"let codeObjects: CodeObject = response;\",\n      \"codeLine\": 42,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"question\",\n      \"description\": \"The question to ask the LLM.\",\n      \"codeSnippet\": \"const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \\n\\n\\`\\`\\`json\\n${codeToSummarize}\\n\\`\\`\\``;\",\n      \"codeLine\": 16,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"codeSummary\",\n      \"description\": \"The code summary generated by the LLM.\",\n      \"codeSnippet\": \"const codeSummary = await callGemini(question, 'JSON object');\",\n      \"codeLine\": 17,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"relevantCode\",\n      \"description\": \"The relevant code retrieved from RAG.\",\n      \"codeSnippet\": \"const relevantCode = await searchRAG(projectContext.projectName, code);\",\n      \"codeLine\": 26,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"r\",\n      \"description\": \"The relevant code truncated to 400 characters.\",\n      \"codeSnippet\": \"const r =\\n      relevantCode.documentData.length > 400\",\n      \"codeLine\": 27,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"prompt\",\n      \"description\": \"The final prompt constructed for the LLM.\",\n      \"codeSnippet\": \"const prompt = promptTemplate\",\n      \"codeLine\": 36,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"res\",\n      \"description\": \"The parsed YAML response.\",\n      \"codeSnippet\": \"const res = parseYaml(response);\",\n      \"codeLine\": 11,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"CodeObject\",\n      \"description\": \"The type of the object returned by the LLM for code analysis.\",\n      \"codeSnippet\": \"let codeObjects: CodeObject = response;\",\n      \"codeLine\": 42,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"ProjectSummary\",\n      \"description\": \"The type of the object representing the project summary.\",\n      \"codeSnippet\": \"projectContext: ProjectSummary,\",\n      \"codeLine\": 23,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    }\n  ],\n  \"comments\": [],\n  \"imports\": [\n    {\n      \"name\": \"parseYaml\",\n      \"description\": \"Imports the parseYaml function.\",\n      \"codeSnippet\": \"import { parseYaml } from '../utils/yaml-parser';\",\n      \"codeLine\": 1,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"parseText\",\n      \"description\": \"Imports the parseText function.\",\n      \"codeSnippet\": \"import { parseText } from './textParser';\",\n      \"codeLine\": 1,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"callGemini\",\n      \"description\": \"Imports the callGemini function.\",\n      \"codeSnippet\": \"import { callGemini } from './llmWrapper';\",\n      \"codeLine\": 1,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"searchRAG\",\n      \"description\": \"Imports the searchRAG function.\",\n      \"codeSnippet\": \"import { searchRAG } from '../utils/rag';\",\n      \"codeLine\": 1,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    }\n  ],\n  \"exports\": [\n    {\n      \"name\": \"parseResponse\",\n      \"description\": \"Exports the parseResponse function.\",\n      \"codeSnippet\": \"export function parseResponse(response: string, responseMode: string, responseKey: string = 'output') {\",\n      \"codeLine\": 2,\n      \"codeIndent\": 2,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"getCodeSummaryFromLLM\",\n      \"description\": \"Exports the getCodeSummaryFromLLM function.\",\n      \"codeSnippet\": \"export async function getCodeSummaryFromLLM(\",\n      \"codeLine\": 14,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    },\n    {\n      \"name\": \"callLLM\",\n      \"description\": \"Exports the callLLM function.\",\n      \"codeSnippet\": \"export async function callLLM(\",\n      \"codeLine\": 22,\n      \"codeIndent\": 0,\n      \"fileName\": \"src/llmInterface.ts\",\n      \"fileLocation\": \"/path/to/src/llmInterface.ts\",\n      \"subObjects\": []\n    }\n  ]\n}",
                    "fileName": "llmInterface.ts",
                    "fileLocation": "src/llmInterface.ts"
                }
            ]
        },
        {
            "fileName": "src/index.ts",
            "fileLocation": ".//src/index.ts",
            "codeSummary": {
                "summary": "The code block you provided is incomplete. It only contains a string indicating the purpose of the code: 'Summaries of Code Chunks'. To provide a summary, please provide the actual code chunks you want summarized.",
                "goal": "The goal is to provide summaries of code chunks. However, the code itself is missing, so no summary can be generated.",
                "features": [],
                "functions": []
            },
            "language": "language: TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "parseCodebase",
                            "description": "Parses the codebase and returns the parsed data.",
                            "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "Path to the codebase",
                                    "example": "/path/to/project"
                                },
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project",
                                    "example": "MyProject"
                                }
                            ],
                            "functionReturns": {
                                "type": "any",
                                "description": "The parsed codebase data",
                                "example": "{}"
                            }
                        },
                        {
                            "name": "generateDocumentation",
                            "description": "Generates documentation from the parsed codebase data.",
                            "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "parsedCodebase",
                                    "type": "any",
                                    "description": "The parsed codebase data",
                                    "example": "{}"
                                },
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "Name of the project",
                                    "example": "MyProject"
                                },
                                {
                                    "name": "outputDir",
                                    "type": "string",
                                    "description": "Path to the output directory",
                                    "example": "/path/to/output"
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "Whether documentation generation was successful",
                                "example": "true"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "program",
                            "description": "Command object for parsing command line arguments.",
                            "codeSnippet": "const program = new Command();",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "projectName",
                            "description": "Name of the project",
                            "codeSnippet": "action(async (projectName, options) => {",
                            "codeLine": 19,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "options",
                            "description": "Options passed to the command",
                            "codeSnippet": "action(async (projectName, options) => {",
                            "codeLine": 19,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "bTestMode",
                            "description": "Flag for test mode",
                            "codeSnippet": "const bTestMode = options.test;",
                            "codeLine": 23,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "projectPath",
                            "description": "Path to the codebase",
                            "codeSnippet": "const projectPath = options.input;",
                            "codeLine": 24,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "outputDir",
                            "description": "Path to the output directory",
                            "codeSnippet": "const outputDir = options.output;",
                            "codeLine": 25,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "parsedCodebase",
                            "description": "The parsed codebase data",
                            "codeSnippet": "const parsedCodebase = await parseCodebase(projectPath, projectName);",
                            "codeLine": 29,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "bGenerated",
                            "description": "Flag for successful documentation generation",
                            "codeSnippet": "const bGenerated = await generateDocumentation(parsedCodebase, projectName, outputDir);",
                            "codeLine": 33,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "error",
                            "description": "Error object caught during documentation generation",
                            "codeSnippet": "catch (error) {",
                            "codeLine": 41,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        }
                    ],
                    "types": [],
                    "comments": [
                        {
                            "content": "Generate documentation for your codebase using FoFo Docs",
                            "codeLine": 8,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "Path to your codebase (default: current directory)",
                            "codeLine": 12,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "Path to output documentation (default: ./output)",
                            "codeLine": 16,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "Run in Test Mode",
                            "codeLine": 18,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "FoFo Docs is generating documentation for project: ${projectName}",
                            "codeLine": 21,
                            "codeIndent": 2,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "1. Parse Codebase",
                            "codeLine": 27,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "2. Generate Documentation",
                            "codeLine": 31,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "Documentation generation failed!",
                            "codeLine": 37,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        },
                        {
                            "content": "Error during documentation generation:",
                            "codeLine": 42,
                            "codeIndent": 4,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts"
                        }
                    ],
                    "imports": [
                        {
                            "name": "Command",
                            "description": "Command class from the Commander library",
                            "codeSnippet": "import { Command } from \"commander\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "parseCodebase",
                            "description": "Function for parsing the codebase",
                            "codeSnippet": "import { parseCodebase } from \"./codeParser\";",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        },
                        {
                            "name": "generateDocumentation",
                            "description": "Function for generating documentation",
                            "codeSnippet": "import { generateDocumentation } from \"./documentationGenerator\";",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/index.ts",
                            "fileLocation": "/path/to/src/index.ts",
                            "subObjects": []
                        }
                    ],
                    "exports": [],
                    "fileName": "index.ts",
                    "fileLocation": "src/index.ts"
                }
            ]
        },
        {
            "fileName": "src/documentationGenerator.ts",
            "fileLocation": ".//src/documentationGenerator.ts",
            "codeSummary": {
                "summary": "The code snippet provided is a JSON object with a single key-value pair. The key is \"Summaries of Code Chunks\" and the value is an empty string. It appears to be a placeholder for a structure that will later hold summaries of code chunks. This suggests the code is part of a program or script that aims to analyze and summarize code blocks.",
                "goal": "To store summaries of code chunks.",
                "features": [
                    "JSON object",
                    "Key-value pair",
                    "Placeholder for summaries"
                ],
                "functions": []
            },
            "language": "language: TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "generateDocumentation",
                            "description": "Generates documentation for a project",
                            "codeSnippet": "export async function generateDocumentation(projectContext: ProjectSummary, code: string, filePath: string): Promise<boolean> {",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectContext",
                                    "type": "ProjectSummary",
                                    "description": "The project context",
                                    "example": "null"
                                },
                                {
                                    "name": "code",
                                    "type": "string",
                                    "description": "The code to generate documentation for",
                                    "example": "null"
                                },
                                {
                                    "name": "filePath",
                                    "type": "string",
                                    "description": "The path to the directory to save the documentation",
                                    "example": "null"
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "Whether the documentation was successfully generated",
                                "example": "true"
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "backupDirectory",
                            "description": "The path to the backup directory",
                            "codeSnippet": "const backupDirectory = path.join(__dirname, 'backup');",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": []
                        },
                        {
                            "name": "projectContextPath",
                            "description": "The path to the project context file",
                            "codeSnippet": "const projectContextPath = path.join(filePath, 'projectContext.json');",
                            "codeLine": 31,
                            "codeIndent": 2,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": []
                        }
                    ],
                    "types": [],
                    "comments": [],
                    "imports": [
                        {
                            "name": "ProjectSummary",
                            "description": "The ProjectSummary interface",
                            "codeSnippet": "import { ProjectSummary } from \"./objectSchemas\";",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": []
                        },
                        {
                            "name": "fs",
                            "description": "The fs module",
                            "codeSnippet": "import fs from 'fs';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": []
                        },
                        {
                            "name": "path",
                            "description": "The path module",
                            "codeSnippet": "import path from 'path';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "generateDocumentation",
                            "description": "The generateDocumentation function",
                            "codeSnippet": "export async function generateDocumentation(projectContext: ProjectSummary, code: string, filePath: string): Promise<boolean> {",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/documentationGenerator.ts",
                            "fileLocation": "/path/to/src/documentationGenerator.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "documentationGenerator.ts",
                    "fileLocation": "src/documentationGenerator.ts"
                }
            ]
        },
        {
            "fileName": "src/codeParser.ts",
            "fileLocation": ".//src/codeParser.ts",
            "codeSummary": {
                "summary": "The code snippet you provided is incomplete. It appears to be the start of a JSON object intended to contain summaries of code chunks.  To provide a summary, please provide the actual code chunks and their context.  For example, you could include the code itself, its language, and the purpose of the code."
            },
            "language": "language: TypeScript \n",
            "executionFlow": [],
            "codeObjects": [
                {
                    "classes": [],
                    "functions": [
                        {
                            "name": "parseCodebase",
                            "description": "Parses a codebase at the given project path, identifying code objects and creating a project summary.",
                            "codeSnippet": "export async function parseCodebase(\n    projectPath: string,\n    projectName: string,\n   \n): Promise<ProjectSummary> {",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "The path to the project directory.",
                                    "example": "/path/to/project"
                                },
                                {
                                    "name": "projectName",
                                    "type": "string",
                                    "description": "The name of the project.",
                                    "example": "myProject"
                                }
                            ],
                            "functionReturns": {
                                "type": "ProjectSummary",
                                "description": "A ProjectSummary object containing information about the parsed project.",
                                "example": "{ projectName: 'myProject', projectDescription: '', projectLocation: '/path/to/project', codeFiles: [], ragData: [], teamContext: '' }"
                            }
                        },
                        {
                            "name": "getIgnoredFiles",
                            "description": "Retrieves a list of files or patterns to ignore during codebase parsing.",
                            "codeSnippet": "const ignorePatterns = ['node_modules/**', 'dist/**', ...(await getIgnoredFiles(projectPath))];",
                            "codeLine": 17,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "The path to the project directory.",
                                    "example": "/path/to/project"
                                }
                            ],
                            "functionReturns": {
                                "type": "string[]",
                                "description": "An array of file paths or patterns to ignore.",
                                "example": [
                                    "node_modules/**",
                                    "dist/**"
                                ]
                            }
                        },
                        {
                            "name": "isFileTooLarge",
                            "description": "Checks if a given file exceeds the specified size limit.",
                            "codeSnippet": "if (await isFileTooLarge(fullFilePath, 750)) {",
                            "codeLine": 33,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "fullFilePath",
                                    "type": "string",
                                    "description": "The full path to the file.",
                                    "example": "/path/to/file.js"
                                },
                                {
                                    "name": "sizeLimit",
                                    "type": "number",
                                    "description": "The size limit in KB.",
                                    "example": 750
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "True if the file is too large, false otherwise.",
                                "example": true
                            }
                        },
                        {
                            "name": "breakCodeIntoChunks",
                            "description": "Splits code content into chunks of a specified token count.",
                            "codeSnippet": "const codeChunks = breakCodeIntoChunks(fileContent, 300);",
                            "codeLine": 36,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "fileContent",
                                    "type": "string",
                                    "description": "The content of the file.",
                                    "example": "const myVariable = 'hello';"
                                },
                                {
                                    "name": "tokenCount",
                                    "type": "number",
                                    "description": "The desired token count per chunk.",
                                    "example": 300
                                }
                            ],
                            "functionReturns": {
                                "type": "string[]",
                                "description": "An array of code chunks.",
                                "example": [
                                    "const myVariable = 'hello';",
                                    "console.log(myVariable);"
                                ]
                            }
                        },
                        {
                            "name": "getCurrentLineEndLineBasedOnChunk",
                            "description": "Calculates the start and end line numbers based on the current chunk.",
                            "codeSnippet": "const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {",
                            "codeLine": 38,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "chunk",
                                    "type": "string",
                                    "description": "The current chunk of code.",
                                    "example": "const myVariable = 'hello';"
                                }
                            ],
                            "functionReturns": {
                                "type": "{ start: number, end: number }",
                                "description": "An object containing the start and end line numbers.",
                                "example": "{ start: 10, end: 15 }"
                            }
                        },
                        {
                            "name": "getIgnoredFiles",
                            "description": "Retrieves a list of files or patterns to ignore during codebase parsing.",
                            "codeSnippet": "export async function getIgnoredFiles(projectPath: string): Promise<string[]> {",
                            "codeLine": 77,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "projectPath",
                                    "type": "string",
                                    "description": "The path to the project directory.",
                                    "example": "/path/to/project"
                                }
                            ],
                            "functionReturns": {
                                "type": "string[]",
                                "description": "An array of file paths or patterns to ignore.",
                                "example": [
                                    "node_modules/**",
                                    "dist/**"
                                ]
                            }
                        },
                        {
                            "name": "isFileTooLarge",
                            "description": "Checks if a given file exceeds the specified size limit.",
                            "codeSnippet": "export async function isFileTooLarge(fullFilePath: string, sizeLimit: number): Promise<boolean> {",
                            "codeLine": 84,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": [],
                            "functionParameters": [
                                {
                                    "name": "fullFilePath",
                                    "type": "string",
                                    "description": "The full path to the file.",
                                    "example": "/path/to/file.js"
                                },
                                {
                                    "name": "sizeLimit",
                                    "type": "number",
                                    "description": "The size limit in KB.",
                                    "example": 750
                                }
                            ],
                            "functionReturns": {
                                "type": "boolean",
                                "description": "True if the file is too large, false otherwise.",
                                "example": true
                            }
                        }
                    ],
                    "variables": [
                        {
                            "name": "projectSummary",
                            "description": "A ProjectSummary object representing the project being parsed.",
                            "codeSnippet": "const projectSummary: ProjectSummary = {",
                            "codeLine": 10,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "ignorePatterns",
                            "description": "An array of file paths or patterns to ignore during codebase parsing.",
                            "codeSnippet": "const ignorePatterns = ['node_modules/**', 'dist/**', ...(await getIgnoredFiles(projectPath))];",
                            "codeLine": 17,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "filePaths",
                            "description": "An array of file paths found in the project directory.",
                            "codeSnippet": "const filePaths = await glob('**/*.{ts,js,tsx,jsx}', { cwd: projectPath, ignore: ignorePatterns });",
                            "codeLine": 18,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "filePath",
                            "description": "The current file path being processed.",
                            "codeSnippet": "for (const filePath of filePaths) {",
                            "codeLine": 20,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "fullFilePath",
                            "description": "The full path to the current file.",
                            "codeSnippet": "const fullFilePath = `${projectPath}/${filePath}`;",
                            "codeLine": 21,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "fileLanguage",
                            "description": "The language of the current file.",
                            "codeSnippet": "const fileLanguage = await callGemini(getLanguageTypeFromFile(fullFilePath), 'TEXT STRING', 'language')",
                            "codeLine": 22,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "codeFileSummary",
                            "description": "A CodeFileSummary object representing the current file.",
                            "codeSnippet": "const codeFileSummary: CodeFileSummary = {",
                            "codeLine": 24,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "currentLine",
                            "description": "The current line number in the file being parsed.",
                            "codeSnippet": "let currentLine = 0",
                            "codeLine": 31,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "fileContent",
                            "description": "The content of the current file.",
                            "codeSnippet": "const fileContent = await readFile(fullFilePath, 'utf-8');",
                            "codeLine": 35,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "codeChunks",
                            "description": "An array of code chunks extracted from the file content.",
                            "codeSnippet": "const codeChunks = breakCodeIntoChunks(fileContent, 300);",
                            "codeLine": 36,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "getCurrentLineEndLineBasedOnChunk",
                            "description": "A function to calculate the start and end line numbers based on a chunk of code.",
                            "codeSnippet": "const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {",
                            "codeLine": 38,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "lines",
                            "description": "An array of lines in the current code chunk.",
                            "codeSnippet": "const lines = chunk.split('\n')",
                            "codeLine": 40,
                            "codeIndent": 8,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "ignoredFiles",
                            "description": "An array of files or patterns to ignore during codebase parsing.",
                            "codeSnippet": "const ignoredFiles = await getIgnoredFiles(projectPath);",
                            "codeLine": 80,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "fileStats",
                            "description": "Stats about the file being checked for size.",
                            "codeSnippet": "const fileStats = await stat(fullFilePath);",
                            "codeLine": 87,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        }
                    ],
                    "types": [
                        {
                            "name": "ProjectSummary",
                            "description": "An object representing a project's summary information.",
                            "codeSnippet": "const projectSummary: ProjectSummary = {",
                            "codeLine": 10,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "CodeFileSummary",
                            "description": "An object representing the summary of a single code file.",
                            "codeSnippet": "const codeFileSummary: CodeFileSummary = {",
                            "codeLine": 24,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        }
                    ],
                    "comments": [
                        {
                            "content": "Parses a codebase at the given project path, identifying code objects and creating a project summary.",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Placeholder, will be updated later",
                            "codeLine": 12,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Placeholder, will be updated during parsing",
                            "codeLine": 14,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Placeholder, could be fetched from external sources",
                            "codeLine": 15,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Retrieves a list of files or patterns to ignore during codebase parsing.",
                            "codeLine": 77,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Checks if a given file exceeds the specified size limit.",
                            "codeLine": 84,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "TODO=> Add support for way more files",
                            "codeLine": 19,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Handle large files by breaking into chunks and processing separately",
                            "codeLine": 34,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "1000 tokens per chunk",
                            "codeLine": 36,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "Calculates the start and end line numbers based on the current chunk.",
                            "codeLine": 38,
                            "codeIndent": 6,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "An object representing a project's summary information.",
                            "codeLine": 10,
                            "codeIndent": 2,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        },
                        {
                            "content": "An object representing the summary of a single code file.",
                            "codeLine": 24,
                            "codeIndent": 4,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts"
                        }
                    ],
                    "imports": [
                        {
                            "name": "glob",
                            "description": "Import for file globbing.",
                            "codeSnippet": "import { glob } from 'glob';",
                            "codeLine": 1,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "readFile",
                            "description": "Import for reading file content.",
                            "codeSnippet": "import { readFile, stat } from 'fs/promises';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "stat",
                            "description": "Import for getting file stats.",
                            "codeSnippet": "import { readFile, stat } from 'fs/promises';",
                            "codeLine": 2,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "CodeFileSummary",
                            "description": "Import for the CodeFileSummary interface.",
                            "codeSnippet": "import { CodeFileSummary, ProjectSummary, CodeObject, RagData } from './objectSchemas';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "ProjectSummary",
                            "description": "Import for the ProjectSummary interface.",
                            "codeSnippet": "import { CodeFileSummary, ProjectSummary, CodeObject, RagData } from './objectSchemas';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "CodeObject",
                            "description": "Import for the CodeObject interface.",
                            "codeSnippet": "import { CodeFileSummary, ProjectSummary, CodeObject, RagData } from './objectSchemas';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "RagData",
                            "description": "Import for the RagData interface.",
                            "codeSnippet": "import { CodeFileSummary, ProjectSummary, CodeObject, RagData } from './objectSchemas';",
                            "codeLine": 3,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "callGemini",
                            "description": "Import for calling the Gemini LLM.",
                            "codeSnippet": "import { callGemini, callLLM, getCodeSummaryFromLLM,  } from './llmInterface';",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "callLLM",
                            "description": "Import for calling any LLM.",
                            "codeSnippet": "import { callGemini, callLLM, getCodeSummaryFromLLM,  } from './llmInterface';",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "getCodeSummaryFromLLM",
                            "description": "Import for getting a code summary from an LLM.",
                            "codeSnippet": "import { callGemini, callLLM, getCodeSummaryFromLLM,  } from './llmInterface';",
                            "codeLine": 4,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "getLanguageTypeFromFile",
                            "description": "Import for getting the language type of a file.",
                            "codeSnippet": "import { getLanguageTypeFromFile, promptTemplate } from './prompt';",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "promptTemplate",
                            "description": "Import for a prompt template for code analysis.",
                            "codeSnippet": "import { getLanguageTypeFromFile, promptTemplate } from './prompt';",
                            "codeLine": 5,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "saveToVectorDatabase",
                            "description": "Import for saving data to a vector database.",
                            "codeSnippet": "import { saveToVectorDatabase } from './vectorDB';",
                            "codeLine": 6,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "getFileContentLen",
                            "description": "Import for getting the length of file content.",
                            "codeSnippet": "import { getFileContentLen } from './shared';",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        }
                    ],
                    "exports": [
                        {
                            "name": "parseCodebase",
                            "description": "Exports the parseCodebase function.",
                            "codeSnippet": "export async function parseCodebase(",
                            "codeLine": 7,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "getIgnoredFiles",
                            "description": "Exports the getIgnoredFiles function.",
                            "codeSnippet": "export async function getIgnoredFiles(projectPath: string): Promise<string[]> {",
                            "codeLine": 77,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        },
                        {
                            "name": "isFileTooLarge",
                            "description": "Exports the isFileTooLarge function.",
                            "codeSnippet": "export async function isFileTooLarge(fullFilePath: string, sizeLimit: number): Promise<boolean> {",
                            "codeLine": 84,
                            "codeIndent": 0,
                            "fileName": "src/codeParser.ts",
                            "fileLocation": "/Users/your_user/your_project/src/codeParser.ts",
                            "subObjects": []
                        }
                    ],
                    "fileName": "codeParser.ts",
                    "fileLocation": "src/codeParser.ts"
                },
                {
                    "error": {},
                    "original": "{\n    \"classes\": [],\n    \"functions\": [\n        {\n            \"name\": \"getIgnoredFiles\",\n            \"description\": \"Reads the .gitignore file in the project directory and returns an array of ignored file patterns.\",\n            \"codeSnippet\": \"async function getIgnoredFiles(projectPath: string): Promise<string[]> { ... }\",\n            \"codeLine\": 67,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"projectPath\",\n                    \"type\": \"string\",\n                    \"description\": \"The path to the project directory.\",\n                    \"example\": \"/Users/user/project\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string[]\",\n                \"description\": \"An array of ignored file patterns.\",\n                \"example\": [\"node_modules\", \"dist\", \".git\"]\n            }\n        },\n        {\n            \"name\": \"getCurrentLineEndLineBasedOnChunk\",\n            \"description\": \"Gets the end line number of the current code chunk.\",\n            \"codeSnippet\": \"function getCurrentLineEndLineBasedOnChunk(chunk: string): { end: number } { ... }\",\n            \"codeLine\": 15,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"chunk\",\n                    \"type\": \"string\",\n                    \"description\": \"The current code chunk.\",\n                    \"example\": \"const myVar = 'hello';\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"object\",\n                \"description\": \"An object containing the end line number.\",\n                \"example\": { \"end\": 10 }\n            }\n        },\n        {\n            \"name\": \"callLLM\",\n            \"description\": \"Calls the LLM to process the code and returns the code objects.\",\n            \"codeSnippet\": \"async function callLLM(promptTemplate: string, projectSummary: ProjectSummary, code: string, filePath: string): Promise<CodeObject[]> { ... }\",\n            \"codeLine\": 22,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"promptTemplate\",\n                    \"type\": \"string\",\n                    \"description\": \"The prompt template for the LLM.\",\n                    \"example\": \"json\\n{\\n  \\\"role\\\": \\\"user\\\",\\n  \\\"content\\\": \\\"Analyze the following code and return the code objects in JSON format.\\n\\n```\\n\"\n                },\n                {\n                    \"name\": \"projectSummary\",\n                    \"type\": \"ProjectSummary\",\n                    \"description\": \"The project summary object.\",\n                    \"example\": { \"projectName\": \"my-project\", \"codeFiles\": [], \"ragData\": [] }\n                },\n                {\n                    \"name\": \"code\",\n                    \"type\": \"string\",\n                    \"description\": \"The code to be processed.\",\n                    \"example\": \"const myVar = 'hello';\"\n                },\n                {\n                    \"name\": \"filePath\",\n                    \"type\": \"string\",\n                    \"description\": \"The path to the file.\",\n                    \"example\": \"/Users/user/project/src/main.ts\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"CodeObject[]\",\n                \"description\": \"An array of code objects.\",\n                \"example\": [{ \"name\": \"myVar\", \"type\": \"string\", \"description\": \"A variable holding the string 'hello'.\" }]\n            }\n        },\n        {\n            \"name\": \"getCodeSummaryFromLLM\",\n            \"description\": \"Calls the LLM to generate a summary of the code.\",\n            \"codeSnippet\": \"async function getCodeSummaryFromLLM(code: string): Promise<string> { ... }\",\n            \"codeLine\": 34,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"code\",\n                    \"type\": \"string\",\n                    \"description\": \"The code to be summarized.\",\n                    \"example\": \"const myVar = 'hello';\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string\",\n                \"description\": \"The summary of the code.\",\n                \"example\": \"This code snippet defines a variable called myVar and assigns it the string value 'hello'.\"\n            }\n        },\n        {\n            \"name\": \"saveToVectorDatabase\",\n            \"description\": \"Saves the code chunk and its RAG data to the vector database.\",\n            \"codeSnippet\": \"async function saveToVectorDatabase(projectName: string, chunk: string, ragData: RagData): Promise<void> { ... }\",\n            \"codeLine\": 39,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"projectName\",\n                    \"type\": \"string\",\n                    \"description\": \"The name of the project.\",\n                    \"example\": \"my-project\"\n                },\n                {\n                    \"name\": \"chunk\",\n                    \"type\": \"string\",\n                    \"description\": \"The code chunk.\",\n                    \"example\": \"const myVar = 'hello';\"\n                },\n                {\n                    \"name\": \"ragData\",\n                    \"type\": \"RagData\",\n                    \"description\": \"The RAG data associated with the code chunk.\",\n                    \"example\": { \"metadata\": {}, \"documentData\": \"\" }\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"void\",\n                \"description\": \"No return value.\",\n                \"example\": null\n            }\n        },\n        {\n            \"name\": \"readFile\",\n            \"description\": \"Reads a file and returns its content.\",\n            \"codeSnippet\": \"async function readFile(filePath: string, encoding: string): Promise<string> { ... }\",\n            \"codeLine\": 51,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"filePath\",\n                    \"type\": \"string\",\n                    \"description\": \"The path to the file.\",\n                    \"example\": \"/Users/user/project/src/main.ts\"\n                },\n                {\n                    \"name\": \"encoding\",\n                    \"type\": \"string\",\n                    \"description\": \"The encoding of the file.\",\n                    \"example\": \"utf-8\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string\",\n                \"description\": \"The content of the file.\",\n                \"example\": \"const myVar = 'hello';\"\n            }\n        }\n    ],\n    \"variables\": [\n        {\n            \"name\": \"ignorePatterns\",\n            \"description\": \"An array of ignored file patterns.\",\n            \"codeSnippet\": \"let ignorePatterns: string[] = [];\",\n            \"codeLine\": 69,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"gitignoreContent\",\n            \"description\": \"The content of the .gitignore file.\",\n            \"codeSnippet\": \"const gitignoreContent = await readFile(`${projectPath}/.gitignore`, 'utf-8');\",\n            \"codeLine\": 70,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"err\",\n            \"description\": \"The error object.\",\n            \"codeSnippet\": \"} catch (err) {\",\n            \"codeLine\": 73,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"index\",\n            \"description\": \"The index of the current code chunk.\",\n            \"codeSnippet\": \"for (const [index, chunk] of codeChunks.entries()) {\",\n            \"codeLine\": 17,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"chunk\",\n            \"description\": \"The current code chunk.\",\n            \"codeSnippet\": \"for (const [index, chunk] of codeChunks.entries()) {\",\n            \"codeLine\": 17,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"endLine\",\n            \"description\": \"The end line number of the current code chunk.\",\n            \"codeSnippet\": \"const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end\",\n            \"codeLine\": 19,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"chunkCodeObjects\",\n            \"description\": \"The code objects extracted from the current code chunk.\",\n            \"codeSnippet\": \"const chunkCodeObjects = await callLLM(promptTemplate, projectSummary, chunk, filePath);\",\n            \"codeLine\": 21,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"ragData\",\n            \"description\": \"The RAG data associated with the current code chunk.\",\n            \"codeSnippet\": \"const ragData:RagData = { ... }\",\n            \"codeLine\": 23,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"fileContent\",\n            \"description\": \"The content of the file.\",\n            \"codeSnippet\": \"const fileContent = await readFile(fullFilePath, 'utf-8');\",\n            \"codeLine\": 50,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeObjects\",\n            \"description\": \"The code objects extracted from the entire file.\",\n            \"codeSnippet\": \"const codeObjects = await callLLM(promptTemplate, projectSummary, fileContent, filePath);\",\n            \"codeLine\": 51,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeDescription\",\n            \"description\": \"A string containing the descriptions of all code objects.\",\n            \"codeSnippet\": \"const codeDescription = codeFileSummary.codeObjects.map((codeObject) => codeObject.objectDescription).join('\\n');\",\n            \"codeLine\": 62,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"currentLine\",\n            \"description\": \"The current line number.\",\n            \"codeSnippet\": \"let currentLine = 0;\",\n            \"codeLine\": 14,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeChunks\",\n            \"description\": \"An array of code chunks.\",\n            \"codeSnippet\": \"const codeChunks = splitCodeIntoChunks(fileContent);\",\n            \"codeLine\": 16,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"projectSummary\",\n            \"description\": \"The project summary object.\",\n            \"codeSnippet\": \"const projectSummary = { ... }\",\n            \"codeLine\": 7,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"projectName\",\n            \"description\": \"The name of the project.\",\n            \"codeSnippet\": \"const projectName = projectPath.split('/').pop()!\",\n            \"codeLine\": 9,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeFiles\",\n            \"description\": \"An array of code files in the project.\",\n            \"codeSnippet\": \"codeFiles: [],\",\n            \"codeLine\": 8,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"ragData\",\n            \"description\": \"An array of RAG data for each code chunk.\",\n            \"codeSnippet\": \"ragData: [],\",\n            \"codeLine\": 9,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"files\",\n            \"description\": \"An array of files in the project.\",\n            \"codeSnippet\": \"const files = await getFiles(projectPath);\",\n            \"codeLine\": 11,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"ignoredFiles\",\n            \"description\": \"An array of ignored files.\",\n            \"codeSnippet\": \"const ignoredFiles = await getIgnoredFiles(projectPath);\",\n            \"codeLine\": 12,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"fullFilePath\",\n            \"description\": \"The full path to the file.\",\n            \"codeSnippet\": \"const fullFilePath = `${projectPath}/${file}`;\",\n            \"codeLine\": 13,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeFileSummary\",\n            \"description\": \"The summary of the current code file.\",\n            \"codeSnippet\": \"const codeFileSummary: CodeFileSummary = { ... }\",\n            \"codeLine\": 14,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeObjects\",\n            \"description\": \"An array of code objects in the current code file.\",\n            \"codeSnippet\": \"codeObjects: [],\",\n            \"codeLine\": 15,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"codeSummary\",\n            \"description\": \"The summary of the current code file.\",\n            \"codeSnippet\": \"codeSummary: '',\",\n            \"codeLine\": 16,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"promptTemplate\",\n            \"description\": \"The prompt template for the LLM.\",\n            \"codeSnippet\": \"const promptTemplate = `...`;\",\n            \"codeLine\": 20,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"filePath\",\n            \"description\": \"The path to the file.\",\n            \"codeSnippet\": \"const filePath = file;\",\n            \"codeLine\": 21,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"ragData\",\n            \"description\": \"The RAG data associated with the entire file.\",\n            \"codeSnippet\": \"const ragData:RagData = { ... }\",\n            \"codeLine\": 53,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        }\n    ],\n    \"types\": [\n        {\n            \"name\": \"ProjectSummary\",\n            \"description\": \"The project summary object.\",\n            \"codeSnippet\": \"interface ProjectSummary { ... }\",\n            \"codeLine\": 4,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"CodeFileSummary\",\n            \"description\": \"The code file summary object.\",\n            \"codeSnippet\": \"interface CodeFileSummary { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"CodeObject\",\n            \"description\": \"The code object.\",\n            \"codeSnippet\": \"interface CodeObject { ... }\",\n            \"codeLine\": 1,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"RagData\",\n            \"description\": \"The RAG data.\",\n            \"codeSnippet\": \"interface RagData { ... }\",\n            \"codeLine\": 2,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\",\n            \"subObjects\": []\n        }\n    ],\n    \"comments\": [\n        {\n            \"content\": \"// Helper Functions Implementation:\",\n            \"codeLine\": 66,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// Process each chunk's code objects (update projectSummary.ragData, etc.)\",\n            \"codeLine\": 21,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// Process code objects and update projectSummary and codeFiles\",\n            \"codeLine\": 52,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// Process each chunk's code objects (update projectSummary.ragData, etc.)\",\n            \"codeLine\": 54,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// WE need to define the overall execution flow here, with another LLM call?\",\n            \"codeLine\": 61,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param projectPath Path to the project directory\\n * @returns An array of ignored file patterns\\n */\",\n            \"codeLine\": 67,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param chunk The code chunk\\n * @returns The end line number of the current chunk\\n */\",\n            \"codeLine\": 15,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param promptTemplate The prompt template for the LLM\\n * @param projectSummary The project summary object\\n * @param code The code to be processed\\n * @param filePath The path to the file\\n * @returns An array of code objects\\n */\",\n            \"codeLine\": 22,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param code The code to be summarized\\n * @returns The summary of the code\\n */\",\n            \"codeLine\": 34,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param projectName The name of the project\\n * @param chunk The code chunk\\n * @param ragData The RAG data associated with the code chunk\\n */\",\n            \"codeLine\": 39,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param filePath The path to the file\\n * @param encoding The encoding of the file\\n * @returns The content of the file\\n */\",\n            \"codeLine\": 51,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * @param projectPath The path to the project directory\\n * @returns The project summary object\\n */\",\n            \"codeLine\": 7,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"/*\\n * This function processes a project and returns a ProjectSummary object that contains information about the project's files, code objects, and RAG data.\\n * The function first gets the project name, files, and ignored files.\\n * It then iterates through each file and extracts code objects and RAG data.\\n * Finally, it returns the project summary object.\\n */\",\n            \"codeLine\": 7,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/Users/user/project/src/codeParser.ts\"\n        }\n    ],\n    \"imports\": [],\n    \"exports\": []\n}\n```",
                    "fileName": "codeParser.ts",
                    "fileLocation": "src/codeParser.ts"
                },
                {
                    "error": {},
                    "original": "{\n    \"classes\": [],\n    \"functions\": [\n        {\n            \"name\": \"getIgnorePatterns\",\n            \"description\": \"Gets ignore patterns from .gitignore and .fofoignore files.\",\n            \"codeSnippet\": \"async function getIgnorePatterns(projectPath: string): Promise<string[]> {\\n    const ignorePatterns: string[] = [];\\n    try {\\n        const gitignoreContent = await readFile(`${projectPath}/.gitignore`, 'utf-8');\\n        ignorePatterns.push(...gitignoreContent.split('\\n').filter(Boolean));\\n\\n    } catch (err) {\\n        // .gitignore not found, ignore the error\\n        console.warn('No .gitignore file found');\\n    }\\n    try {\\n        const fofoignoreContent = await readFile(`${projectPath}/.fofoignore`, 'utf-8');\\n        ignorePatterns.push(...fofoignoreContent.split('\\n').filter(Boolean));\\n\\n    } catch (err) {\\n        // .fofoignore not found, ignore the error\\n        console.warn('No .fofoignore file found');\\n    }\\n    return ignorePatterns;\\n}\",\n            \"codeLine\": 2,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"projectPath\",\n                    \"type\": \"string\",\n                    \"description\": \"Path to the project directory.\",\n                    \"example\": \"/path/to/project\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"Promise<string[]>\",\n                \"description\": \"An array of ignore patterns.\",\n                \"example\": \"['*.log', '*.txt']\"\n            }\n        },\n        {\n            \"name\": \"getFileSizeInKB\",\n            \"description\": \"Gets the file size in kilobytes.\",\n            \"codeSnippet\": \"async function getFileSizeInKB(filePath: string): Promise<number> {\\n    return await stat(filePath).then(stats => stats.size / 1024);\\n}\",\n            \"codeLine\": 17,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"filePath\",\n                    \"type\": \"string\",\n                    \"description\": \"Path to the file.\",\n                    \"example\": \"/path/to/file.txt\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"Promise<number>\",\n                \"description\": \"The file size in kilobytes.\",\n                \"example\": 1024\n            }\n        },\n        {\n            \"name\": \"isFileTooLarge\",\n            \"description\": \"Checks if the file size is too large or the content exceeds the maximum allowed characters.\",\n            \"codeSnippet\": \"async function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars:number=300): Promise<boolean> {\\n    // Check the amount of characters in the file content\\n    const tooLong = await getFileContentLen(filePath) > maxChars;\\n\\n    if (tooLong) return true;\\n\\n    return await getFileSizeInKB(filePath).then(size => size > maxFileSizeKB);\\n}\",\n            \"codeLine\": 20,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"filePath\",\n                    \"type\": \"string\",\n                    \"description\": \"Path to the file.\",\n                    \"example\": \"/path/to/file.txt\"\n                },\n                {\n                    \"name\": \"maxFileSizeKB\",\n                    \"type\": \"number\",\n                    \"description\": \"Maximum allowed file size in kilobytes.\",\n                    \"example\": 1024\n                },\n                {\n                    \"name\": \"maxChars\",\n                    \"type\": \"number\",\n                    \"description\": \"Maximum allowed characters in the file content.\",\n                    \"example\": 300\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"Promise<boolean>\",\n                \"description\": \"True if the file size is too large or the content exceeds the maximum allowed characters, false otherwise.\",\n                \"example\": true\n            }\n        },\n        {\n            \"name\": \"breakCodeIntoChunks\",\n            \"description\": \"Breaks the code into chunks of specified size.\",\n            \"codeSnippet\": \"function breakCodeIntoChunks(code: string, chunkSize: number): string[] {\\n    const codeByLine = code.split('\\n');\\n    const chunks = [];\\n    let currentChunk = '';\\n    let currentChunkTokenCount = 0;\\n\\n    for (const line of codeByLine) {\\n        const lineTokenCount = line.split(/\\s+/).length; // Approximate token count by splitting on whitespace\\n\\n        if (currentChunkTokenCount + lineTokenCount <= chunkSize) {\\n            currentChunk += line + '\\n';\\n            currentChunkTokenCount += lineTokenCount;\\n        } else {\\n            chunks.push(currentChunk);\\n            currentChunk = line + '\\n';\\n            currentChunkTokenCount = lineTokenCount;\\n        }\\n    }\\n\\n    if (currentChunk) {\\n        chunks.push(currentChunk);\\n    }\\n\\n    return chunks;\\n}\",\n            \"codeLine\": 28,\n            \"codeIndent\": 0,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"code\",\n                    \"type\": \"string\",\n                    \"description\": \"The code to be chunked.\",\n                    \"example\": \"const a = 1;\\nconst b = 2;\"\n                },\n                {\n                    \"name\": \"chunkSize\",\n                    \"type\": \"number\",\n                    \"description\": \"The desired size of each chunk.\",\n                    \"example\": 10\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string[]\",\n                \"description\": \"An array of code chunks.\",\n                \"example\": [\"const a = 1;\\n\", \"const b = 2;\"]\n            }\n        }\n    ],\n    \"variables\": [],\n    \"types\": [],\n    \"comments\": [\n        {\n            \"content\": \"// .gitignore not found, ignore the error\",\n            \"codeLine\": 4,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// .fofoignore not found, ignore the error\",\n            \"codeLine\": 12,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// Check the amount of characters in the file content\",\n            \"codeLine\": 22,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\"\n        },\n        {\n            \"content\": \"// Approximate token count by splitting on whitespace\",\n            \"codeLine\": 33,\n            \"codeIndent\": 4,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\"\n        }\n    ],\n    \"imports\": [\n        {\n            \"name\": \"readFile\",\n            \"description\": \"Reads the content of a file.\",\n            \"codeSnippet\": \"const gitignoreContent = await readFile(`${projectPath}/.gitignore`, 'utf-8');\",\n            \"codeLine\": 5,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"stat\",\n            \"description\": \"Gets the stats of a file.\",\n            \"codeSnippet\": \"return await stat(filePath).then(stats => stats.size / 1024);\",\n            \"codeLine\": 18,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": []\n        },\n        {\n            \"name\": \"getFileContentLen\",\n            \"description\": \"Gets the length of the file content.\",\n            \"codeSnippet\": \"const tooLong = await getFileContentLen(filePath) > maxChars;\",\n            \"codeLine\": 22,\n            \"codeIndent\": 2,\n            \"fileName\": \"src/codeParser.ts\",\n            \"fileLocation\": \"/path/to/src/codeParser.ts\",\n            \"subObjects\": []\n        }\n    ],\n    \"exports\": []\n}",
                    "fileName": "codeParser.ts",
                    "fileLocation": "src/codeParser.ts"
                }
            ]
        }
    ],
    "ragData": [
        {
            "metadata": {
                "filename": ".//src/vectorDB.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 86
            },
            "documentData": "import { ProjectSummary, RagData } from \"./objectSchemas\";\nimport 'dotenv/config'\nimport { ChromaClient, GoogleGenerativeAiEmbeddingFunction, CloudClient, Collection } from 'chromadb'\n\nconst apiPass = process.env.API_PASS || ''\nconst apiUser = process.env.API_USER || ''\nconst geminiKey = process.env.GEMINI_KEY || ''\nconst apiURL = process.env.API_URL || ''\n\n// Check to see if any of the environment variables are missing\nif (!apiPass || !apiUser || !geminiKey || !apiURL) {\n    console.error('Missing environment variables - Please check your .env file')\n    process.exit(1)\n}\n\nconst embedder = new GoogleGenerativeAiEmbeddingFunction({googleApiKey: geminiKey})\n\n// const chromaSettings = {\n//     path: apiURL,\n//       \"auth\": {\n//           provider: \"basic\", credentials: `${apiUser}:${apiPass}`\n//           }\n//     }\n\nconst chromaSettings = undefined\n\nconst client = new ChromaClient(chromaSettings);\n\n\n\nexport async function load_create_collection(projectName:string): Promise<Collection|void> {\n\n    const name = projectName\n    let collection:Collection|void\n\n    const hb = await client.heartbeat().catch((err:any) => {\n        console.log('Error connecting to database')\n        console.error(err)\n    })\n\n    console.log('Heartbeat for Database:')\n    console.log(hb)\n\n    try {\n        collection = await client.getCollection({name:name, embeddingFunction: embedder})\n        if (collection instanceof Collection && 'name' in collection) {\n            return collection\n        }\n    } catch (err) {\n        console.log('Collection not found, creating collection')\n    }\n\n\n\n    collection = await client.createCollection({name: name, embeddingFunction: embedder}).catch((err:any) => {\n        console.log('Error creating collection')\n        console.error(err)\n    })\n\n    return collection\n}\n\n\nexport async function saveToVectorDatabase(projectName:string, code: string, ragData:RagData): Promise<boolean> {\n    let bOK = true\n\n    const meta = ragData.metadata as any\n\n    delete meta.codeObjects\n\n\n    const collection = await load_create_collection(projectName)\n\n    const embeddings = await embedder.generate([code])\n    console.log(embeddings)\n\n    if (!collection) {\n        console.error('Error creating collection')\n        return false\n    }\n\n    const res = await collection.add({\n        ids: [`${projectName}-${ragData.metadata.codeChunkId}`],\n        documents: [\n            code\n"
        },
        {
            "metadata": {
                "filename": ".//src/vectorDB.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 86,
                "codeChunkLineEnd": 121
            },
            "documentData": "        ],\n        embeddings: embeddings,\n        metadatas: [meta]\n    })\n\n    console.log('Saved to Vector Database:')\n    console.log(res)\n    \n    return true\n}\nexport async function searchRAG(projectName:string, searchString: string): Promise<RagData> {\n\n    const collection = await load_create_collection(projectName)\n    if (!collection) {\n        console.error('Error creating collection')\n        return {} as RagData\n    }\n    const searchEmbeddings = await embedder.generate([searchString])\n    const searchResults = await collection.query({queryEmbeddings: searchEmbeddings})\n\n    console.log('Search Results for RAG:')\n    console.log(searchResults)\n\n    const ragData = {\n        metadata: searchResults.metadatas[0] as any || {},\n        embeddings : searchResults.embeddings?[0] as any : {},\n        documentData: searchResults.documents[0] as any || []\n    }\n\n    console.log('RAG Data:')\n    console.log(ragData)\n\n    return ragData\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 76
            },
            "documentData": "export const codeSummary = `\n    Create a summary of the following code in markdown. ONLY respond with the summary, For example:\n    \n    ##Execution Flow\\n\\n1. The app... etc\n`\n\nexport const promptTemplate = `\nYou will be asked to provide a JSON object that contains the identified code objects in the code snippet attached at the bottom of this request.\n\n--\nHere is some context about the project and team that this code is related to:\n<supplemental context>\n\n-- \nHere is some relevant Code Previously Parsed:\n<relevant code>\n\n--\nIn the following code snippet, please identify all of the following:\n- Classes\n- Functions\n- Variables\n- Types\n- Comments\n- Imports\n- Exports\n\nPlease respond with a JSON object containing the identified code objects, their descriptions. ONLY respond with this JSON object, nothing else. For example:\n{\n    \"classes\": [\n        {\n            \"name\": \"ClassName\",\n            \"description\": \"Description of the class\",\n            \"codeSnippet\": \"class ClassName { ... }\",\n            \"codeLine\": 10,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"functions\": [\n        {\n            \"name\": \"functionName\",\n            \"description\": \"Description of the function\",\n            \"codeSnippet\": \"function functionName() { ... }\",\n            \"codeLine\": 20,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": [],\n            \"functionParameters\": [\n                {\n                    \"name\": \"param1\",\n                    \"type\": \"string\",\n                    \"description\": \"Description of the parameter\",\n                    \"example\": \"exampleValue\"\n                }\n            ],\n            \"functionReturns\": {\n                \"type\": \"string\",\n                \"description\": \"Description of the return value\",\n                \"example\": \"exampleReturn\"\n            }\n        }\n    ],\n    \"variables\": [\n        {\n            \"name\": \"variableName\",\n            \"description\": \"Description of the variable\",\n            \"codeSnippet\": \"let variableName = ...;\",\n            \"codeLine\": 30,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n"
        },
        {
            "metadata": {
                "filename": ".//src/prompt.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 76,
                "codeChunkLineEnd": 136
            },
            "documentData": "            \"subObjects\": []\n        }\n    ],\n    \"types\": [\n        {\n            \"name\": \"TypeName\",\n            \"description\": \"Description of the type\",\n            \"codeSnippet\": \"type TypeName = ...;\",\n            \"codeLine\": 40,\n            \"codeIndent\": 2,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"comments\": [\n        {\n            \"content\": \"This is a comment\",\n            \"codeLine\": 50,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\"\n        }\n    ],\n    \"imports\": [\n        {\n            \"name\": \"importName\",\n            \"description\": \"Description of the import\",\n            \"codeSnippet\": \"import importName from 'module';\n            \"codeLine\": 60,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ],\n    \"exports\": [\n        {\n            \"name\": \"exportName\",\n            \"description\": \"Description of the export\",\n            \"codeSnippet\": \"export { exportName };\",\n            \"codeLine\": 70,\n            \"codeIndent\": 0,\n            \"fileName\": \"example.js\",\n            \"fileLocation\": \"/path/to/example.js\",\n            \"subObjects\": []\n        }\n    ]    \n}\n\n--\nCode: <file path>\n<code snippet>\n`;\n\nexport const getLanguageTypeFromFile = (filePath: string) => {\n    return `Based on the file name and path, guess the programming language (i.e. JavaScript, TypeScript, Python, etc.): \n    ${filePath}`\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/objectSchemas.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 78
            },
            "documentData": "export type CodeObjectType = 'class' | 'function' | 'variable' | 'type' | 'comment' | 'import' | 'export' | 'interface' | 'constructor';\n\nexport interface ProjectSummary {\n    projectName: string;\n    projectDescription: string;\n    projectLocation: string;\n    codeFiles: CodeFileSummary[];\n    ragData: RagData[];\n    teamContext: string;\n}\n\nexport interface RagData {\n    metadata: {\n        filename: string;\n        codeChunkId: string|number;\n        codeChunkLineStart: number;\n        codeChunkLineEnd: number;\n        codeObjects: CodeObject;\n        codeChunkSummary: string;\n    };\n    embeddings?: number[][]; // Example: Embeddings could be an array of numbers\n    documentData: any\n}\n\nexport interface CodeFileSummary {\n    fileName: string;\n    fileLocation: string;\n    codeSummary: string;\n    language: string;\n    executionFlow: ExecutionFlow[];\n    codeObjects: CodeObject[];\n}\n\nexport interface ExecutionFlow {\n    step: number;\n    stepDescription: string;\n    bImportant: boolean;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n}\n\nexport interface FunctionParameter {\n    name: string;\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface FunctionReturn {\n    type: string;\n    description: string;\n    example: string;\n}\n\nexport interface CodeObject {\n    name: string;\n    type: CodeObjectType;\n    objectDescription: string;\n    codeSnippet: string;\n    codeLine: number;\n    codeIndent: number;\n    fileName: string;\n    fileLocation: string;\n    subObjects: CodeObject[];\n    parentObject?: CodeObject;\n    functionParameters?: FunctionParameter[];\n    functionReturns?: FunctionReturn;\n    isExported: boolean;\n    isFunction: boolean;\n    isClass: boolean;\n    isPrivate: boolean;\n    isAsync: boolean;\n}\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 86
            },
            "documentData": "import { CodeObject, ProjectSummary } from \"./objectSchemas\"; // Adjust path as needed\nimport { searchRAG } from \"./vectorDB\";\nimport yaml from \"js-yaml\";\nimport { jsonrepair } from 'jsonrepair';\n\nimport \"dotenv/config\";\n\nimport {\n  FunctionDeclarationSchemaType,\n  HarmBlockThreshold,\n  HarmCategory,\n  VertexAI,\n} from \"@google-cloud/vertexai\";\n\nconst project = \"sweet-papa-technologies\";\nconst location = \"us-central1\";\nconst textModel = \"gemini-1.5-flash-preview-0514\";\nconst visionModel = \"gemini-1.5-pro\";\n\nconst vertexAI = new VertexAI({ project: project, location: location });\n\nfunction validateJSON(jsonString: string): boolean {\n  try {\n    JSON.parse(jsonString);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction fixJSON(jsonString: string): string {\n  try {\n    return jsonrepair(jsonString);\n  } catch (e) {\n    throw new Error('Unable to fix JSON');\n  }\n}\n\n\n// Instantiate Gemini models\nconst generativeModel = vertexAI.getGenerativeModel({\n  model: textModel,\n  // The following parameters are optional\n  // They can also be passed to individual content generation requests\n  safetySettings: [\n    {\n      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n    },\n  ],\n  generationConfig: {\n    // maxOutputTokens: 256\n  },\n});\n\nconst generativeVisionModel = vertexAI.getGenerativeModel({\n  model: visionModel,\n});\n\nconst generativeModelPreview = vertexAI.getGenerativeModel({\n  model: textModel,\n});\n\nexport function parseYaml(yamlString: string): any {\n  // Convert YAML file into a proper JSON object\n  try {\n    const obj = yaml.load(yamlString) as any;\n    return obj as any;\n  } catch (e: any) {\n    console.log(e);\n    throw new Error(\"Invalid YAML object\");\n  }\n}\n\nexport function parseText(text: string, resKey = \"response\"): any {\n  // Convert text into a proper JSON object\n  const obj =  {} as any;\n  obj[resKey] = text;\n  return obj;\n}\n\nasync function wait (ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 86,
                "codeChunkLineEnd": 152
            },
            "documentData": "export async function callGemini(\n  prompt: string,\n  responseMode: \"JSON object\" | \"YAML object\" | \"TEXT STRING\" = \"JSON object\",\n  responseKey?: string\n): Promise<any> {\n  const promptResponseInstructions = `Please respond with a ${responseMode} containing your answer. ${\n    responseKey ? `The key for the response should be ${responseKey}.` : \"\"\n  }\\n\\n`;\n\n  if (responseMode !== \"TEXT STRING\" && responseKey) {\n    console.warn(\n      \"responseKey is only applicable for TEXT STRING responseMode. Ignoring responseKey.\"\n    );\n  }\n\n  prompt = prompt.trim();\n  prompt = promptResponseInstructions + prompt;\n\n  const promptLen = prompt.length\n  console.log(\"Prompt Length:\", promptLen);\n\n\n  const request = {\n    contents: [{ role: \"user\", parts: [{ text: prompt }] }],\n  };\n\n  // Wait 20 seconds before calling Gemini\n\n  const startTime = Date.now();\n  const result = await generativeModel.generateContent(request);\n  const endTime = Date.now();\n  const totalTime = endTime - startTime;\n\n  // PRint the total time in seconds, truncated to 2 decimal places\n  console.log(`Total Time: ${totalTime / 1000}s`);\n  console.log(\"Waiting 15 seconds...becuase DEY DONT TRUST US YET.\");\n\n  await wait(15000);\n\n  let response = result.response.candidates?.[0].content?.parts[0].text || \"\";\n\n  if (typeof response !== \"string\") {\n    throw new Error(\"Invalid response from Gemini\");\n  }\n\n  if (responseMode === \"JSON object\") {\n    response = response.replace(\"```json\", \"\").replace(\"```\", \"\").trim();\n\n    \n    if (validateJSON(response)) {\n      console.log('Valid JSON:');\n    } else {\n      try {\n        const fixedJson = fixJSON(response);\n        console.log('Fixed JSON:', fixedJson);\n      } catch (error:any) {\n        console.error('Error fixing JSON:', error.message);\n        console.warn('Returning error message as JSON -- Please Try Again');\n        return { error: error, original: response } as any;\n      }\n    }\n\n    try {\n      const res = JSON.parse(response);\n      return res;\n"
        },
        {
            "metadata": {
                "filename": ".//src/llmInterface.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 152,
                "codeChunkLineEnd": 218
            },
            "documentData": "    } catch (e:any) {\n      console.error('Error parsing JSON:', e);\n      console.warn('Returning error message as JSON -- Please Try Again');\n      return { error: e, original: response } as any;\n    }\n  \n  } else if (responseMode === \"YAML object\") {\n    response = response.replace(\"```yaml\", \"\").replace(\"```\", \"\").trim();\n    const res = parseYaml(response);\n    return res;\n  } else {\n    return parseText(response, responseKey);\n  }\n}\n\nexport async function getCodeSummaryFromLLM(\n  codeToSummarize: string\n): Promise<string> {\n  const question = `Summarize the code block below. Mention the goal of the code and any relevant features / functions: \\n\\n\\`\\`\\`json\\n${codeToSummarize}\\n\\`\\`\\``;\n  const codeSummary = await callGemini(question, \"JSON object\");\n  return codeSummary;\n}\n\nexport async function callLLM(\n  promptTemplate: string,\n  projectContext: ProjectSummary,\n  code: string,\n  filePath: string,\n  bRAG = false\n): Promise<CodeObject> {\n  if (bRAG === true) {\n    // Take 400 characters of relevant code\n    const relevantCode = await searchRAG(projectContext.projectName, code); // Placeholder, implement searchRAG function\n    const r =\n      relevantCode.documentData.length > 400\n        ? relevantCode.documentData.substring(0, 400)\n        : relevantCode.documentData;\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", r); // Not implemented yet, placeholder for RAG\n  } else {\n    promptTemplate = promptTemplate.replace(\"<relevant code>\", \"\");\n  }\n\n  // 1. Prepare Prompt\n  const prompt = promptTemplate\n    .replace(\"<supplemental context>\", projectContext.teamContext) // Add team context\n    .replace(\"<code snippet>\", code)\n    .replace(\"<file path>\", filePath);\n\n  // 2. Call OpenAI\n  const response = await callGemini(prompt, \"JSON object\");\n\n  // 3. Parse and Validate Response\n  let codeObjects: CodeObject = response;\n\n  // 4. Enhance with filePath\n  const getFileNameFromPath = (path: string) => path.split(\"/\").pop() || \"\";\n\n  if (!codeObjects.fileName)\n    codeObjects.fileName = getFileNameFromPath(filePath);\n\n  if (!codeObjects.fileLocation) codeObjects.fileLocation = filePath;\n\n  return codeObjects;\n}\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/index.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 60
            },
            "documentData": "import { Command } from \"commander\";\nimport { parseCodebase } from \"./codeParser\";\nimport { generateDocumentation } from \"./documentationGenerator\";\n\nconst program = new Command();\n\nprogram\n  .name(\"fofodocs\")\n  .description(\"Generate documentation for your codebase using FoFo Docs\")\n  .version(\"1.0.0\")\n  .argument(\"<project_name>\", \"Name of your project\")\n  .option(\n    \"-i, --input <path>\",\n    \"Path to your codebase (default: current directory)\",\n    \".\"\n  )\n  .option(\n    \"-o, --output <path>\",\n    \"Path to output documentation (default: ./output)\",\n    \"./output\"\n  )\n  .option(\"-t, --test <bool>\", \"Run in Test Mode\", \"false\")\n  .action(async (projectName, options) => {\n    console.log(\n      `FoFo Docs is generating documentation for project: ${projectName}`\n    );\n\n    const bTestMode = options.test;\n    const projectPath = options.input;\n    const outputDir = options.output;\n\n    // 1. Parse Codebase\n    try {\n      const parsedCodebase = await parseCodebase(projectPath, projectName);\n\n      // 2. Generate Documentation\n      const bGenerated = await generateDocumentation(\n        parsedCodebase,\n        projectName,\n        outputDir\n      );\n\n      if (!bGenerated) {\n        console.error(\"Documentation generation failed!\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Error during documentation generation:\", error);\n      if (!bTestMode) {\n        process.exit(1);\n      }\n      return;\n    }\n\n    console.log(\"Documentation generation complete!\");\n  });\n\nprogram.parse();\n\n"
        },
        {
            "metadata": {
                "filename": ".//src/documentationGenerator.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 55
            },
            "documentData": "import { ProjectSummary } from \"./objectSchemas\";\nimport fs from 'fs';\nimport path from 'path';\n\nconst backupDirectory = path.join(__dirname, 'backup');\nexport async function generateDocumentation(projectContext: ProjectSummary, code: string, filePath: string): Promise<boolean> {\n\n    if (!fs.existsSync(filePath)) {\n        try{\n            fs.mkdirSync(filePath, {\n                recursive: true\n            });\n        } catch (err) {\n            console.error(err);\n            console.log(\"Using Backup Directory\")\n\n            if (!fs.existsSync(backupDirectory)) {\n                fs.mkdirSync(backupDirectory, {\n                    recursive: true\n                });\n            }\n\n            if (!fs.existsSync(backupDirectory)) {\n                console.error(\"Backup Directory does not exist. We could not make it!\")\n                return false\n            }\n\n            filePath = backupDirectory;\n        }\n    }\n\n    // Check to make sure the filepath is writeable before proceeding\n    try {\n        fs.accessSync(filePath\n        , fs.constants.W_OK);\n    } catch (err) {\n        console.error(`Cannot write to ${filePath}. Please check the path and try again.`);\n        return false;\n    }\n\n    // Save projectContext to a JSON file\n    const projectContextPath = path.join(filePath, 'projectContext.json');\n\n    try {\n        fs.writeFileSync(projectContextPath, JSON.stringify(projectContext, null, 4));\n    } catch (err) {\n        console.error(`Error writing project context to ${projectContextPath}`);\n        \n    }\n\n    // parse the context file, etc.\n\n    return true\n}\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 0,
                "codeChunkLineStart": 0,
                "codeChunkLineEnd": 51
            },
            "documentData": "import { glob } from 'glob';\nimport { readFile, stat } from 'fs/promises';\nimport { CodeFileSummary, ProjectSummary, CodeObject, RagData } from './objectSchemas';\nimport { callGemini, callLLM, getCodeSummaryFromLLM,  } from './llmInterface';\nimport { getLanguageTypeFromFile, promptTemplate } from './prompt';\nimport { saveToVectorDatabase } from './vectorDB';\nimport { getFileContentLen } from './shared';\n\nexport async function parseCodebase(\n    projectPath: string,\n    projectName: string,\n   \n): Promise<ProjectSummary> {\n    const projectSummary: ProjectSummary = {\n        projectName: projectName,\n        projectDescription: '', // Placeholder, will be updated later\n        projectLocation: projectPath,\n        codeFiles: [],\n        ragData: [], // Placeholder, will be updated during parsing\n        teamContext: '', // Placeholder, could be fetched from external sources\n    };   \n\n    const ignorePatterns = ['node_modules/**', 'dist/**', ...(await getIgnoredFiles(projectPath))];\n    const filePaths = await glob('**/*.{ts,js,tsx,jsx}', { cwd: projectPath, ignore: ignorePatterns }); // TODO=> Add support for way more files\n    \n    for (const filePath of filePaths) {\n        console.log(`Parsing file: ${filePath}`);\n        const fullFilePath = `${projectPath}/${filePath}`;\n        const fileLanguage = await callGemini(getLanguageTypeFromFile(fullFilePath), 'TEXT STRING', 'language')\n        console.log('fileLanguage', fileLanguage.language)\n        const codeFileSummary: CodeFileSummary = {\n            fileName: filePath,\n            fileLocation: fullFilePath,\n            codeSummary: '', // Placeholder, will be updated later\n            language: fileLanguage.language || 'Unknown',\n            executionFlow: [], // Placeholder, will be updated later\n            codeObjects: [], // Placeholder, will be updated later\n        };\n        let currentLine = 0\n        if (await isFileTooLarge(fullFilePath, 750)) { // 750KB is the default limit\n            // Handle large files by breaking into chunks and processing separately\n            const fileContent = await readFile(fullFilePath, 'utf-8');\n            const codeChunks = breakCodeIntoChunks(fileContent, 300); // 1000 tokens per chunk\n            const getCurrentLineEndLineBasedOnChunk = (chunk: string) => {\n                const lines = chunk.split('\\n')\n                return {\n                    start: currentLine,\n                    end: currentLine + lines.length\n                }\n            }\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 1,
                "codeChunkLineStart": 51,
                "codeChunkLineEnd": 128
            },
            "documentData": "            console.log('Code broken into codeChunks length =', codeChunks.length)\n            for (const [index, chunk] of codeChunks.entries()) {\n\n                console.log('Processing chunk:', index+1, 'of ', codeChunks.length, ' chunks for file ', filePath)\n                const endLine = getCurrentLineEndLineBasedOnChunk(chunk).end\n\n                // Process each chunk's code objects (update projectSummary.ragData, etc.)\n                const chunkCodeObjects = await callLLM(promptTemplate, projectSummary, chunk, filePath);\n\n                const ragData:RagData = {\n                    metadata: {\n                        filename: fullFilePath,\n                        codeChunkId: index,\n                        codeChunkLineStart: currentLine,\n                        codeChunkLineEnd: endLine,\n                        codeObjects: chunkCodeObjects,\n                        codeChunkSummary: chunkCodeObjects.objectDescription\n                    },\n                    documentData: chunk\n                } \n\n                projectSummary.ragData.push(ragData);\n\n                codeFileSummary.codeObjects.push(chunkCodeObjects);\n                codeFileSummary.codeSummary = await getCodeSummaryFromLLM(chunk);\n                \n\n                await saveToVectorDatabase(projectName, chunk, ragData);\n\n                currentLine = endLine\n\n            }\n\n        } else {\n            const fileContent = await readFile(fullFilePath, 'utf-8');\n            const codeObjects = await callLLM(promptTemplate, projectSummary, fileContent, filePath);\n            // Process code objects and update projectSummary and codeFiles\n\n            // Process each chunk's code objects (update projectSummary.ragData, etc.)\n            const ragData:RagData = {\n            metadata: {\n                filename: fullFilePath,\n                codeChunkId: 0,\n                codeChunkLineStart: 0,\n                codeChunkLineEnd: 0,\n                codeObjects: {} as any,\n                codeChunkSummary: codeObjects.objectDescription \n            },\n            documentData: fileContent\n        } \n\n            await saveToVectorDatabase(projectName, fileContent, ragData);\n\n            codeFileSummary.codeObjects.push(codeObjects);\n            codeFileSummary.codeSummary = await getCodeSummaryFromLLM(fileContent);\n\n        }\n\n        // WE need to define the overall execution flow here, with another LLM call?\n        const codeDescription = codeFileSummary.codeObjects.map((codeObject) => codeObject.objectDescription).join('\\n');\n        codeFileSummary.codeSummary = await getCodeSummaryFromLLM(\"Summaries of Code Chunks: \\n\" + codeDescription);\n        projectSummary.codeFiles.push(codeFileSummary);\n    }\n\n\n    return projectSummary;\n}\n\n// Helper Functions Implementation:\nasync function getIgnoredFiles(projectPath: string): Promise<string[]> {\n    let ignorePatterns: string[] = [];\n    console.log('projectPath', projectPath)\n    try {\n        const gitignoreContent = await readFile(`${projectPath}/.gitignore`, 'utf-8');\n        ignorePatterns.push(...gitignoreContent.split('\\n').filter(Boolean)); // Filter out empty lines\n    } catch (err) {\n"
        },
        {
            "metadata": {
                "filename": ".//src/codeParser.ts",
                "codeChunkId": 2,
                "codeChunkLineStart": 128,
                "codeChunkLineEnd": 181
            },
            "documentData": "        // .gitignore not found, ignore the error\n        console.warn('No .gitignore file found');\n    }\n    try {\n        const fofoignoreContent = await readFile(`${projectPath}/.fofoignore`, 'utf-8');\n        ignorePatterns.push(...fofoignoreContent.split('\\n').filter(Boolean));\n\n    } catch (err) {\n        // .fofoignore not found, ignore the error\n        console.warn('No .fofoignore file found');\n    }\n    return ignorePatterns;\n}\n\nasync function getFileSizeInKB(filePath: string): Promise<number> {\n    return await stat(filePath).then(stats => stats.size / 1024);\n}\n\nasync function isFileTooLarge(filePath: string, maxFileSizeKB: number, maxChars:number=300): Promise<boolean> {\n    // Check the amount of characters in the file content\n    const tooLong = await getFileContentLen(filePath) > maxChars;\n\n    if (tooLong) return true;\n\n    return await getFileSizeInKB(filePath).then(size => size > maxFileSizeKB);\n}\n\nfunction breakCodeIntoChunks(code: string, chunkSize: number): string[] {\n    const codeByLine = code.split('\\n');\n    const chunks = [];\n    let currentChunk = '';\n    let currentChunkTokenCount = 0;\n\n    for (const line of codeByLine) {\n        const lineTokenCount = line.split(/\\s+/).length; // Approximate token count by splitting on whitespace\n\n        if (currentChunkTokenCount + lineTokenCount <= chunkSize) {\n            currentChunk += line + '\\n';\n            currentChunkTokenCount += lineTokenCount;\n        } else {\n            chunks.push(currentChunk);\n            currentChunk = line + '\\n';\n            currentChunkTokenCount = lineTokenCount;\n        }\n    }\n\n    if (currentChunk) {\n        chunks.push(currentChunk);\n    }\n\n    return chunks;\n}\n"
        }
    ],
    "teamContext": ""
}